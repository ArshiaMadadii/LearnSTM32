
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d10  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003e20  08003e20  00004e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f88  08003f88  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f88  08003f88  00004f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f90  08003f90  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f90  08003f90  00004f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f94  08003f94  00004f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003f98  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000070  08004008  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08004008  00005754  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079b9  00000000  00000000  00005099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001898  00000000  00000000  0000ca52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051a  00000000  00000000  0000e998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d5b  00000000  00000000  0000eeb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bf4  00000000  00000000  00025c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fcd  00000000  00000000  0002e801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b07ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd0  00000000  00000000  000b0814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000b27e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003e08 	.word	0x08003e08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003e08 	.word	0x08003e08

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000adc:	b08c      	sub	sp, #48	@ 0x30
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8000c54 <decodeGGA+0x17c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000aee:	e004      	b.n	8000afa <decodeGGA+0x22>
 8000af0:	4b58      	ldr	r3, [pc, #352]	@ (8000c54 <decodeGGA+0x17c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a57      	ldr	r2, [pc, #348]	@ (8000c54 <decodeGGA+0x17c>)
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	4b56      	ldr	r3, [pc, #344]	@ (8000c54 <decodeGGA+0x17c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b08:	d1f2      	bne.n	8000af0 <decodeGGA+0x18>
	inx++;
 8000b0a:	4b52      	ldr	r3, [pc, #328]	@ (8000c54 <decodeGGA+0x17c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a50      	ldr	r2, [pc, #320]	@ (8000c54 <decodeGGA+0x17c>)
 8000b12:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000b14:	e004      	b.n	8000b20 <decodeGGA+0x48>
 8000b16:	4b4f      	ldr	r3, [pc, #316]	@ (8000c54 <decodeGGA+0x17c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	4a4d      	ldr	r2, [pc, #308]	@ (8000c54 <decodeGGA+0x17c>)
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	4b4c      	ldr	r3, [pc, #304]	@ (8000c54 <decodeGGA+0x17c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b2e:	d1f2      	bne.n	8000b16 <decodeGGA+0x3e>
	inx++;
 8000b30:	4b48      	ldr	r3, [pc, #288]	@ (8000c54 <decodeGGA+0x17c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	4a47      	ldr	r2, [pc, #284]	@ (8000c54 <decodeGGA+0x17c>)
 8000b38:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000b3a:	e004      	b.n	8000b46 <decodeGGA+0x6e>
 8000b3c:	4b45      	ldr	r3, [pc, #276]	@ (8000c54 <decodeGGA+0x17c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	4a44      	ldr	r2, [pc, #272]	@ (8000c54 <decodeGGA+0x17c>)
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	4b43      	ldr	r3, [pc, #268]	@ (8000c54 <decodeGGA+0x17c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b54:	d1f2      	bne.n	8000b3c <decodeGGA+0x64>
	inx++;
 8000b56:	4b3f      	ldr	r3, [pc, #252]	@ (8000c54 <decodeGGA+0x17c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c54 <decodeGGA+0x17c>)
 8000b5e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000b60:	e004      	b.n	8000b6c <decodeGGA+0x94>
 8000b62:	4b3c      	ldr	r3, [pc, #240]	@ (8000c54 <decodeGGA+0x17c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	4a3a      	ldr	r2, [pc, #232]	@ (8000c54 <decodeGGA+0x17c>)
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b39      	ldr	r3, [pc, #228]	@ (8000c54 <decodeGGA+0x17c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b7a:	d1f2      	bne.n	8000b62 <decodeGGA+0x8a>
	inx++;
 8000b7c:	4b35      	ldr	r3, [pc, #212]	@ (8000c54 <decodeGGA+0x17c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a34      	ldr	r2, [pc, #208]	@ (8000c54 <decodeGGA+0x17c>)
 8000b84:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000b86:	e004      	b.n	8000b92 <decodeGGA+0xba>
 8000b88:	4b32      	ldr	r3, [pc, #200]	@ (8000c54 <decodeGGA+0x17c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a31      	ldr	r2, [pc, #196]	@ (8000c54 <decodeGGA+0x17c>)
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	4b30      	ldr	r3, [pc, #192]	@ (8000c54 <decodeGGA+0x17c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ba0:	d1f2      	bne.n	8000b88 <decodeGGA+0xb0>
	inx++;
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c54 <decodeGGA+0x17c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8000c54 <decodeGGA+0x17c>)
 8000baa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000bac:	e004      	b.n	8000bb8 <decodeGGA+0xe0>
 8000bae:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <decodeGGA+0x17c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4a27      	ldr	r2, [pc, #156]	@ (8000c54 <decodeGGA+0x17c>)
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <decodeGGA+0x17c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b2c      	cmp	r3, #44	@ 0x2c
 8000bc6:	d1f2      	bne.n	8000bae <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000bc8:	4b22      	ldr	r3, [pc, #136]	@ (8000c54 <decodeGGA+0x17c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <decodeGGA+0x17c>)
 8000bd0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000bd2:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <decodeGGA+0x17c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b31      	cmp	r3, #49	@ 0x31
 8000be0:	d00f      	beq.n	8000c02 <decodeGGA+0x12a>
 8000be2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <decodeGGA+0x17c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b32      	cmp	r3, #50	@ 0x32
 8000bf0:	d007      	beq.n	8000c02 <decodeGGA+0x12a>
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <decodeGGA+0x17c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b36      	cmp	r3, #54	@ 0x36
 8000c00:	d106      	bne.n	8000c10 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2201      	movs	r2, #1
 8000c06:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <decodeGGA+0x17c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000c0e:	e009      	b.n	8000c24 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000c16:	2301      	movs	r3, #1
 8000c18:	e2f2      	b.n	8001200 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <decodeGGA+0x17c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <decodeGGA+0x17c>)
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <decodeGGA+0x17c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c32:	d1f2      	bne.n	8000c1a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <decodeGGA+0x17c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	4a06      	ldr	r2, [pc, #24]	@ (8000c54 <decodeGGA+0x17c>)
 8000c3c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	220c      	movs	r2, #12
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 f99c 	bl	8002f84 <memset>
	i=0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000c50:	e016      	b.n	8000c80 <decodeGGA+0x1a8>
 8000c52:	bf00      	nop
 8000c54:	2000008c 	.word	0x2000008c
	{
		buffer[i] = GGAbuffer[inx];
 8000c58:	4ba7      	ldr	r3, [pc, #668]	@ (8000ef8 <decodeGGA+0x420>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	7819      	ldrb	r1, [r3, #0]
 8000c64:	f107 020c 	add.w	r2, r7, #12
 8000c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c6a:	4413      	add	r3, r2
 8000c6c:	460a      	mov	r2, r1
 8000c6e:	701a      	strb	r2, [r3, #0]
		i++;
 8000c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c72:	3301      	adds	r3, #1
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8000c76:	4ba0      	ldr	r3, [pc, #640]	@ (8000ef8 <decodeGGA+0x420>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a9e      	ldr	r2, [pc, #632]	@ (8000ef8 <decodeGGA+0x420>)
 8000c7e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000c80:	4b9d      	ldr	r3, [pc, #628]	@ (8000ef8 <decodeGGA+0x420>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c8e:	d1e3      	bne.n	8000c58 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 f8ed 	bl	8002e74 <atoi>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a97      	ldr	r2, [pc, #604]	@ (8000efc <decodeGGA+0x424>)
 8000c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca2:	1312      	asrs	r2, r2, #12
 8000ca4:	17db      	asrs	r3, r3, #31
 8000ca6:	1ad2      	subs	r2, r2, r3
 8000ca8:	4b95      	ldr	r3, [pc, #596]	@ (8000f00 <decodeGGA+0x428>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4995      	ldr	r1, [pc, #596]	@ (8000f04 <decodeGGA+0x42c>)
 8000cae:	fb81 0103 	smull	r0, r1, r1, r3
 8000cb2:	1149      	asrs	r1, r1, #5
 8000cb4:	17db      	asrs	r3, r3, #31
 8000cb6:	1acb      	subs	r3, r1, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a93      	ldr	r2, [pc, #588]	@ (8000f08 <decodeGGA+0x430>)
 8000cbc:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 f8d6 	bl	8002e74 <atoi>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a8e      	ldr	r2, [pc, #568]	@ (8000f04 <decodeGGA+0x42c>)
 8000ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd0:	1152      	asrs	r2, r2, #5
 8000cd2:	17db      	asrs	r3, r3, #31
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	4a8b      	ldr	r2, [pc, #556]	@ (8000f04 <decodeGGA+0x42c>)
 8000cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cdc:	1151      	asrs	r1, r2, #5
 8000cde:	17da      	asrs	r2, r3, #31
 8000ce0:	1a8a      	subs	r2, r1, r2
 8000ce2:	2164      	movs	r1, #100	@ 0x64
 8000ce4:	fb01 f202 	mul.w	r2, r1, r2
 8000ce8:	1a9a      	subs	r2, r3, r2
 8000cea:	4b85      	ldr	r3, [pc, #532]	@ (8000f00 <decodeGGA+0x428>)
 8000cec:	6819      	ldr	r1, [r3, #0]
 8000cee:	4b85      	ldr	r3, [pc, #532]	@ (8000f04 <decodeGGA+0x42c>)
 8000cf0:	fb83 0301 	smull	r0, r3, r3, r1
 8000cf4:	1158      	asrs	r0, r3, #5
 8000cf6:	17cb      	asrs	r3, r1, #31
 8000cf8:	1ac3      	subs	r3, r0, r3
 8000cfa:	2064      	movs	r0, #100	@ 0x64
 8000cfc:	fb00 f303 	mul.w	r3, r0, r3
 8000d00:	1acb      	subs	r3, r1, r3
 8000d02:	4413      	add	r3, r2
 8000d04:	4a81      	ldr	r2, [pc, #516]	@ (8000f0c <decodeGGA+0x434>)
 8000d06:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8000d08:	4b80      	ldr	r3, [pc, #512]	@ (8000f0c <decodeGGA+0x434>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d0e:	dd09      	ble.n	8000d24 <decodeGGA+0x24c>
	{
		min = min-60;
 8000d10:	4b7e      	ldr	r3, [pc, #504]	@ (8000f0c <decodeGGA+0x434>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b3c      	subs	r3, #60	@ 0x3c
 8000d16:	4a7d      	ldr	r2, [pc, #500]	@ (8000f0c <decodeGGA+0x434>)
 8000d18:	6013      	str	r3, [r2, #0]
		hr++;
 8000d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f08 <decodeGGA+0x430>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	4a79      	ldr	r2, [pc, #484]	@ (8000f08 <decodeGGA+0x430>)
 8000d22:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8000d24:	4b78      	ldr	r3, [pc, #480]	@ (8000f08 <decodeGGA+0x430>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da09      	bge.n	8000d40 <decodeGGA+0x268>
	{
		hr=24+hr;
 8000d2c:	4b76      	ldr	r3, [pc, #472]	@ (8000f08 <decodeGGA+0x430>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3318      	adds	r3, #24
 8000d32:	4a75      	ldr	r2, [pc, #468]	@ (8000f08 <decodeGGA+0x430>)
 8000d34:	6013      	str	r3, [r2, #0]
		daychange--;
 8000d36:	4b76      	ldr	r3, [pc, #472]	@ (8000f10 <decodeGGA+0x438>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	4a74      	ldr	r2, [pc, #464]	@ (8000f10 <decodeGGA+0x438>)
 8000d3e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8000d40:	4b71      	ldr	r3, [pc, #452]	@ (8000f08 <decodeGGA+0x430>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b17      	cmp	r3, #23
 8000d46:	dd09      	ble.n	8000d5c <decodeGGA+0x284>
	{
		hr=hr-24;
 8000d48:	4b6f      	ldr	r3, [pc, #444]	@ (8000f08 <decodeGGA+0x430>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3b18      	subs	r3, #24
 8000d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8000f08 <decodeGGA+0x430>)
 8000d50:	6013      	str	r3, [r2, #0]
		daychange++;
 8000d52:	4b6f      	ldr	r3, [pc, #444]	@ (8000f10 <decodeGGA+0x438>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a6d      	ldr	r2, [pc, #436]	@ (8000f10 <decodeGGA+0x438>)
 8000d5a:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8000d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8000f08 <decodeGGA+0x430>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8000d64:	4b69      	ldr	r3, [pc, #420]	@ (8000f0c <decodeGGA+0x434>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 f87f 	bl	8002e74 <atoi>
 8000d76:	4602      	mov	r2, r0
 8000d78:	4b62      	ldr	r3, [pc, #392]	@ (8000f04 <decodeGGA+0x42c>)
 8000d7a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d7e:	1159      	asrs	r1, r3, #5
 8000d80:	17d3      	asrs	r3, r2, #31
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	2164      	movs	r1, #100	@ 0x64
 8000d86:	fb01 f303 	mul.w	r3, r1, r3
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8000d90:	4b59      	ldr	r3, [pc, #356]	@ (8000ef8 <decodeGGA+0x420>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a58      	ldr	r2, [pc, #352]	@ (8000ef8 <decodeGGA+0x420>)
 8000d98:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	220c      	movs	r2, #12
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 f8ee 	bl	8002f84 <memset>
	i=0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000dac:	e013      	b.n	8000dd6 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8000dae:	4b52      	ldr	r3, [pc, #328]	@ (8000ef8 <decodeGGA+0x420>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	7819      	ldrb	r1, [r3, #0]
 8000dba:	f107 020c 	add.w	r2, r7, #12
 8000dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc0:	4413      	add	r3, r2
 8000dc2:	460a      	mov	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
		i++;
 8000dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc8:	3301      	adds	r3, #1
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef8 <decodeGGA+0x420>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	4a49      	ldr	r2, [pc, #292]	@ (8000ef8 <decodeGGA+0x420>)
 8000dd4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000dd6:	4b48      	ldr	r3, [pc, #288]	@ (8000ef8 <decodeGGA+0x420>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000de4:	d1e3      	bne.n	8000dae <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff f9b0 	bl	8000150 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b05      	cmp	r3, #5
 8000df4:	d801      	bhi.n	8000dfa <decodeGGA+0x322>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e202      	b.n	8001200 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 f838 	bl	8002e74 <atoi>
 8000e04:	4603      	mov	r3, r0
 8000e06:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8000e0c:	e002      	b.n	8000e14 <decodeGGA+0x33c>
 8000e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e10:	3301      	adds	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e20:	d1f5      	bne.n	8000e0e <decodeGGA+0x336>
	j++;
 8000e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e24:	3301      	adds	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f98f 	bl	8000150 <strlen>
 8000e32:	4602      	mov	r2, r0
 8000e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	4413      	add	r3, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 f816 	bl	8002e74 <atoi>
 8000e48:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8000e4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fad8 	bl	8000404 <__aeabi_i2d>
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b2e      	ldr	r3, [pc, #184]	@ (8000f14 <decodeGGA+0x43c>)
 8000e5a:	f7ff fc67 	bl	800072c <__aeabi_ddiv>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4690      	mov	r8, r2
 8000e64:	4699      	mov	r9, r3
 8000e66:	69f8      	ldr	r0, [r7, #28]
 8000e68:	f7ff facc 	bl	8000404 <__aeabi_i2d>
 8000e6c:	4604      	mov	r4, r0
 8000e6e:	460d      	mov	r5, r1
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	3302      	adds	r3, #2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fac5 	bl	8000404 <__aeabi_i2d>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	f04f 0000 	mov.w	r0, #0
 8000e82:	4925      	ldr	r1, [pc, #148]	@ (8000f18 <decodeGGA+0x440>)
 8000e84:	f002 f8b0 	bl	8002fe8 <pow>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	4629      	mov	r1, r5
 8000e90:	f7ff fc4c 	bl	800072c <__aeabi_ddiv>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4640      	mov	r0, r8
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	f7ff f966 	bl	800016c <__adddf3>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fdc6 	bl	8000a38 <__aeabi_d2f>
 8000eac:	4603      	mov	r3, r0
 8000eae:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	601a      	str	r2, [r3, #0]
	inx++;  
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <decodeGGA+0x420>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <decodeGGA+0x420>)
 8000ebe:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <decodeGGA+0x420>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <decodeGGA+0x420>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <decodeGGA+0x420>)
 8000ed8:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <decodeGGA+0x420>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <decodeGGA+0x420>)
 8000ee2:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	220c      	movs	r2, #12
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 f849 	bl	8002f84 <memset>
	i=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000ef6:	e025      	b.n	8000f44 <decodeGGA+0x46c>
 8000ef8:	2000008c 	.word	0x2000008c
 8000efc:	68db8bad 	.word	0x68db8bad
 8000f00:	20000000 	.word	0x20000000
 8000f04:	51eb851f 	.word	0x51eb851f
 8000f08:	20000090 	.word	0x20000090
 8000f0c:	20000094 	.word	0x20000094
 8000f10:	200000a4 	.word	0x200000a4
 8000f14:	40590000 	.word	0x40590000
 8000f18:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8000f1c:	4b88      	ldr	r3, [pc, #544]	@ (8001140 <decodeGGA+0x668>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	7819      	ldrb	r1, [r3, #0]
 8000f28:	f107 020c 	add.w	r2, r7, #12
 8000f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2e:	4413      	add	r3, r2
 8000f30:	460a      	mov	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
		i++;
 8000f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f36:	3301      	adds	r3, #1
 8000f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8000f3a:	4b81      	ldr	r3, [pc, #516]	@ (8001140 <decodeGGA+0x668>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4a7f      	ldr	r2, [pc, #508]	@ (8001140 <decodeGGA+0x668>)
 8000f42:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000f44:	4b7e      	ldr	r3, [pc, #504]	@ (8001140 <decodeGGA+0x668>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f52:	d1e3      	bne.n	8000f1c <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 ff8b 	bl	8002e74 <atoi>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8000f66:	e002      	b.n	8000f6e <decodeGGA+0x496>
 8000f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f6e:	f107 020c 	add.w	r2, r7, #12
 8000f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b2e      	cmp	r3, #46	@ 0x2e
 8000f7a:	d1f5      	bne.n	8000f68 <decodeGGA+0x490>
	j++;
 8000f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f7e:	3301      	adds	r3, #1
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff f8e2 	bl	8000150 <strlen>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 ff69 	bl	8002e74 <atoi>
 8000fa2:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8000fa4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa2b 	bl	8000404 <__aeabi_i2d>
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b64      	ldr	r3, [pc, #400]	@ (8001144 <decodeGGA+0x66c>)
 8000fb4:	f7ff fbba 	bl	800072c <__aeabi_ddiv>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	4699      	mov	r9, r3
 8000fc0:	69f8      	ldr	r0, [r7, #28]
 8000fc2:	f7ff fa1f 	bl	8000404 <__aeabi_i2d>
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	460d      	mov	r5, r1
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa18 	bl	8000404 <__aeabi_i2d>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	f04f 0000 	mov.w	r0, #0
 8000fdc:	495a      	ldr	r1, [pc, #360]	@ (8001148 <decodeGGA+0x670>)
 8000fde:	f002 f803 	bl	8002fe8 <pow>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	4629      	mov	r1, r5
 8000fea:	f7ff fb9f 	bl	800072c <__aeabi_ddiv>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f7ff f8b9 	bl	800016c <__adddf3>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fd19 	bl	8000a38 <__aeabi_d2f>
 8001006:	4603      	mov	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	609a      	str	r2, [r3, #8]
	inx++;
 8001010:	4b4b      	ldr	r3, [pc, #300]	@ (8001140 <decodeGGA+0x668>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a4a      	ldr	r2, [pc, #296]	@ (8001140 <decodeGGA+0x668>)
 8001018:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800101a:	4b49      	ldr	r3, [pc, #292]	@ (8001140 <decodeGGA+0x668>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 800102a:	4b45      	ldr	r3, [pc, #276]	@ (8001140 <decodeGGA+0x668>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a43      	ldr	r2, [pc, #268]	@ (8001140 <decodeGGA+0x668>)
 8001032:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001034:	4b42      	ldr	r3, [pc, #264]	@ (8001140 <decodeGGA+0x668>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a41      	ldr	r2, [pc, #260]	@ (8001140 <decodeGGA+0x668>)
 800103c:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800103e:	4b40      	ldr	r3, [pc, #256]	@ (8001140 <decodeGGA+0x668>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a3e      	ldr	r2, [pc, #248]	@ (8001140 <decodeGGA+0x668>)
 8001046:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001048:	4b3d      	ldr	r3, [pc, #244]	@ (8001140 <decodeGGA+0x668>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a3c      	ldr	r2, [pc, #240]	@ (8001140 <decodeGGA+0x668>)
 8001050:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	220c      	movs	r2, #12
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f001 ff92 	bl	8002f84 <memset>
	i=0;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001064:	e013      	b.n	800108e <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 8001066:	4b36      	ldr	r3, [pc, #216]	@ (8001140 <decodeGGA+0x668>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	7819      	ldrb	r1, [r3, #0]
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001078:	4413      	add	r3, r2
 800107a:	460a      	mov	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
		i++;
 800107e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001080:	3301      	adds	r3, #1
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001084:	4b2e      	ldr	r3, [pc, #184]	@ (8001140 <decodeGGA+0x668>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a2d      	ldr	r2, [pc, #180]	@ (8001140 <decodeGGA+0x668>)
 800108c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800108e:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <decodeGGA+0x668>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b2c      	cmp	r3, #44	@ 0x2c
 800109c:	d1e3      	bne.n	8001066 <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fee6 	bl	8002e74 <atoi>
 80010a8:	4602      	mov	r2, r0
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80010ae:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <decodeGGA+0x668>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a22      	ldr	r2, [pc, #136]	@ (8001140 <decodeGGA+0x668>)
 80010b6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 80010b8:	e004      	b.n	80010c4 <decodeGGA+0x5ec>
 80010ba:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <decodeGGA+0x668>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001140 <decodeGGA+0x668>)
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <decodeGGA+0x668>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b2c      	cmp	r3, #44	@ 0x2c
 80010d2:	d1f2      	bne.n	80010ba <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <decodeGGA+0x668>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <decodeGGA+0x668>)
 80010dc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	220c      	movs	r2, #12
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 ff4c 	bl	8002f84 <memset>
	i=0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 80010f0:	e013      	b.n	800111a <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 80010f2:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <decodeGGA+0x668>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	7819      	ldrb	r1, [r3, #0]
 80010fe:	f107 020c 	add.w	r2, r7, #12
 8001102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001104:	4413      	add	r3, r2
 8001106:	460a      	mov	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
		i++;
 800110a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800110c:	3301      	adds	r3, #1
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001110:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <decodeGGA+0x668>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <decodeGGA+0x668>)
 8001118:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <decodeGGA+0x668>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b2c      	cmp	r3, #44	@ 0x2c
 8001128:	d1e3      	bne.n	80010f2 <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fea0 	bl	8002e74 <atoi>
 8001134:	4603      	mov	r3, r0
 8001136:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 800113c:	e009      	b.n	8001152 <decodeGGA+0x67a>
 800113e:	bf00      	nop
 8001140:	2000008c 	.word	0x2000008c
 8001144:	40590000 	.word	0x40590000
 8001148:	40240000 	.word	0x40240000
 800114c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800114e:	3301      	adds	r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001152:	f107 020c 	add.w	r2, r7, #12
 8001156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b2e      	cmp	r3, #46	@ 0x2e
 800115e:	d1f5      	bne.n	800114c <decodeGGA+0x674>
	j++;
 8001160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001162:	3301      	adds	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4618      	mov	r0, r3
 800116c:	f7fe fff0 	bl	8000150 <strlen>
 8001170:	4602      	mov	r2, r0
 8001172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	4413      	add	r3, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fe77 	bl	8002e74 <atoi>
 8001186:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001188:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f939 	bl	8000404 <__aeabi_i2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	69f8      	ldr	r0, [r7, #28]
 8001198:	f7ff f934 	bl	8000404 <__aeabi_i2d>
 800119c:	4680      	mov	r8, r0
 800119e:	4689      	mov	r9, r1
 80011a0:	6a38      	ldr	r0, [r7, #32]
 80011a2:	f7ff f92f 	bl	8000404 <__aeabi_i2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4917      	ldr	r1, [pc, #92]	@ (800120c <decodeGGA+0x734>)
 80011b0:	f001 ff1a 	bl	8002fe8 <pow>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4640      	mov	r0, r8
 80011ba:	4649      	mov	r1, r9
 80011bc:	f7ff fab6 	bl	800072c <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4620      	mov	r0, r4
 80011c6:	4629      	mov	r1, r5
 80011c8:	f7fe ffd0 	bl	800016c <__adddf3>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fc30 	bl	8000a38 <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	621a      	str	r2, [r3, #32]

	inx++;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <decodeGGA+0x738>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <decodeGGA+0x738>)
 80011ea:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <decodeGGA+0x738>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return 0;
 80011fe:	2300      	movs	r3, #0

}
 8001200:	4618      	mov	r0, r3
 8001202:	3730      	adds	r7, #48	@ 0x30
 8001204:	46bd      	mov	sp, r7
 8001206:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800120a:	bf00      	nop
 800120c:	40240000 	.word	0x40240000
 8001210:	2000008c 	.word	0x2000008c

08001214 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001214:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001218:	b090      	sub	sp, #64	@ 0x40
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001220:	4b92      	ldr	r3, [pc, #584]	@ (800146c <decodeRMC+0x258>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800122a:	e004      	b.n	8001236 <decodeRMC+0x22>
 800122c:	4b8f      	ldr	r3, [pc, #572]	@ (800146c <decodeRMC+0x258>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	4a8e      	ldr	r2, [pc, #568]	@ (800146c <decodeRMC+0x258>)
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b8d      	ldr	r3, [pc, #564]	@ (800146c <decodeRMC+0x258>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b2c      	cmp	r3, #44	@ 0x2c
 8001244:	d1f2      	bne.n	800122c <decodeRMC+0x18>
	inx++;
 8001246:	4b89      	ldr	r3, [pc, #548]	@ (800146c <decodeRMC+0x258>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a87      	ldr	r2, [pc, #540]	@ (800146c <decodeRMC+0x258>)
 800124e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001250:	e004      	b.n	800125c <decodeRMC+0x48>
 8001252:	4b86      	ldr	r3, [pc, #536]	@ (800146c <decodeRMC+0x258>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	4a84      	ldr	r2, [pc, #528]	@ (800146c <decodeRMC+0x258>)
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b83      	ldr	r3, [pc, #524]	@ (800146c <decodeRMC+0x258>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b2c      	cmp	r3, #44	@ 0x2c
 800126a:	d1f2      	bne.n	8001252 <decodeRMC+0x3e>
	inx++;
 800126c:	4b7f      	ldr	r3, [pc, #508]	@ (800146c <decodeRMC+0x258>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a7e      	ldr	r2, [pc, #504]	@ (800146c <decodeRMC+0x258>)
 8001274:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001276:	4b7d      	ldr	r3, [pc, #500]	@ (800146c <decodeRMC+0x258>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b41      	cmp	r3, #65	@ 0x41
 8001284:	d10d      	bne.n	80012a2 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 800128c:	4b77      	ldr	r3, [pc, #476]	@ (800146c <decodeRMC+0x258>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	4a76      	ldr	r2, [pc, #472]	@ (800146c <decodeRMC+0x258>)
 8001294:	6013      	str	r3, [r2, #0]
	inx++;
 8001296:	4b75      	ldr	r3, [pc, #468]	@ (800146c <decodeRMC+0x258>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a73      	ldr	r2, [pc, #460]	@ (800146c <decodeRMC+0x258>)
 800129e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80012a0:	e009      	b.n	80012b6 <decodeRMC+0xa2>
		rmc->isValid =0;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
		return 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e1d5      	b.n	8001658 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80012ac:	4b6f      	ldr	r3, [pc, #444]	@ (800146c <decodeRMC+0x258>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a6e      	ldr	r2, [pc, #440]	@ (800146c <decodeRMC+0x258>)
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b6d      	ldr	r3, [pc, #436]	@ (800146c <decodeRMC+0x258>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b2c      	cmp	r3, #44	@ 0x2c
 80012c4:	d1f2      	bne.n	80012ac <decodeRMC+0x98>
	inx++;
 80012c6:	4b69      	ldr	r3, [pc, #420]	@ (800146c <decodeRMC+0x258>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a67      	ldr	r2, [pc, #412]	@ (800146c <decodeRMC+0x258>)
 80012ce:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80012d0:	e004      	b.n	80012dc <decodeRMC+0xc8>
 80012d2:	4b66      	ldr	r3, [pc, #408]	@ (800146c <decodeRMC+0x258>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a64      	ldr	r2, [pc, #400]	@ (800146c <decodeRMC+0x258>)
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b63      	ldr	r3, [pc, #396]	@ (800146c <decodeRMC+0x258>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b2c      	cmp	r3, #44	@ 0x2c
 80012ea:	d1f2      	bne.n	80012d2 <decodeRMC+0xbe>
	inx++;
 80012ec:	4b5f      	ldr	r3, [pc, #380]	@ (800146c <decodeRMC+0x258>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a5e      	ldr	r2, [pc, #376]	@ (800146c <decodeRMC+0x258>)
 80012f4:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 80012f6:	e004      	b.n	8001302 <decodeRMC+0xee>
 80012f8:	4b5c      	ldr	r3, [pc, #368]	@ (800146c <decodeRMC+0x258>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a5b      	ldr	r2, [pc, #364]	@ (800146c <decodeRMC+0x258>)
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b5a      	ldr	r3, [pc, #360]	@ (800146c <decodeRMC+0x258>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001310:	d1f2      	bne.n	80012f8 <decodeRMC+0xe4>
	inx++;
 8001312:	4b56      	ldr	r3, [pc, #344]	@ (800146c <decodeRMC+0x258>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a54      	ldr	r2, [pc, #336]	@ (800146c <decodeRMC+0x258>)
 800131a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 800131c:	e004      	b.n	8001328 <decodeRMC+0x114>
 800131e:	4b53      	ldr	r3, [pc, #332]	@ (800146c <decodeRMC+0x258>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a51      	ldr	r2, [pc, #324]	@ (800146c <decodeRMC+0x258>)
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b50      	ldr	r3, [pc, #320]	@ (800146c <decodeRMC+0x258>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b2c      	cmp	r3, #44	@ 0x2c
 8001336:	d1f2      	bne.n	800131e <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8001338:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <decodeRMC+0x258>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a4b      	ldr	r2, [pc, #300]	@ (800146c <decodeRMC+0x258>)
 8001340:	6013      	str	r3, [r2, #0]
	i=0;
 8001342:	2300      	movs	r3, #0
 8001344:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	220c      	movs	r2, #12
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f001 fe18 	bl	8002f84 <memset>
	while (RMCbuffer[inx] != ',')
 8001354:	e013      	b.n	800137e <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8001356:	4b45      	ldr	r3, [pc, #276]	@ (800146c <decodeRMC+0x258>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	7819      	ldrb	r1, [r3, #0]
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001368:	4413      	add	r3, r2
 800136a:	460a      	mov	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
		i++;
 800136e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001370:	3301      	adds	r3, #1
 8001372:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001374:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <decodeRMC+0x258>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a3c      	ldr	r2, [pc, #240]	@ (800146c <decodeRMC+0x258>)
 800137c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800137e:	4b3b      	ldr	r3, [pc, #236]	@ (800146c <decodeRMC+0x258>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b2c      	cmp	r3, #44	@ 0x2c
 800138c:	d1e3      	bne.n	8001356 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d055      	beq.n	8001444 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fd69 	bl	8002e74 <atoi>
 80013a2:	4603      	mov	r3, r0
 80013a4:	867b      	strh	r3, [r7, #50]	@ 0x32
		int j = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
		while (buffer[j] != '.') j++;   // same as above
 80013aa:	e002      	b.n	80013b2 <decodeRMC+0x19e>
 80013ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013ae:	3301      	adds	r3, #1
 80013b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013b2:	f107 0208 	add.w	r2, r7, #8
 80013b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80013be:	d1f5      	bne.n	80013ac <decodeRMC+0x198>
		j++;
 80013c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013c2:	3301      	adds	r3, #1
 80013c4:	63bb      	str	r3, [r7, #56]	@ 0x38
		int declen = (strlen(buffer))-j;
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe fec0 	bl	8000150 <strlen>
 80013d0:	4602      	mov	r2, r0
 80013d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int dec = atoi ((char *) buffer+j);
 80013d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013da:	f107 0208 	add.w	r2, r7, #8
 80013de:	4413      	add	r3, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fd47 	bl	8002e74 <atoi>
 80013e6:	62b8      	str	r0, [r7, #40]	@ 0x28
		float lat = num + (dec/pow(10, (declen)));
 80013e8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f809 	bl	8000404 <__aeabi_i2d>
 80013f2:	4604      	mov	r4, r0
 80013f4:	460d      	mov	r5, r1
 80013f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80013f8:	f7ff f804 	bl	8000404 <__aeabi_i2d>
 80013fc:	4680      	mov	r8, r0
 80013fe:	4689      	mov	r9, r1
 8001400:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001402:	f7fe ffff 	bl	8000404 <__aeabi_i2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	f04f 0000 	mov.w	r0, #0
 800140e:	4918      	ldr	r1, [pc, #96]	@ (8001470 <decodeRMC+0x25c>)
 8001410:	f001 fdea 	bl	8002fe8 <pow>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4640      	mov	r0, r8
 800141a:	4649      	mov	r1, r9
 800141c:	f7ff f986 	bl	800072c <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4620      	mov	r0, r4
 8001426:	4629      	mov	r1, r5
 8001428:	f7fe fea0 	bl	800016c <__adddf3>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb00 	bl	8000a38 <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
		rmc->speed = lat;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	e003      	b.n	800144c <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <decodeRMC+0x258>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	4a06      	ldr	r2, [pc, #24]	@ (800146c <decodeRMC+0x258>)
 8001454:	6013      	str	r3, [r2, #0]
	i=0;
 8001456:	2300      	movs	r3, #0
 8001458:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	220c      	movs	r2, #12
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f001 fd8e 	bl	8002f84 <memset>
	while (RMCbuffer[inx] != ',')
 8001468:	e018      	b.n	800149c <decodeRMC+0x288>
 800146a:	bf00      	nop
 800146c:	2000008c 	.word	0x2000008c
 8001470:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 8001474:	4b7b      	ldr	r3, [pc, #492]	@ (8001664 <decodeRMC+0x450>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	7819      	ldrb	r1, [r3, #0]
 8001480:	f107 0208 	add.w	r2, r7, #8
 8001484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001486:	4413      	add	r3, r2
 8001488:	460a      	mov	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
		i++;
 800148c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800148e:	3301      	adds	r3, #1
 8001490:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001492:	4b74      	ldr	r3, [pc, #464]	@ (8001664 <decodeRMC+0x450>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a72      	ldr	r2, [pc, #456]	@ (8001664 <decodeRMC+0x450>)
 800149a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800149c:	4b71      	ldr	r3, [pc, #452]	@ (8001664 <decodeRMC+0x450>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b2c      	cmp	r3, #44	@ 0x2c
 80014aa:	d1e3      	bne.n	8001474 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d055      	beq.n	8001562 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 fcda 	bl	8002e74 <atoi>
 80014c0:	4603      	mov	r3, r0
 80014c2:	847b      	strh	r3, [r7, #34]	@ 0x22
		int j = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
		while (buffer[j] != '.') j++;   // same as above
 80014c8:	e002      	b.n	80014d0 <decodeRMC+0x2bc>
 80014ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014cc:	3301      	adds	r3, #1
 80014ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80014d0:	f107 0208 	add.w	r2, r7, #8
 80014d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014d6:	4413      	add	r3, r2
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b2e      	cmp	r3, #46	@ 0x2e
 80014dc:	d1f5      	bne.n	80014ca <decodeRMC+0x2b6>
		j++;
 80014de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e0:	3301      	adds	r3, #1
 80014e2:	637b      	str	r3, [r7, #52]	@ 0x34
		int declen = (strlen(buffer))-j;
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fe31 	bl	8000150 <strlen>
 80014ee:	4602      	mov	r2, r0
 80014f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 80014f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f8:	f107 0208 	add.w	r2, r7, #8
 80014fc:	4413      	add	r3, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fcb8 	bl	8002e74 <atoi>
 8001504:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001506:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ff7a 	bl	8000404 <__aeabi_i2d>
 8001510:	4604      	mov	r4, r0
 8001512:	460d      	mov	r5, r1
 8001514:	69b8      	ldr	r0, [r7, #24]
 8001516:	f7fe ff75 	bl	8000404 <__aeabi_i2d>
 800151a:	4680      	mov	r8, r0
 800151c:	4689      	mov	r9, r1
 800151e:	69f8      	ldr	r0, [r7, #28]
 8001520:	f7fe ff70 	bl	8000404 <__aeabi_i2d>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	f04f 0000 	mov.w	r0, #0
 800152c:	494e      	ldr	r1, [pc, #312]	@ (8001668 <decodeRMC+0x454>)
 800152e:	f001 fd5b 	bl	8002fe8 <pow>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4640      	mov	r0, r8
 8001538:	4649      	mov	r1, r9
 800153a:	f7ff f8f7 	bl	800072c <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7fe fe11 	bl	800016c <__adddf3>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fa71 	bl	8000a38 <__aeabi_d2f>
 8001556:	4603      	mov	r3, r0
 8001558:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	e003      	b.n	800156a <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 800156a:	4b3e      	ldr	r3, [pc, #248]	@ (8001664 <decodeRMC+0x450>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	4a3c      	ldr	r2, [pc, #240]	@ (8001664 <decodeRMC+0x450>)
 8001572:	6013      	str	r3, [r2, #0]
	i=0;
 8001574:	2300      	movs	r3, #0
 8001576:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	220c      	movs	r2, #12
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fcff 	bl	8002f84 <memset>
	while (RMCbuffer[inx] != ',')
 8001586:	e013      	b.n	80015b0 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 8001588:	4b36      	ldr	r3, [pc, #216]	@ (8001664 <decodeRMC+0x450>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	7819      	ldrb	r1, [r3, #0]
 8001594:	f107 0208 	add.w	r2, r7, #8
 8001598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800159a:	4413      	add	r3, r2
 800159c:	460a      	mov	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
		i++;
 80015a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015a2:	3301      	adds	r3, #1
 80015a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 80015a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001664 <decodeRMC+0x450>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001664 <decodeRMC+0x450>)
 80015ae:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80015b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <decodeRMC+0x450>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b2c      	cmp	r3, #44	@ 0x2c
 80015be:	d1e3      	bne.n	8001588 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fc55 	bl	8002e74 <atoi>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a27      	ldr	r2, [pc, #156]	@ (800166c <decodeRMC+0x458>)
 80015ce:	fb82 1203 	smull	r1, r2, r2, r3
 80015d2:	1312      	asrs	r2, r2, #12
 80015d4:	17db      	asrs	r3, r3, #31
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4a25      	ldr	r2, [pc, #148]	@ (8001670 <decodeRMC+0x45c>)
 80015da:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fc47 	bl	8002e74 <atoi>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a22      	ldr	r2, [pc, #136]	@ (8001674 <decodeRMC+0x460>)
 80015ea:	fb82 1203 	smull	r1, r2, r2, r3
 80015ee:	1152      	asrs	r2, r2, #5
 80015f0:	17db      	asrs	r3, r3, #31
 80015f2:	1ad2      	subs	r2, r2, r3
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <decodeRMC+0x460>)
 80015f6:	fb83 1302 	smull	r1, r3, r3, r2
 80015fa:	1159      	asrs	r1, r3, #5
 80015fc:	17d3      	asrs	r3, r2, #31
 80015fe:	1acb      	subs	r3, r1, r3
 8001600:	2164      	movs	r1, #100	@ 0x64
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	4a1b      	ldr	r2, [pc, #108]	@ (8001678 <decodeRMC+0x464>)
 800160a:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4618      	mov	r0, r3
 8001612:	f001 fc2f 	bl	8002e74 <atoi>
 8001616:	4602      	mov	r2, r0
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <decodeRMC+0x460>)
 800161a:	fb83 1302 	smull	r1, r3, r3, r2
 800161e:	1159      	asrs	r1, r3, #5
 8001620:	17d3      	asrs	r3, r2, #31
 8001622:	1acb      	subs	r3, r1, r3
 8001624:	2164      	movs	r1, #100	@ 0x64
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	4a13      	ldr	r2, [pc, #76]	@ (800167c <decodeRMC+0x468>)
 800162e:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <decodeRMC+0x45c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <decodeRMC+0x46c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4413      	add	r3, r2
 800163a:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <decodeRMC+0x45c>)
 800163c:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <decodeRMC+0x45c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001646:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <decodeRMC+0x464>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <decodeRMC+0x468>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	609a      	str	r2, [r3, #8]

	return 0;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3740      	adds	r7, #64	@ 0x40
 800165c:	46bd      	mov	sp, r7
 800165e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001662:	bf00      	nop
 8001664:	2000008c 	.word	0x2000008c
 8001668:	40240000 	.word	0x40240000
 800166c:	68db8bad 	.word	0x68db8bad
 8001670:	20000098 	.word	0x20000098
 8001674:	51eb851f 	.word	0x51eb851f
 8001678:	2000009c 	.word	0x2000009c
 800167c:	200000a0 	.word	0x200000a0
 8001680:	200000a4 	.word	0x200000a4

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001688:	f000 fbee 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168c:	f000 f836 	bl	80016fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001690:	f000 f8a4 	bl	80017dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001694:	f000 f878 	bl	8001788 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Ringbuf_init(); //initial Ringbuffer
 8001698:	f000 f9b0 	bl	80019fc <Ringbuf_init>
  HAL_Delay(500);
 800169c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016a0:	f000 fc44 	bl	8001f2c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

	  //GGA
	  if(Wait_for("GGA")==1)
 80016a4:	480e      	ldr	r0, [pc, #56]	@ (80016e0 <main+0x5c>)
 80016a6:	f000 fad3 	bl	8001c50 <Wait_for>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <main+0x3c>
	  {
		 Copy_upto("*",GGA);
 80016b0:	490c      	ldr	r1, [pc, #48]	@ (80016e4 <main+0x60>)
 80016b2:	480d      	ldr	r0, [pc, #52]	@ (80016e8 <main+0x64>)
 80016b4:	f000 fa4c 	bl	8001b50 <Copy_upto>
		 decodeGGA(GGA, &gpsData.ggastruct);
 80016b8:	490c      	ldr	r1, [pc, #48]	@ (80016ec <main+0x68>)
 80016ba:	480a      	ldr	r0, [pc, #40]	@ (80016e4 <main+0x60>)
 80016bc:	f7ff fa0c 	bl	8000ad8 <decodeGGA>
	  }
	  //RMC
	  	  if(Wait_for("RMC")==1)
 80016c0:	480b      	ldr	r0, [pc, #44]	@ (80016f0 <main+0x6c>)
 80016c2:	f000 fac5 	bl	8001c50 <Wait_for>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d1eb      	bne.n	80016a4 <main+0x20>
	  	  {
	  		 Copy_upto("*",RMC);
 80016cc:	4909      	ldr	r1, [pc, #36]	@ (80016f4 <main+0x70>)
 80016ce:	4806      	ldr	r0, [pc, #24]	@ (80016e8 <main+0x64>)
 80016d0:	f000 fa3e 	bl	8001b50 <Copy_upto>
	  		 decodeRMC(RMC, &gpsData.rmcstruct);
 80016d4:	4908      	ldr	r1, [pc, #32]	@ (80016f8 <main+0x74>)
 80016d6:	4807      	ldr	r0, [pc, #28]	@ (80016f4 <main+0x70>)
 80016d8:	f7ff fd9c 	bl	8001214 <decodeRMC>
	  if(Wait_for("GGA")==1)
 80016dc:	e7e2      	b.n	80016a4 <main+0x20>
 80016de:	bf00      	nop
 80016e0:	08003e20 	.word	0x08003e20
 80016e4:	200000f0 	.word	0x200000f0
 80016e8:	08003e24 	.word	0x08003e24
 80016ec:	200001b8 	.word	0x200001b8
 80016f0:	08003e28 	.word	0x08003e28
 80016f4:	20000154 	.word	0x20000154
 80016f8:	200001e4 	.word	0x200001e4

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b090      	sub	sp, #64	@ 0x40
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	2228      	movs	r2, #40	@ 0x28
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f001 fc3a 	bl	8002f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800171e:	2301      	movs	r3, #1
 8001720:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001722:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001726:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172c:	2301      	movs	r3, #1
 800172e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001730:	2302      	movs	r3, #2
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001734:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001738:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800173a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800173e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fea7 	bl	8002498 <HAL_RCC_OscConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001750:	f000 f872 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001754:	230f      	movs	r3, #15
 8001756:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001758:	2302      	movs	r3, #2
 800175a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2102      	movs	r1, #2
 800176e:	4618      	mov	r0, r3
 8001770:	f001 f914 	bl	800299c <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800177a:	f000 f85d 	bl	8001838 <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	3740      	adds	r7, #64	@ 0x40
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <MX_USART1_UART_Init+0x4c>)
 800178e:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <MX_USART1_UART_Init+0x50>)
 8001790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001792:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <MX_USART1_UART_Init+0x4c>)
 8001794:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <MX_USART1_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017c0:	f001 fa7a 	bl	8002cb8 <HAL_UART_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ca:	f000 f835 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200000a8 	.word	0x200000a8
 80017d8:	40013800 	.word	0x40013800

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e2:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <MX_GPIO_Init+0x58>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a13      	ldr	r2, [pc, #76]	@ (8001834 <MX_GPIO_Init+0x58>)
 80017e8:	f043 0320 	orr.w	r3, r3, #32
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <MX_GPIO_Init+0x58>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <MX_GPIO_Init+0x58>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <MX_GPIO_Init+0x58>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6193      	str	r3, [r2, #24]
 8001806:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <MX_GPIO_Init+0x58>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <MX_GPIO_Init+0x58>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <MX_GPIO_Init+0x58>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6193      	str	r3, [r2, #24]
 800181e:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <MX_GPIO_Init+0x58>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40021000 	.word	0x40021000

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <Error_Handler+0x8>

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <HAL_MspInit+0x5c>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <HAL_MspInit+0x5c>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6193      	str	r3, [r2, #24]
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_MspInit+0x5c>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <HAL_MspInit+0x5c>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a0e      	ldr	r2, [pc, #56]	@ (80018a0 <HAL_MspInit+0x5c>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <HAL_MspInit+0x5c>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_MspInit+0x60>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <HAL_MspInit+0x60>)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010000 	.word	0x40010000

080018a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a26      	ldr	r2, [pc, #152]	@ (800195c <HAL_UART_MspInit+0xb4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d145      	bne.n	8001954 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c8:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <HAL_UART_MspInit+0xb8>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a24      	ldr	r2, [pc, #144]	@ (8001960 <HAL_UART_MspInit+0xb8>)
 80018ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_UART_MspInit+0xb8>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <HAL_UART_MspInit+0xb8>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001960 <HAL_UART_MspInit+0xb8>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <HAL_UART_MspInit+0xb8>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018f8:	2340      	movs	r3, #64	@ 0x40
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4816      	ldr	r0, [pc, #88]	@ (8001964 <HAL_UART_MspInit+0xbc>)
 800190c:	f000 fc40 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4810      	ldr	r0, [pc, #64]	@ (8001964 <HAL_UART_MspInit+0xbc>)
 8001924:	f000 fc34 	bl	8002190 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001928:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <HAL_UART_MspInit+0xc0>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <HAL_UART_MspInit+0xc0>)
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2025      	movs	r0, #37	@ 0x25
 800194a:	f000 fbea 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800194e:	2025      	movs	r0, #37	@ 0x25
 8001950:	f000 fc03 	bl	800215a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	@ 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40013800 	.word	0x40013800
 8001960:	40021000 	.word	0x40021000
 8001964:	40010c00 	.word	0x40010c00
 8001968:	40010000 	.word	0x40010000

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <NMI_Handler+0x4>

08001974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <MemManage_Handler+0x4>

08001984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <UsageFault_Handler+0x4>

08001994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if (timeout > 0) timeout--;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <SysTick_Handler+0x20>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <SysTick_Handler+0x18>
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <SysTick_Handler+0x20>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	4b02      	ldr	r3, [pc, #8]	@ (80019d8 <SysTick_Handler+0x20>)
 80019ce:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d0:	f000 fa90 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200001fc 	.word	0x200001fc

080019dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	Uart_isr(&huart1);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <USART1_IRQHandler+0x10>)
 80019e2:	f000 f9bd 	bl	8001d60 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
									//HAL_UART_IRQHandler(&huart1); commented
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200000a8 	.word	0x200000a8

080019f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <Ringbuf_init+0x38>)
 8001a02:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <Ringbuf_init+0x3c>)
 8001a04:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <Ringbuf_init+0x40>)
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <Ringbuf_init+0x44>)
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a44 <Ringbuf_init+0x48>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <Ringbuf_init+0x48>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0201 	orr.w	r2, r2, #1
 8001a1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <Ringbuf_init+0x48>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <Ringbuf_init+0x48>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0220 	orr.w	r2, r2, #32
 8001a2a:	60da      	str	r2, [r3, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000610 	.word	0x20000610
 8001a38:	20000200 	.word	0x20000200
 8001a3c:	20000614 	.word	0x20000614
 8001a40:	20000408 	.word	0x20000408
 8001a44:	200000a8 	.word	0x200000a8

08001a48 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a60:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d009      	beq.n	8001a82 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	79f9      	ldrb	r1, [r7, #7]
 8001a78:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001a92:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <Uart_read+0x54>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <Uart_read+0x54>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d102      	bne.n	8001aac <Uart_read+0x20>
  {
    return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e013      	b.n	8001ad4 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <Uart_read+0x54>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <Uart_read+0x54>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
 8001aba:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001abc:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <Uart_read+0x54>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <Uart_read+0x54>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ace:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000610 	.word	0x20000610

08001ae4 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <IsDataAvailable+0x30>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <IsDataAvailable+0x30>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000610 	.word	0x20000610

08001b18 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <Uart_peek+0x34>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <Uart_peek+0x34>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d102      	bne.n	8001b36 <Uart_peek+0x1e>
  {
    return -1;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
 8001b34:	e006      	b.n	8001b44 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <Uart_peek+0x34>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <Uart_peek+0x34>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	20000610 	.word	0x20000610

08001b50 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7fe faf6 	bl	8000150 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001b6c:	e01e      	b.n	8001bac <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001b6e:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <Copy_upto+0xf8>)
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	4b35      	ldr	r3, [pc, #212]	@ (8001c48 <Copy_upto+0xf8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	6838      	ldr	r0, [r7, #0]
 8001b7e:	4403      	add	r3, r0
 8001b80:	5c8a      	ldrb	r2, [r1, r2]
 8001b82:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001b84:	4b30      	ldr	r3, [pc, #192]	@ (8001c48 <Copy_upto+0xf8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c48 <Copy_upto+0xf8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001ba0:	bf00      	nop
 8001ba2:	f7ff ff9f 	bl	8001ae4 <IsDataAvailable>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0fa      	beq.n	8001ba2 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001bac:	f7ff ffb4 	bl	8001b18 <Uart_peek>
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	4299      	cmp	r1, r3
 8001bbc:	d1d7      	bne.n	8001b6e <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001bbe:	e027      	b.n	8001c10 <Copy_upto+0xc0>
	{
		so_far++;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001bc6:	f7ff ff61 	bl	8001a8c <Uart_read>
 8001bca:	4601      	mov	r1, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	613a      	str	r2, [r7, #16]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b2ca      	uxtb	r2, r1
 8001bda:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d101      	bne.n	8001be8 <Copy_upto+0x98>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e02a      	b.n	8001c3e <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8001be8:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <Copy_upto+0xfc>)
 8001bea:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001bee:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001bf0:	bf00      	nop
 8001bf2:	f7ff ff77 	bl	8001ae4 <IsDataAvailable>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d103      	bne.n	8001c04 <Copy_upto+0xb4>
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <Copy_upto+0xfc>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f6      	bne.n	8001bf2 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <Copy_upto+0xfc>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <Copy_upto+0xc0>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e016      	b.n	8001c3e <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8001c10:	f7ff ff82 	bl	8001b18 <Uart_peek>
 8001c14:	4601      	mov	r1, r0
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4299      	cmp	r1, r3
 8001c20:	d0ce      	beq.n	8001bc0 <Copy_upto+0x70>
	}

	if (so_far != len)
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d002      	beq.n	8001c30 <Copy_upto+0xe0>
	{
		so_far = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
		goto again;
 8001c2e:	e79d      	b.n	8001b6c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d101      	bne.n	8001c3c <Copy_upto+0xec>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <Copy_upto+0xee>
	else return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000610 	.word	0x20000610
 8001c4c:	200001fc 	.word	0x200001fc

08001c50 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7fe fa77 	bl	8000150 <strlen>
 8001c62:	4603      	mov	r3, r0
 8001c64:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001c66:	4b3c      	ldr	r3, [pc, #240]	@ (8001d58 <Wait_for+0x108>)
 8001c68:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c6c:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8001c6e:	bf00      	nop
 8001c70:	f7ff ff38 	bl	8001ae4 <IsDataAvailable>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <Wait_for+0x32>
 8001c7a:	4b37      	ldr	r3, [pc, #220]	@ (8001d58 <Wait_for+0x108>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f6      	bne.n	8001c70 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8001c82:	4b35      	ldr	r3, [pc, #212]	@ (8001d58 <Wait_for+0x108>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d119      	bne.n	8001cbe <Wait_for+0x6e>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e060      	b.n	8001d50 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001c8e:	4b33      	ldr	r3, [pc, #204]	@ (8001d5c <Wait_for+0x10c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001c96:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <Wait_for+0x10c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d00b      	beq.n	8001cba <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d5c <Wait_for+0x10c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	4b2b      	ldr	r3, [pc, #172]	@ (8001d5c <Wait_for+0x10c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cb4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001cb8:	e001      	b.n	8001cbe <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e048      	b.n	8001d50 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001cbe:	f7ff ff2b 	bl	8001b18 <Uart_peek>
 8001cc2:	4601      	mov	r1, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4299      	cmp	r1, r3
 8001cce:	d1de      	bne.n	8001c8e <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001cd0:	e027      	b.n	8001d22 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001cd8:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <Wait_for+0x10c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <Wait_for+0x10c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d101      	bne.n	8001cfa <Wait_for+0xaa>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e02a      	b.n	8001d50 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <Wait_for+0x108>)
 8001cfc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d00:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001d02:	bf00      	nop
 8001d04:	f7ff feee 	bl	8001ae4 <IsDataAvailable>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d103      	bne.n	8001d16 <Wait_for+0xc6>
 8001d0e:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <Wait_for+0x108>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f6      	bne.n	8001d04 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <Wait_for+0x108>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <Wait_for+0xd2>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e016      	b.n	8001d50 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001d22:	f7ff fef9 	bl	8001b18 <Uart_peek>
 8001d26:	4601      	mov	r1, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4299      	cmp	r1, r3
 8001d32:	d0ce      	beq.n	8001cd2 <Wait_for+0x82>
	}

	if (so_far != len)
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d002      	beq.n	8001d42 <Wait_for+0xf2>
	{
		so_far = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
		goto again;
 8001d40:	e791      	b.n	8001c66 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d101      	bne.n	8001d4e <Wait_for+0xfe>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <Wait_for+0x100>
	else return 0;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200001fc 	.word	0x200001fc
 8001d5c:	20000610 	.word	0x20000610

08001d60 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d013      	beq.n	8001daa <Uart_isr+0x4a>
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00e      	beq.n	8001daa <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <Uart_isr+0xb4>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fe50 	bl	8001a48 <store_char>
        return;
 8001da8:	e031      	b.n	8001e0e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d02c      	beq.n	8001e0e <Uart_isr+0xae>
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d027      	beq.n	8001e0e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <Uart_isr+0xb8>)
 8001dc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <Uart_isr+0xb8>)
 8001dc6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d108      	bne.n	8001de0 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ddc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001dde:	e015      	b.n	8001e0c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001de0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e18 <Uart_isr+0xb8>)
 8001de2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001de6:	4a0c      	ldr	r2, [pc, #48]	@ (8001e18 <Uart_isr+0xb8>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <Uart_isr+0xb8>)
 8001dee:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001df2:	3301      	adds	r3, #1
 8001df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df8:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <Uart_isr+0xb8>)
 8001dfa:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	7bba      	ldrb	r2, [r7, #14]
 8001e0a:	605a      	str	r2, [r3, #4]
    	return;
 8001e0c:	bf00      	nop
    }
}
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000610 	.word	0x20000610
 8001e18:	20000408 	.word	0x20000408

08001e1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e1c:	f7ff fde8 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e20:	480b      	ldr	r0, [pc, #44]	@ (8001e50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e22:	490c      	ldr	r1, [pc, #48]	@ (8001e54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e24:	4a0c      	ldr	r2, [pc, #48]	@ (8001e58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a09      	ldr	r2, [pc, #36]	@ (8001e5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e38:	4c09      	ldr	r4, [pc, #36]	@ (8001e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e46:	f001 f8ab 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e4a:	f7ff fc1b 	bl	8001684 <main>
  bx lr
 8001e4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e58:	08003f98 	.word	0x08003f98
  ldr r2, =_sbss
 8001e5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e60:	20000754 	.word	0x20000754

08001e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC1_2_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e6c:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <HAL_Init+0x28>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a07      	ldr	r2, [pc, #28]	@ (8001e90 <HAL_Init+0x28>)
 8001e72:	f043 0310 	orr.w	r3, r3, #16
 8001e76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f000 f947 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7e:	200f      	movs	r0, #15
 8001e80:	f000 f808 	bl	8001e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e84:	f7ff fcde 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40022000 	.word	0x40022000

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_InitTick+0x54>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <HAL_InitTick+0x58>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f95f 	bl	8002176 <HAL_SYSTICK_Config>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00e      	b.n	8001ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d80a      	bhi.n	8001ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f000 f927 	bl	8002122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed4:	4a06      	ldr	r2, [pc, #24]	@ (8001ef0 <HAL_InitTick+0x5c>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000004 	.word	0x20000004
 8001eec:	2000000c 	.word	0x2000000c
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_IncTick+0x1c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_IncTick+0x20>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a03      	ldr	r2, [pc, #12]	@ (8001f14 <HAL_IncTick+0x20>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	2000000c 	.word	0x2000000c
 8001f14:	20000618 	.word	0x20000618

08001f18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b02      	ldr	r3, [pc, #8]	@ (8001f28 <HAL_GetTick+0x10>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	20000618 	.word	0x20000618

08001f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff fff0 	bl	8001f18 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d005      	beq.n	8001f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_Delay+0x44>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f52:	bf00      	nop
 8001f54:	f7ff ffe0 	bl	8001f18 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d8f7      	bhi.n	8001f54 <HAL_Delay+0x28>
  {
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2000000c 	.word	0x2000000c

08001f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f84:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f90:	4013      	ands	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	60d3      	str	r3, [r2, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc0:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	f003 0307 	and.w	r3, r3, #7
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	db0b      	blt.n	8002002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	f003 021f 	and.w	r2, r3, #31
 8001ff0:	4906      	ldr	r1, [pc, #24]	@ (800200c <__NVIC_EnableIRQ+0x34>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	@ (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	@ (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	@ 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
         );
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	@ 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d8:	d301      	bcc.n	80020de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020da:	2301      	movs	r3, #1
 80020dc:	e00f      	b.n	80020fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020de:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <SysTick_Config+0x40>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e6:	210f      	movs	r1, #15
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f7ff ff90 	bl	8002010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <SysTick_Config+0x40>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <SysTick_Config+0x40>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff2d 	bl	8001f74 <__NVIC_SetPriorityGrouping>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002134:	f7ff ff42 	bl	8001fbc <__NVIC_GetPriorityGrouping>
 8002138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff ff90 	bl	8002064 <NVIC_EncodePriority>
 8002144:	4602      	mov	r2, r0
 8002146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5f 	bl	8002010 <__NVIC_SetPriority>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff35 	bl	8001fd8 <__NVIC_EnableIRQ>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffa2 	bl	80020c8 <SysTick_Config>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b08b      	sub	sp, #44	@ 0x2c
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a2:	e169      	b.n	8002478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021a4:	2201      	movs	r2, #1
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 8158 	bne.w	8002472 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4a9a      	ldr	r2, [pc, #616]	@ (8002430 <HAL_GPIO_Init+0x2a0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d05e      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021cc:	4a98      	ldr	r2, [pc, #608]	@ (8002430 <HAL_GPIO_Init+0x2a0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d875      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021d2:	4a98      	ldr	r2, [pc, #608]	@ (8002434 <HAL_GPIO_Init+0x2a4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d058      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021d8:	4a96      	ldr	r2, [pc, #600]	@ (8002434 <HAL_GPIO_Init+0x2a4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d86f      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021de:	4a96      	ldr	r2, [pc, #600]	@ (8002438 <HAL_GPIO_Init+0x2a8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d052      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021e4:	4a94      	ldr	r2, [pc, #592]	@ (8002438 <HAL_GPIO_Init+0x2a8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d869      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021ea:	4a94      	ldr	r2, [pc, #592]	@ (800243c <HAL_GPIO_Init+0x2ac>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d04c      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021f0:	4a92      	ldr	r2, [pc, #584]	@ (800243c <HAL_GPIO_Init+0x2ac>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d863      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021f6:	4a92      	ldr	r2, [pc, #584]	@ (8002440 <HAL_GPIO_Init+0x2b0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d046      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021fc:	4a90      	ldr	r2, [pc, #576]	@ (8002440 <HAL_GPIO_Init+0x2b0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d85d      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 8002202:	2b12      	cmp	r3, #18
 8002204:	d82a      	bhi.n	800225c <HAL_GPIO_Init+0xcc>
 8002206:	2b12      	cmp	r3, #18
 8002208:	d859      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 800220a:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <HAL_GPIO_Init+0x80>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	0800228b 	.word	0x0800228b
 8002214:	08002265 	.word	0x08002265
 8002218:	08002277 	.word	0x08002277
 800221c:	080022b9 	.word	0x080022b9
 8002220:	080022bf 	.word	0x080022bf
 8002224:	080022bf 	.word	0x080022bf
 8002228:	080022bf 	.word	0x080022bf
 800222c:	080022bf 	.word	0x080022bf
 8002230:	080022bf 	.word	0x080022bf
 8002234:	080022bf 	.word	0x080022bf
 8002238:	080022bf 	.word	0x080022bf
 800223c:	080022bf 	.word	0x080022bf
 8002240:	080022bf 	.word	0x080022bf
 8002244:	080022bf 	.word	0x080022bf
 8002248:	080022bf 	.word	0x080022bf
 800224c:	080022bf 	.word	0x080022bf
 8002250:	080022bf 	.word	0x080022bf
 8002254:	0800226d 	.word	0x0800226d
 8002258:	08002281 	.word	0x08002281
 800225c:	4a79      	ldr	r2, [pc, #484]	@ (8002444 <HAL_GPIO_Init+0x2b4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002262:	e02c      	b.n	80022be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	623b      	str	r3, [r7, #32]
          break;
 800226a:	e029      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	3304      	adds	r3, #4
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e024      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	3308      	adds	r3, #8
 800227c:	623b      	str	r3, [r7, #32]
          break;
 800227e:	e01f      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	330c      	adds	r3, #12
 8002286:	623b      	str	r3, [r7, #32]
          break;
 8002288:	e01a      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002292:	2304      	movs	r3, #4
 8002294:	623b      	str	r3, [r7, #32]
          break;
 8002296:	e013      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a0:	2308      	movs	r3, #8
 80022a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	611a      	str	r2, [r3, #16]
          break;
 80022aa:	e009      	b.n	80022c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ac:	2308      	movs	r3, #8
 80022ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	615a      	str	r2, [r3, #20]
          break;
 80022b6:	e003      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
          break;
 80022bc:	e000      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          break;
 80022be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2bff      	cmp	r3, #255	@ 0xff
 80022c4:	d801      	bhi.n	80022ca <HAL_GPIO_Init+0x13a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	e001      	b.n	80022ce <HAL_GPIO_Init+0x13e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2bff      	cmp	r3, #255	@ 0xff
 80022d4:	d802      	bhi.n	80022dc <HAL_GPIO_Init+0x14c>
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	e002      	b.n	80022e2 <HAL_GPIO_Init+0x152>
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	3b08      	subs	r3, #8
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	210f      	movs	r1, #15
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	401a      	ands	r2, r3
 80022f4:	6a39      	ldr	r1, [r7, #32]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	431a      	orrs	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80b1 	beq.w	8002472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002310:	4b4d      	ldr	r3, [pc, #308]	@ (8002448 <HAL_GPIO_Init+0x2b8>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4a4c      	ldr	r2, [pc, #304]	@ (8002448 <HAL_GPIO_Init+0x2b8>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6193      	str	r3, [r2, #24]
 800231c:	4b4a      	ldr	r3, [pc, #296]	@ (8002448 <HAL_GPIO_Init+0x2b8>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002328:	4a48      	ldr	r2, [pc, #288]	@ (800244c <HAL_GPIO_Init+0x2bc>)
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002334:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a40      	ldr	r2, [pc, #256]	@ (8002450 <HAL_GPIO_Init+0x2c0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d013      	beq.n	800237c <HAL_GPIO_Init+0x1ec>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3f      	ldr	r2, [pc, #252]	@ (8002454 <HAL_GPIO_Init+0x2c4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00d      	beq.n	8002378 <HAL_GPIO_Init+0x1e8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3e      	ldr	r2, [pc, #248]	@ (8002458 <HAL_GPIO_Init+0x2c8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d007      	beq.n	8002374 <HAL_GPIO_Init+0x1e4>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3d      	ldr	r2, [pc, #244]	@ (800245c <HAL_GPIO_Init+0x2cc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_GPIO_Init+0x1e0>
 800236c:	2303      	movs	r3, #3
 800236e:	e006      	b.n	800237e <HAL_GPIO_Init+0x1ee>
 8002370:	2304      	movs	r3, #4
 8002372:	e004      	b.n	800237e <HAL_GPIO_Init+0x1ee>
 8002374:	2302      	movs	r3, #2
 8002376:	e002      	b.n	800237e <HAL_GPIO_Init+0x1ee>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_GPIO_Init+0x1ee>
 800237c:	2300      	movs	r3, #0
 800237e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002380:	f002 0203 	and.w	r2, r2, #3
 8002384:	0092      	lsls	r2, r2, #2
 8002386:	4093      	lsls	r3, r2
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800238e:	492f      	ldr	r1, [pc, #188]	@ (800244c <HAL_GPIO_Init+0x2bc>)
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	492c      	ldr	r1, [pc, #176]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	43db      	mvns	r3, r3
 80023be:	4928      	ldr	r1, [pc, #160]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d006      	beq.n	80023de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d0:	4b23      	ldr	r3, [pc, #140]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	4922      	ldr	r1, [pc, #136]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60cb      	str	r3, [r1, #12]
 80023dc:	e006      	b.n	80023ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023de:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	491e      	ldr	r1, [pc, #120]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023f8:	4b19      	ldr	r3, [pc, #100]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	4918      	ldr	r1, [pc, #96]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002406:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	43db      	mvns	r3, r3
 800240e:	4914      	ldr	r1, [pc, #80]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 8002410:	4013      	ands	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d021      	beq.n	8002464 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002420:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	490e      	ldr	r1, [pc, #56]	@ (8002460 <HAL_GPIO_Init+0x2d0>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
 800242c:	e021      	b.n	8002472 <HAL_GPIO_Init+0x2e2>
 800242e:	bf00      	nop
 8002430:	10320000 	.word	0x10320000
 8002434:	10310000 	.word	0x10310000
 8002438:	10220000 	.word	0x10220000
 800243c:	10210000 	.word	0x10210000
 8002440:	10120000 	.word	0x10120000
 8002444:	10110000 	.word	0x10110000
 8002448:	40021000 	.word	0x40021000
 800244c:	40010000 	.word	0x40010000
 8002450:	40010800 	.word	0x40010800
 8002454:	40010c00 	.word	0x40010c00
 8002458:	40011000 	.word	0x40011000
 800245c:	40011400 	.word	0x40011400
 8002460:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002464:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <HAL_GPIO_Init+0x304>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	43db      	mvns	r3, r3
 800246c:	4909      	ldr	r1, [pc, #36]	@ (8002494 <HAL_GPIO_Init+0x304>)
 800246e:	4013      	ands	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	3301      	adds	r3, #1
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	fa22 f303 	lsr.w	r3, r2, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	f47f ae8e 	bne.w	80021a4 <HAL_GPIO_Init+0x14>
  }
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	372c      	adds	r7, #44	@ 0x2c
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40010400 	.word	0x40010400

08002498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e272      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8087 	beq.w	80025c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b8:	4b92      	ldr	r3, [pc, #584]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d00c      	beq.n	80024de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d112      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
 80024d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024dc:	d10b      	bne.n	80024f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024de:	4b89      	ldr	r3, [pc, #548]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d06c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x12c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d168      	bne.n	80025c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e24c      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x76>
 8002500:	4b80      	ldr	r3, [pc, #512]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a7f      	ldr	r2, [pc, #508]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	e02e      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x98>
 8002516:	4b7b      	ldr	r3, [pc, #492]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a7a      	ldr	r2, [pc, #488]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b78      	ldr	r3, [pc, #480]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a77      	ldr	r2, [pc, #476]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002528:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0xbc>
 800253a:	4b72      	ldr	r3, [pc, #456]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a71      	ldr	r2, [pc, #452]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b6f      	ldr	r3, [pc, #444]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6e      	ldr	r2, [pc, #440]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0xd4>
 8002554:	4b6b      	ldr	r3, [pc, #428]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a6a      	ldr	r2, [pc, #424]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b68      	ldr	r3, [pc, #416]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a67      	ldr	r2, [pc, #412]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800256a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fcd0 	bl	8001f18 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff fccc 	bl	8001f18 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	@ 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e200      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b5d      	ldr	r3, [pc, #372]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0xe4>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff fcbc 	bl	8001f18 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7ff fcb8 	bl	8001f18 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	@ 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1ec      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	4b53      	ldr	r3, [pc, #332]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x10c>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025de:	4b49      	ldr	r3, [pc, #292]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d11c      	bne.n	8002624 <HAL_RCC_OscConfig+0x18c>
 80025ea:	4b46      	ldr	r3, [pc, #280]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d116      	bne.n	8002624 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	4b43      	ldr	r3, [pc, #268]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_RCC_OscConfig+0x176>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e1c0      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	4b3d      	ldr	r3, [pc, #244]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4939      	ldr	r1, [pc, #228]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	e03a      	b.n	800269a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262c:	4b36      	ldr	r3, [pc, #216]	@ (8002708 <HAL_RCC_OscConfig+0x270>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7ff fc71 	bl	8001f18 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263a:	f7ff fc6d 	bl	8001f18 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e1a1      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	4b2d      	ldr	r3, [pc, #180]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b2a      	ldr	r3, [pc, #168]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4927      	ldr	r1, [pc, #156]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
 800266c:	e015      	b.n	800269a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266e:	4b26      	ldr	r3, [pc, #152]	@ (8002708 <HAL_RCC_OscConfig+0x270>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7ff fc50 	bl	8001f18 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267c:	f7ff fc4c 	bl	8001f18 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e180      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b1d      	ldr	r3, [pc, #116]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d03a      	beq.n	800271c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d019      	beq.n	80026e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b17      	ldr	r3, [pc, #92]	@ (800270c <HAL_RCC_OscConfig+0x274>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7ff fc30 	bl	8001f18 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7ff fc2c 	bl	8001f18 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e160      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026da:	2001      	movs	r0, #1
 80026dc:	f000 face 	bl	8002c7c <RCC_Delay>
 80026e0:	e01c      	b.n	800271c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e2:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <HAL_RCC_OscConfig+0x274>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e8:	f7ff fc16 	bl	8001f18 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ee:	e00f      	b.n	8002710 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f0:	f7ff fc12 	bl	8001f18 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d908      	bls.n	8002710 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e146      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	42420000 	.word	0x42420000
 800270c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	4b92      	ldr	r3, [pc, #584]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e9      	bne.n	80026f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a6 	beq.w	8002876 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b8b      	ldr	r3, [pc, #556]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b88      	ldr	r3, [pc, #544]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a87      	ldr	r2, [pc, #540]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002744:	61d3      	str	r3, [r2, #28]
 8002746:	4b85      	ldr	r3, [pc, #532]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b82      	ldr	r3, [pc, #520]	@ (8002960 <HAL_RCC_OscConfig+0x4c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002762:	4b7f      	ldr	r3, [pc, #508]	@ (8002960 <HAL_RCC_OscConfig+0x4c8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7e      	ldr	r2, [pc, #504]	@ (8002960 <HAL_RCC_OscConfig+0x4c8>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7ff fbd3 	bl	8001f18 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7ff fbcf 	bl	8001f18 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b64      	cmp	r3, #100	@ 0x64
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e103      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	4b75      	ldr	r3, [pc, #468]	@ (8002960 <HAL_RCC_OscConfig+0x4c8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x312>
 800279c:	4b6f      	ldr	r3, [pc, #444]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a6e      	ldr	r2, [pc, #440]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e02d      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x334>
 80027b2:	4b6a      	ldr	r3, [pc, #424]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4a69      	ldr	r2, [pc, #420]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6213      	str	r3, [r2, #32]
 80027be:	4b67      	ldr	r3, [pc, #412]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a66      	ldr	r2, [pc, #408]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	6213      	str	r3, [r2, #32]
 80027ca:	e01c      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x356>
 80027d4:	4b61      	ldr	r3, [pc, #388]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a60      	ldr	r2, [pc, #384]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	4b5e      	ldr	r3, [pc, #376]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a5d      	ldr	r2, [pc, #372]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	e00b      	b.n	8002806 <HAL_RCC_OscConfig+0x36e>
 80027ee:	4b5b      	ldr	r3, [pc, #364]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a5a      	ldr	r2, [pc, #360]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6213      	str	r3, [r2, #32]
 80027fa:	4b58      	ldr	r3, [pc, #352]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a57      	ldr	r2, [pc, #348]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d015      	beq.n	800283a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7ff fb83 	bl	8001f18 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7ff fb7f 	bl	8001f18 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0b1      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	4b4b      	ldr	r3, [pc, #300]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ee      	beq.n	8002816 <HAL_RCC_OscConfig+0x37e>
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7ff fb6d 	bl	8001f18 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7ff fb69 	bl	8001f18 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e09b      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002858:	4b40      	ldr	r3, [pc, #256]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4b3c      	ldr	r3, [pc, #240]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4a3b      	ldr	r2, [pc, #236]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002874:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8087 	beq.w	800298e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	4b36      	ldr	r3, [pc, #216]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d061      	beq.n	8002950 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d146      	bne.n	8002922 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b33      	ldr	r3, [pc, #204]	@ (8002964 <HAL_RCC_OscConfig+0x4cc>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7ff fb3d 	bl	8001f18 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a2:	f7ff fb39 	bl	8001f18 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e06d      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b4:	4b29      	ldr	r3, [pc, #164]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c8:	d108      	bne.n	80028dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ca:	4b24      	ldr	r3, [pc, #144]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4921      	ldr	r1, [pc, #132]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028dc:	4b1f      	ldr	r3, [pc, #124]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a19      	ldr	r1, [r3, #32]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	430b      	orrs	r3, r1
 80028ee:	491b      	ldr	r1, [pc, #108]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <HAL_RCC_OscConfig+0x4cc>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7ff fb0d 	bl	8001f18 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7ff fb09 	bl	8001f18 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e03d      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002914:	4b11      	ldr	r3, [pc, #68]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x46a>
 8002920:	e035      	b.n	800298e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <HAL_RCC_OscConfig+0x4cc>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff faf6 	bl	8001f18 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7ff faf2 	bl	8001f18 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e026      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_RCC_OscConfig+0x4c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x498>
 800294e:	e01e      	b.n	800298e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d107      	bne.n	8002968 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e019      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
 800295c:	40021000 	.word	0x40021000
 8002960:	40007000 	.word	0x40007000
 8002964:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002968:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <HAL_RCC_OscConfig+0x500>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	429a      	cmp	r2, r3
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000

0800299c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0d0      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b6a      	ldr	r3, [pc, #424]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d910      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b67      	ldr	r3, [pc, #412]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4965      	ldr	r1, [pc, #404]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b63      	ldr	r3, [pc, #396]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0b8      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f8:	4b59      	ldr	r3, [pc, #356]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a58      	ldr	r2, [pc, #352]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a10:	4b53      	ldr	r3, [pc, #332]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4a52      	ldr	r2, [pc, #328]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4b50      	ldr	r3, [pc, #320]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	494d      	ldr	r1, [pc, #308]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d040      	beq.n	8002abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b47      	ldr	r3, [pc, #284]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d115      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07f      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	4b41      	ldr	r3, [pc, #260]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e073      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e06b      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7a:	4b39      	ldr	r3, [pc, #228]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f023 0203 	bic.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4936      	ldr	r1, [pc, #216]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a8c:	f7ff fa44 	bl	8001f18 <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7ff fa40 	bl	8001f18 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e053      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 020c 	and.w	r2, r3, #12
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1eb      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b27      	ldr	r3, [pc, #156]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d210      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b24      	ldr	r3, [pc, #144]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 0207 	bic.w	r2, r3, #7
 8002ad2:	4922      	ldr	r1, [pc, #136]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b20      	ldr	r3, [pc, #128]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e032      	b.n	8002b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af8:	4b19      	ldr	r3, [pc, #100]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4916      	ldr	r1, [pc, #88]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b16:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	490e      	ldr	r1, [pc, #56]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b2a:	f000 f821 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	490a      	ldr	r1, [pc, #40]	@ (8002b64 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	5ccb      	ldrb	r3, [r1, r3]
 8002b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b42:	4a09      	ldr	r2, [pc, #36]	@ (8002b68 <HAL_RCC_ClockConfig+0x1cc>)
 8002b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b46:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <HAL_RCC_ClockConfig+0x1d0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff f9a2 	bl	8001e94 <HAL_InitTick>

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40022000 	.word	0x40022000
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08003e2c 	.word	0x08003e2c
 8002b68:	20000004 	.word	0x20000004
 8002b6c:	20000008 	.word	0x20000008

08002b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d002      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x30>
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x36>
 8002b9e:	e027      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ba2:	613b      	str	r3, [r7, #16]
      break;
 8002ba4:	e027      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	4a17      	ldr	r2, [pc, #92]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bb0:	5cd3      	ldrb	r3, [r2, r3]
 8002bb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d010      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	0c5b      	lsrs	r3, r3, #17
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	4a11      	ldr	r2, [pc, #68]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd2:	fb03 f202 	mul.w	r2, r3, r2
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e004      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a0c      	ldr	r2, [pc, #48]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002be4:	fb02 f303 	mul.w	r3, r2, r3
 8002be8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	613b      	str	r3, [r7, #16]
      break;
 8002bee:	e002      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf2:	613b      	str	r3, [r7, #16]
      break;
 8002bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf6:	693b      	ldr	r3, [r7, #16]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	007a1200 	.word	0x007a1200
 8002c0c:	08003e44 	.word	0x08003e44
 8002c10:	08003e54 	.word	0x08003e54
 8002c14:	003d0900 	.word	0x003d0900

08002c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c1c:	4b02      	ldr	r3, [pc, #8]	@ (8002c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	20000004 	.word	0x20000004

08002c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c30:	f7ff fff2 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	4903      	ldr	r1, [pc, #12]	@ (8002c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c42:	5ccb      	ldrb	r3, [r1, r3]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	08003e3c 	.word	0x08003e3c

08002c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c58:	f7ff ffde 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	0adb      	lsrs	r3, r3, #11
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4903      	ldr	r1, [pc, #12]	@ (8002c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	08003e3c 	.word	0x08003e3c

08002c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <RCC_Delay+0x34>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb4 <RCC_Delay+0x38>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0a5b      	lsrs	r3, r3, #9
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c98:	bf00      	nop
  }
  while (Delay --);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	60fa      	str	r2, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f9      	bne.n	8002c98 <RCC_Delay+0x1c>
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	20000004 	.word	0x20000004
 8002cb4:	10624dd3 	.word	0x10624dd3

08002cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e042      	b.n	8002d50 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe fde2 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2224      	movs	r2, #36	@ 0x24
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f82b 	bl	8002d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002d92:	f023 030c 	bic.w	r3, r3, #12
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2c      	ldr	r2, [pc, #176]	@ (8002e6c <UART_SetConfig+0x114>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d103      	bne.n	8002dc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dc0:	f7ff ff48 	bl	8002c54 <HAL_RCC_GetPCLK2Freq>
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	e002      	b.n	8002dce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f7ff ff30 	bl	8002c2c <HAL_RCC_GetPCLK1Freq>
 8002dcc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009a      	lsls	r2, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	4a22      	ldr	r2, [pc, #136]	@ (8002e70 <UART_SetConfig+0x118>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	0119      	lsls	r1, r3, #4
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009a      	lsls	r2, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e04:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <UART_SetConfig+0x118>)
 8002e06:	fba3 0302 	umull	r0, r3, r3, r2
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2064      	movs	r0, #100	@ 0x64
 8002e0e:	fb00 f303 	mul.w	r3, r0, r3
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	3332      	adds	r3, #50	@ 0x32
 8002e18:	4a15      	ldr	r2, [pc, #84]	@ (8002e70 <UART_SetConfig+0x118>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e24:	4419      	add	r1, r3
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009a      	lsls	r2, r3, #2
 8002e30:	441a      	add	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e70 <UART_SetConfig+0x118>)
 8002e3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2064      	movs	r0, #100	@ 0x64
 8002e46:	fb00 f303 	mul.w	r3, r0, r3
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	3332      	adds	r3, #50	@ 0x32
 8002e50:	4a07      	ldr	r2, [pc, #28]	@ (8002e70 <UART_SetConfig+0x118>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	440a      	add	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40013800 	.word	0x40013800
 8002e70:	51eb851f 	.word	0x51eb851f

08002e74 <atoi>:
 8002e74:	220a      	movs	r2, #10
 8002e76:	2100      	movs	r1, #0
 8002e78:	f000 b87a 	b.w	8002f70 <strtol>

08002e7c <_strtol_l.constprop.0>:
 8002e7c:	2b24      	cmp	r3, #36	@ 0x24
 8002e7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e82:	4686      	mov	lr, r0
 8002e84:	4690      	mov	r8, r2
 8002e86:	d801      	bhi.n	8002e8c <_strtol_l.constprop.0+0x10>
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <_strtol_l.constprop.0+0x1e>
 8002e8c:	f000 f882 	bl	8002f94 <__errno>
 8002e90:	2316      	movs	r3, #22
 8002e92:	6003      	str	r3, [r0, #0]
 8002e94:	2000      	movs	r0, #0
 8002e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e9a:	460d      	mov	r5, r1
 8002e9c:	4833      	ldr	r0, [pc, #204]	@ (8002f6c <_strtol_l.constprop.0+0xf0>)
 8002e9e:	462a      	mov	r2, r5
 8002ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002ea4:	5d06      	ldrb	r6, [r0, r4]
 8002ea6:	f016 0608 	ands.w	r6, r6, #8
 8002eaa:	d1f8      	bne.n	8002e9e <_strtol_l.constprop.0+0x22>
 8002eac:	2c2d      	cmp	r4, #45	@ 0x2d
 8002eae:	d12d      	bne.n	8002f0c <_strtol_l.constprop.0+0x90>
 8002eb0:	2601      	movs	r6, #1
 8002eb2:	782c      	ldrb	r4, [r5, #0]
 8002eb4:	1c95      	adds	r5, r2, #2
 8002eb6:	f033 0210 	bics.w	r2, r3, #16
 8002eba:	d109      	bne.n	8002ed0 <_strtol_l.constprop.0+0x54>
 8002ebc:	2c30      	cmp	r4, #48	@ 0x30
 8002ebe:	d12a      	bne.n	8002f16 <_strtol_l.constprop.0+0x9a>
 8002ec0:	782a      	ldrb	r2, [r5, #0]
 8002ec2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8002ec6:	2a58      	cmp	r2, #88	@ 0x58
 8002ec8:	d125      	bne.n	8002f16 <_strtol_l.constprop.0+0x9a>
 8002eca:	2310      	movs	r3, #16
 8002ecc:	786c      	ldrb	r4, [r5, #1]
 8002ece:	3502      	adds	r5, #2
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8002ed6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002eda:	fbbc f9f3 	udiv	r9, ip, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	fb03 ca19 	mls	sl, r3, r9, ip
 8002ee4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8002ee8:	2f09      	cmp	r7, #9
 8002eea:	d81b      	bhi.n	8002f24 <_strtol_l.constprop.0+0xa8>
 8002eec:	463c      	mov	r4, r7
 8002eee:	42a3      	cmp	r3, r4
 8002ef0:	dd27      	ble.n	8002f42 <_strtol_l.constprop.0+0xc6>
 8002ef2:	1c57      	adds	r7, r2, #1
 8002ef4:	d007      	beq.n	8002f06 <_strtol_l.constprop.0+0x8a>
 8002ef6:	4581      	cmp	r9, r0
 8002ef8:	d320      	bcc.n	8002f3c <_strtol_l.constprop.0+0xc0>
 8002efa:	d101      	bne.n	8002f00 <_strtol_l.constprop.0+0x84>
 8002efc:	45a2      	cmp	sl, r4
 8002efe:	db1d      	blt.n	8002f3c <_strtol_l.constprop.0+0xc0>
 8002f00:	2201      	movs	r2, #1
 8002f02:	fb00 4003 	mla	r0, r0, r3, r4
 8002f06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f0a:	e7eb      	b.n	8002ee4 <_strtol_l.constprop.0+0x68>
 8002f0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8002f0e:	bf04      	itt	eq
 8002f10:	782c      	ldrbeq	r4, [r5, #0]
 8002f12:	1c95      	addeq	r5, r2, #2
 8002f14:	e7cf      	b.n	8002eb6 <_strtol_l.constprop.0+0x3a>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1da      	bne.n	8002ed0 <_strtol_l.constprop.0+0x54>
 8002f1a:	2c30      	cmp	r4, #48	@ 0x30
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2308      	moveq	r3, #8
 8002f20:	230a      	movne	r3, #10
 8002f22:	e7d5      	b.n	8002ed0 <_strtol_l.constprop.0+0x54>
 8002f24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002f28:	2f19      	cmp	r7, #25
 8002f2a:	d801      	bhi.n	8002f30 <_strtol_l.constprop.0+0xb4>
 8002f2c:	3c37      	subs	r4, #55	@ 0x37
 8002f2e:	e7de      	b.n	8002eee <_strtol_l.constprop.0+0x72>
 8002f30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002f34:	2f19      	cmp	r7, #25
 8002f36:	d804      	bhi.n	8002f42 <_strtol_l.constprop.0+0xc6>
 8002f38:	3c57      	subs	r4, #87	@ 0x57
 8002f3a:	e7d8      	b.n	8002eee <_strtol_l.constprop.0+0x72>
 8002f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f40:	e7e1      	b.n	8002f06 <_strtol_l.constprop.0+0x8a>
 8002f42:	1c53      	adds	r3, r2, #1
 8002f44:	d108      	bne.n	8002f58 <_strtol_l.constprop.0+0xdc>
 8002f46:	2322      	movs	r3, #34	@ 0x22
 8002f48:	4660      	mov	r0, ip
 8002f4a:	f8ce 3000 	str.w	r3, [lr]
 8002f4e:	f1b8 0f00 	cmp.w	r8, #0
 8002f52:	d0a0      	beq.n	8002e96 <_strtol_l.constprop.0+0x1a>
 8002f54:	1e69      	subs	r1, r5, #1
 8002f56:	e006      	b.n	8002f66 <_strtol_l.constprop.0+0xea>
 8002f58:	b106      	cbz	r6, 8002f5c <_strtol_l.constprop.0+0xe0>
 8002f5a:	4240      	negs	r0, r0
 8002f5c:	f1b8 0f00 	cmp.w	r8, #0
 8002f60:	d099      	beq.n	8002e96 <_strtol_l.constprop.0+0x1a>
 8002f62:	2a00      	cmp	r2, #0
 8002f64:	d1f6      	bne.n	8002f54 <_strtol_l.constprop.0+0xd8>
 8002f66:	f8c8 1000 	str.w	r1, [r8]
 8002f6a:	e794      	b.n	8002e96 <_strtol_l.constprop.0+0x1a>
 8002f6c:	08003e57 	.word	0x08003e57

08002f70 <strtol>:
 8002f70:	4613      	mov	r3, r2
 8002f72:	460a      	mov	r2, r1
 8002f74:	4601      	mov	r1, r0
 8002f76:	4802      	ldr	r0, [pc, #8]	@ (8002f80 <strtol+0x10>)
 8002f78:	6800      	ldr	r0, [r0, #0]
 8002f7a:	f7ff bf7f 	b.w	8002e7c <_strtol_l.constprop.0>
 8002f7e:	bf00      	nop
 8002f80:	20000010 	.word	0x20000010

08002f84 <memset>:
 8002f84:	4603      	mov	r3, r0
 8002f86:	4402      	add	r2, r0
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d100      	bne.n	8002f8e <memset+0xa>
 8002f8c:	4770      	bx	lr
 8002f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f92:	e7f9      	b.n	8002f88 <memset+0x4>

08002f94 <__errno>:
 8002f94:	4b01      	ldr	r3, [pc, #4]	@ (8002f9c <__errno+0x8>)
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000010 	.word	0x20000010

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	4d0c      	ldr	r5, [pc, #48]	@ (8002fd8 <__libc_init_array+0x38>)
 8002fa6:	4c0d      	ldr	r4, [pc, #52]	@ (8002fdc <__libc_init_array+0x3c>)
 8002fa8:	1b64      	subs	r4, r4, r5
 8002faa:	10a4      	asrs	r4, r4, #2
 8002fac:	42a6      	cmp	r6, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	f000 ff2a 	bl	8003e08 <_init>
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	4d0a      	ldr	r5, [pc, #40]	@ (8002fe0 <__libc_init_array+0x40>)
 8002fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002fe4 <__libc_init_array+0x44>)
 8002fba:	1b64      	subs	r4, r4, r5
 8002fbc:	10a4      	asrs	r4, r4, #2
 8002fbe:	42a6      	cmp	r6, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc8:	4798      	blx	r3
 8002fca:	3601      	adds	r6, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd2:	4798      	blx	r3
 8002fd4:	3601      	adds	r6, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	08003f90 	.word	0x08003f90
 8002fdc:	08003f90 	.word	0x08003f90
 8002fe0:	08003f90 	.word	0x08003f90
 8002fe4:	08003f94 	.word	0x08003f94

08002fe8 <pow>:
 8002fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fec:	4614      	mov	r4, r2
 8002fee:	461d      	mov	r5, r3
 8002ff0:	4680      	mov	r8, r0
 8002ff2:	4689      	mov	r9, r1
 8002ff4:	f000 f868 	bl	80030c8 <__ieee754_pow>
 8002ff8:	4622      	mov	r2, r4
 8002ffa:	4606      	mov	r6, r0
 8002ffc:	460f      	mov	r7, r1
 8002ffe:	462b      	mov	r3, r5
 8003000:	4620      	mov	r0, r4
 8003002:	4629      	mov	r1, r5
 8003004:	f7fd fd02 	bl	8000a0c <__aeabi_dcmpun>
 8003008:	bbc8      	cbnz	r0, 800307e <pow+0x96>
 800300a:	2200      	movs	r2, #0
 800300c:	2300      	movs	r3, #0
 800300e:	4640      	mov	r0, r8
 8003010:	4649      	mov	r1, r9
 8003012:	f7fd fcc9 	bl	80009a8 <__aeabi_dcmpeq>
 8003016:	b1b8      	cbz	r0, 8003048 <pow+0x60>
 8003018:	2200      	movs	r2, #0
 800301a:	2300      	movs	r3, #0
 800301c:	4620      	mov	r0, r4
 800301e:	4629      	mov	r1, r5
 8003020:	f7fd fcc2 	bl	80009a8 <__aeabi_dcmpeq>
 8003024:	2800      	cmp	r0, #0
 8003026:	d141      	bne.n	80030ac <pow+0xc4>
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f000 f844 	bl	80030b8 <finite>
 8003030:	b328      	cbz	r0, 800307e <pow+0x96>
 8003032:	2200      	movs	r2, #0
 8003034:	2300      	movs	r3, #0
 8003036:	4620      	mov	r0, r4
 8003038:	4629      	mov	r1, r5
 800303a:	f7fd fcbf 	bl	80009bc <__aeabi_dcmplt>
 800303e:	b1f0      	cbz	r0, 800307e <pow+0x96>
 8003040:	f7ff ffa8 	bl	8002f94 <__errno>
 8003044:	2322      	movs	r3, #34	@ 0x22
 8003046:	e019      	b.n	800307c <pow+0x94>
 8003048:	4630      	mov	r0, r6
 800304a:	4639      	mov	r1, r7
 800304c:	f000 f834 	bl	80030b8 <finite>
 8003050:	b9c8      	cbnz	r0, 8003086 <pow+0x9e>
 8003052:	4640      	mov	r0, r8
 8003054:	4649      	mov	r1, r9
 8003056:	f000 f82f 	bl	80030b8 <finite>
 800305a:	b1a0      	cbz	r0, 8003086 <pow+0x9e>
 800305c:	4620      	mov	r0, r4
 800305e:	4629      	mov	r1, r5
 8003060:	f000 f82a 	bl	80030b8 <finite>
 8003064:	b178      	cbz	r0, 8003086 <pow+0x9e>
 8003066:	4632      	mov	r2, r6
 8003068:	463b      	mov	r3, r7
 800306a:	4630      	mov	r0, r6
 800306c:	4639      	mov	r1, r7
 800306e:	f7fd fccd 	bl	8000a0c <__aeabi_dcmpun>
 8003072:	2800      	cmp	r0, #0
 8003074:	d0e4      	beq.n	8003040 <pow+0x58>
 8003076:	f7ff ff8d 	bl	8002f94 <__errno>
 800307a:	2321      	movs	r3, #33	@ 0x21
 800307c:	6003      	str	r3, [r0, #0]
 800307e:	4630      	mov	r0, r6
 8003080:	4639      	mov	r1, r7
 8003082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003086:	2200      	movs	r2, #0
 8003088:	2300      	movs	r3, #0
 800308a:	4630      	mov	r0, r6
 800308c:	4639      	mov	r1, r7
 800308e:	f7fd fc8b 	bl	80009a8 <__aeabi_dcmpeq>
 8003092:	2800      	cmp	r0, #0
 8003094:	d0f3      	beq.n	800307e <pow+0x96>
 8003096:	4640      	mov	r0, r8
 8003098:	4649      	mov	r1, r9
 800309a:	f000 f80d 	bl	80030b8 <finite>
 800309e:	2800      	cmp	r0, #0
 80030a0:	d0ed      	beq.n	800307e <pow+0x96>
 80030a2:	4620      	mov	r0, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	f000 f807 	bl	80030b8 <finite>
 80030aa:	e7c8      	b.n	800303e <pow+0x56>
 80030ac:	2600      	movs	r6, #0
 80030ae:	4f01      	ldr	r7, [pc, #4]	@ (80030b4 <pow+0xcc>)
 80030b0:	e7e5      	b.n	800307e <pow+0x96>
 80030b2:	bf00      	nop
 80030b4:	3ff00000 	.word	0x3ff00000

080030b8 <finite>:
 80030b8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80030bc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80030c0:	0fc0      	lsrs	r0, r0, #31
 80030c2:	4770      	bx	lr
 80030c4:	0000      	movs	r0, r0
	...

080030c8 <__ieee754_pow>:
 80030c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030cc:	b091      	sub	sp, #68	@ 0x44
 80030ce:	e9cd 2300 	strd	r2, r3, [sp]
 80030d2:	468b      	mov	fp, r1
 80030d4:	e9dd 1800 	ldrd	r1, r8, [sp]
 80030d8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80030dc:	4682      	mov	sl, r0
 80030de:	ea57 0001 	orrs.w	r0, r7, r1
 80030e2:	d112      	bne.n	800310a <__ieee754_pow+0x42>
 80030e4:	4653      	mov	r3, sl
 80030e6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80030ea:	18db      	adds	r3, r3, r3
 80030ec:	4152      	adcs	r2, r2
 80030ee:	4298      	cmp	r0, r3
 80030f0:	4b91      	ldr	r3, [pc, #580]	@ (8003338 <__ieee754_pow+0x270>)
 80030f2:	4193      	sbcs	r3, r2
 80030f4:	f080 84ce 	bcs.w	8003a94 <__ieee754_pow+0x9cc>
 80030f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80030fc:	4650      	mov	r0, sl
 80030fe:	4659      	mov	r1, fp
 8003100:	f7fd f834 	bl	800016c <__adddf3>
 8003104:	b011      	add	sp, #68	@ 0x44
 8003106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800310a:	4b8c      	ldr	r3, [pc, #560]	@ (800333c <__ieee754_pow+0x274>)
 800310c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8003110:	429e      	cmp	r6, r3
 8003112:	465d      	mov	r5, fp
 8003114:	46d1      	mov	r9, sl
 8003116:	d807      	bhi.n	8003128 <__ieee754_pow+0x60>
 8003118:	d102      	bne.n	8003120 <__ieee754_pow+0x58>
 800311a:	f1ba 0f00 	cmp.w	sl, #0
 800311e:	d1eb      	bne.n	80030f8 <__ieee754_pow+0x30>
 8003120:	429f      	cmp	r7, r3
 8003122:	d801      	bhi.n	8003128 <__ieee754_pow+0x60>
 8003124:	d10f      	bne.n	8003146 <__ieee754_pow+0x7e>
 8003126:	b171      	cbz	r1, 8003146 <__ieee754_pow+0x7e>
 8003128:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800312c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8003130:	ea55 0509 	orrs.w	r5, r5, r9
 8003134:	d1e0      	bne.n	80030f8 <__ieee754_pow+0x30>
 8003136:	e9dd 3200 	ldrd	r3, r2, [sp]
 800313a:	18db      	adds	r3, r3, r3
 800313c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8003140:	4152      	adcs	r2, r2
 8003142:	429d      	cmp	r5, r3
 8003144:	e7d4      	b.n	80030f0 <__ieee754_pow+0x28>
 8003146:	2d00      	cmp	r5, #0
 8003148:	4633      	mov	r3, r6
 800314a:	da39      	bge.n	80031c0 <__ieee754_pow+0xf8>
 800314c:	4a7c      	ldr	r2, [pc, #496]	@ (8003340 <__ieee754_pow+0x278>)
 800314e:	4297      	cmp	r7, r2
 8003150:	d84e      	bhi.n	80031f0 <__ieee754_pow+0x128>
 8003152:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8003156:	4297      	cmp	r7, r2
 8003158:	f240 84ab 	bls.w	8003ab2 <__ieee754_pow+0x9ea>
 800315c:	153a      	asrs	r2, r7, #20
 800315e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8003162:	2a14      	cmp	r2, #20
 8003164:	dd0f      	ble.n	8003186 <__ieee754_pow+0xbe>
 8003166:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800316a:	fa21 f402 	lsr.w	r4, r1, r2
 800316e:	fa04 f202 	lsl.w	r2, r4, r2
 8003172:	428a      	cmp	r2, r1
 8003174:	f040 849d 	bne.w	8003ab2 <__ieee754_pow+0x9ea>
 8003178:	f004 0401 	and.w	r4, r4, #1
 800317c:	f1c4 0402 	rsb	r4, r4, #2
 8003180:	2900      	cmp	r1, #0
 8003182:	d15a      	bne.n	800323a <__ieee754_pow+0x172>
 8003184:	e00e      	b.n	80031a4 <__ieee754_pow+0xdc>
 8003186:	2900      	cmp	r1, #0
 8003188:	d156      	bne.n	8003238 <__ieee754_pow+0x170>
 800318a:	f1c2 0214 	rsb	r2, r2, #20
 800318e:	fa47 f402 	asr.w	r4, r7, r2
 8003192:	fa04 f202 	lsl.w	r2, r4, r2
 8003196:	42ba      	cmp	r2, r7
 8003198:	f040 8488 	bne.w	8003aac <__ieee754_pow+0x9e4>
 800319c:	f004 0401 	and.w	r4, r4, #1
 80031a0:	f1c4 0402 	rsb	r4, r4, #2
 80031a4:	4a67      	ldr	r2, [pc, #412]	@ (8003344 <__ieee754_pow+0x27c>)
 80031a6:	4297      	cmp	r7, r2
 80031a8:	d130      	bne.n	800320c <__ieee754_pow+0x144>
 80031aa:	f1b8 0f00 	cmp.w	r8, #0
 80031ae:	f280 8479 	bge.w	8003aa4 <__ieee754_pow+0x9dc>
 80031b2:	4652      	mov	r2, sl
 80031b4:	465b      	mov	r3, fp
 80031b6:	2000      	movs	r0, #0
 80031b8:	4962      	ldr	r1, [pc, #392]	@ (8003344 <__ieee754_pow+0x27c>)
 80031ba:	f7fd fab7 	bl	800072c <__aeabi_ddiv>
 80031be:	e7a1      	b.n	8003104 <__ieee754_pow+0x3c>
 80031c0:	2400      	movs	r4, #0
 80031c2:	2900      	cmp	r1, #0
 80031c4:	d139      	bne.n	800323a <__ieee754_pow+0x172>
 80031c6:	4a5d      	ldr	r2, [pc, #372]	@ (800333c <__ieee754_pow+0x274>)
 80031c8:	4297      	cmp	r7, r2
 80031ca:	d1eb      	bne.n	80031a4 <__ieee754_pow+0xdc>
 80031cc:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80031d0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80031d4:	ea53 0309 	orrs.w	r3, r3, r9
 80031d8:	f000 845c 	beq.w	8003a94 <__ieee754_pow+0x9cc>
 80031dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003348 <__ieee754_pow+0x280>)
 80031de:	429e      	cmp	r6, r3
 80031e0:	d908      	bls.n	80031f4 <__ieee754_pow+0x12c>
 80031e2:	f1b8 0f00 	cmp.w	r8, #0
 80031e6:	f2c0 8459 	blt.w	8003a9c <__ieee754_pow+0x9d4>
 80031ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80031ee:	e789      	b.n	8003104 <__ieee754_pow+0x3c>
 80031f0:	2402      	movs	r4, #2
 80031f2:	e7e6      	b.n	80031c2 <__ieee754_pow+0xfa>
 80031f4:	f1b8 0f00 	cmp.w	r8, #0
 80031f8:	f04f 0000 	mov.w	r0, #0
 80031fc:	f04f 0100 	mov.w	r1, #0
 8003200:	da80      	bge.n	8003104 <__ieee754_pow+0x3c>
 8003202:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003206:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800320a:	e77b      	b.n	8003104 <__ieee754_pow+0x3c>
 800320c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8003210:	d106      	bne.n	8003220 <__ieee754_pow+0x158>
 8003212:	4652      	mov	r2, sl
 8003214:	465b      	mov	r3, fp
 8003216:	4650      	mov	r0, sl
 8003218:	4659      	mov	r1, fp
 800321a:	f7fd f95d 	bl	80004d8 <__aeabi_dmul>
 800321e:	e771      	b.n	8003104 <__ieee754_pow+0x3c>
 8003220:	4a4a      	ldr	r2, [pc, #296]	@ (800334c <__ieee754_pow+0x284>)
 8003222:	4590      	cmp	r8, r2
 8003224:	d109      	bne.n	800323a <__ieee754_pow+0x172>
 8003226:	2d00      	cmp	r5, #0
 8003228:	db07      	blt.n	800323a <__ieee754_pow+0x172>
 800322a:	4650      	mov	r0, sl
 800322c:	4659      	mov	r1, fp
 800322e:	b011      	add	sp, #68	@ 0x44
 8003230:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003234:	f000 bd12 	b.w	8003c5c <__ieee754_sqrt>
 8003238:	2400      	movs	r4, #0
 800323a:	4650      	mov	r0, sl
 800323c:	4659      	mov	r1, fp
 800323e:	9302      	str	r3, [sp, #8]
 8003240:	f000 fc6a 	bl	8003b18 <fabs>
 8003244:	9b02      	ldr	r3, [sp, #8]
 8003246:	f1b9 0f00 	cmp.w	r9, #0
 800324a:	d127      	bne.n	800329c <__ieee754_pow+0x1d4>
 800324c:	4a3d      	ldr	r2, [pc, #244]	@ (8003344 <__ieee754_pow+0x27c>)
 800324e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8003252:	4594      	cmp	ip, r2
 8003254:	d000      	beq.n	8003258 <__ieee754_pow+0x190>
 8003256:	bb0e      	cbnz	r6, 800329c <__ieee754_pow+0x1d4>
 8003258:	f1b8 0f00 	cmp.w	r8, #0
 800325c:	da05      	bge.n	800326a <__ieee754_pow+0x1a2>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	2000      	movs	r0, #0
 8003264:	4937      	ldr	r1, [pc, #220]	@ (8003344 <__ieee754_pow+0x27c>)
 8003266:	f7fd fa61 	bl	800072c <__aeabi_ddiv>
 800326a:	2d00      	cmp	r5, #0
 800326c:	f6bf af4a 	bge.w	8003104 <__ieee754_pow+0x3c>
 8003270:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8003274:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8003278:	4326      	orrs	r6, r4
 800327a:	d108      	bne.n	800328e <__ieee754_pow+0x1c6>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	f7fc ff70 	bl	8000168 <__aeabi_dsub>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	e795      	b.n	80031ba <__ieee754_pow+0xf2>
 800328e:	2c01      	cmp	r4, #1
 8003290:	f47f af38 	bne.w	8003104 <__ieee754_pow+0x3c>
 8003294:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003298:	4619      	mov	r1, r3
 800329a:	e733      	b.n	8003104 <__ieee754_pow+0x3c>
 800329c:	0fea      	lsrs	r2, r5, #31
 800329e:	3a01      	subs	r2, #1
 80032a0:	ea52 0c04 	orrs.w	ip, r2, r4
 80032a4:	d102      	bne.n	80032ac <__ieee754_pow+0x1e4>
 80032a6:	4652      	mov	r2, sl
 80032a8:	465b      	mov	r3, fp
 80032aa:	e7e9      	b.n	8003280 <__ieee754_pow+0x1b8>
 80032ac:	f04f 0900 	mov.w	r9, #0
 80032b0:	3c01      	subs	r4, #1
 80032b2:	4314      	orrs	r4, r2
 80032b4:	bf14      	ite	ne
 80032b6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8003344 <__ieee754_pow+0x27c>
 80032ba:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8003350 <__ieee754_pow+0x288>
 80032be:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80032c2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80032c6:	f240 8107 	bls.w	80034d8 <__ieee754_pow+0x410>
 80032ca:	4b22      	ldr	r3, [pc, #136]	@ (8003354 <__ieee754_pow+0x28c>)
 80032cc:	429f      	cmp	r7, r3
 80032ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003348 <__ieee754_pow+0x280>)
 80032d0:	d913      	bls.n	80032fa <__ieee754_pow+0x232>
 80032d2:	429e      	cmp	r6, r3
 80032d4:	d808      	bhi.n	80032e8 <__ieee754_pow+0x220>
 80032d6:	f1b8 0f00 	cmp.w	r8, #0
 80032da:	da08      	bge.n	80032ee <__ieee754_pow+0x226>
 80032dc:	2000      	movs	r0, #0
 80032de:	b011      	add	sp, #68	@ 0x44
 80032e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e4:	f000 bcb4 	b.w	8003c50 <__math_oflow>
 80032e8:	f1b8 0f00 	cmp.w	r8, #0
 80032ec:	dcf6      	bgt.n	80032dc <__ieee754_pow+0x214>
 80032ee:	2000      	movs	r0, #0
 80032f0:	b011      	add	sp, #68	@ 0x44
 80032f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f6:	f000 bca6 	b.w	8003c46 <__math_uflow>
 80032fa:	429e      	cmp	r6, r3
 80032fc:	d20c      	bcs.n	8003318 <__ieee754_pow+0x250>
 80032fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	2300      	movs	r3, #0
 8003306:	f7fd fb59 	bl	80009bc <__aeabi_dcmplt>
 800330a:	3800      	subs	r0, #0
 800330c:	bf18      	it	ne
 800330e:	2001      	movne	r0, #1
 8003310:	f1b8 0f00 	cmp.w	r8, #0
 8003314:	daec      	bge.n	80032f0 <__ieee754_pow+0x228>
 8003316:	e7e2      	b.n	80032de <__ieee754_pow+0x216>
 8003318:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <__ieee754_pow+0x27c>)
 800331a:	2200      	movs	r2, #0
 800331c:	429e      	cmp	r6, r3
 800331e:	d91b      	bls.n	8003358 <__ieee754_pow+0x290>
 8003320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003324:	2300      	movs	r3, #0
 8003326:	f7fd fb49 	bl	80009bc <__aeabi_dcmplt>
 800332a:	3800      	subs	r0, #0
 800332c:	bf18      	it	ne
 800332e:	2001      	movne	r0, #1
 8003330:	f1b8 0f00 	cmp.w	r8, #0
 8003334:	dcd3      	bgt.n	80032de <__ieee754_pow+0x216>
 8003336:	e7db      	b.n	80032f0 <__ieee754_pow+0x228>
 8003338:	fff00000 	.word	0xfff00000
 800333c:	7ff00000 	.word	0x7ff00000
 8003340:	433fffff 	.word	0x433fffff
 8003344:	3ff00000 	.word	0x3ff00000
 8003348:	3fefffff 	.word	0x3fefffff
 800334c:	3fe00000 	.word	0x3fe00000
 8003350:	bff00000 	.word	0xbff00000
 8003354:	43f00000 	.word	0x43f00000
 8003358:	4b5b      	ldr	r3, [pc, #364]	@ (80034c8 <__ieee754_pow+0x400>)
 800335a:	f7fc ff05 	bl	8000168 <__aeabi_dsub>
 800335e:	a352      	add	r3, pc, #328	@ (adr r3, 80034a8 <__ieee754_pow+0x3e0>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	4604      	mov	r4, r0
 8003366:	460d      	mov	r5, r1
 8003368:	f7fd f8b6 	bl	80004d8 <__aeabi_dmul>
 800336c:	a350      	add	r3, pc, #320	@ (adr r3, 80034b0 <__ieee754_pow+0x3e8>)
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	4606      	mov	r6, r0
 8003374:	460f      	mov	r7, r1
 8003376:	4620      	mov	r0, r4
 8003378:	4629      	mov	r1, r5
 800337a:	f7fd f8ad 	bl	80004d8 <__aeabi_dmul>
 800337e:	2200      	movs	r2, #0
 8003380:	4682      	mov	sl, r0
 8003382:	468b      	mov	fp, r1
 8003384:	4620      	mov	r0, r4
 8003386:	4629      	mov	r1, r5
 8003388:	4b50      	ldr	r3, [pc, #320]	@ (80034cc <__ieee754_pow+0x404>)
 800338a:	f7fd f8a5 	bl	80004d8 <__aeabi_dmul>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	a149      	add	r1, pc, #292	@ (adr r1, 80034b8 <__ieee754_pow+0x3f0>)
 8003394:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003398:	f7fc fee6 	bl	8000168 <__aeabi_dsub>
 800339c:	4622      	mov	r2, r4
 800339e:	462b      	mov	r3, r5
 80033a0:	f7fd f89a 	bl	80004d8 <__aeabi_dmul>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	2000      	movs	r0, #0
 80033aa:	4949      	ldr	r1, [pc, #292]	@ (80034d0 <__ieee754_pow+0x408>)
 80033ac:	f7fc fedc 	bl	8000168 <__aeabi_dsub>
 80033b0:	4622      	mov	r2, r4
 80033b2:	4680      	mov	r8, r0
 80033b4:	4689      	mov	r9, r1
 80033b6:	462b      	mov	r3, r5
 80033b8:	4620      	mov	r0, r4
 80033ba:	4629      	mov	r1, r5
 80033bc:	f7fd f88c 	bl	80004d8 <__aeabi_dmul>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4640      	mov	r0, r8
 80033c6:	4649      	mov	r1, r9
 80033c8:	f7fd f886 	bl	80004d8 <__aeabi_dmul>
 80033cc:	a33c      	add	r3, pc, #240	@ (adr r3, 80034c0 <__ieee754_pow+0x3f8>)
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	f7fd f881 	bl	80004d8 <__aeabi_dmul>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4650      	mov	r0, sl
 80033dc:	4659      	mov	r1, fp
 80033de:	f7fc fec3 	bl	8000168 <__aeabi_dsub>
 80033e2:	2400      	movs	r4, #0
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4680      	mov	r8, r0
 80033ea:	4689      	mov	r9, r1
 80033ec:	4630      	mov	r0, r6
 80033ee:	4639      	mov	r1, r7
 80033f0:	f7fc febc 	bl	800016c <__adddf3>
 80033f4:	4632      	mov	r2, r6
 80033f6:	463b      	mov	r3, r7
 80033f8:	4620      	mov	r0, r4
 80033fa:	460d      	mov	r5, r1
 80033fc:	f7fc feb4 	bl	8000168 <__aeabi_dsub>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4640      	mov	r0, r8
 8003406:	4649      	mov	r1, r9
 8003408:	f7fc feae 	bl	8000168 <__aeabi_dsub>
 800340c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003410:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003414:	2300      	movs	r3, #0
 8003416:	9304      	str	r3, [sp, #16]
 8003418:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800341c:	4606      	mov	r6, r0
 800341e:	460f      	mov	r7, r1
 8003420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003424:	4652      	mov	r2, sl
 8003426:	465b      	mov	r3, fp
 8003428:	f7fc fe9e 	bl	8000168 <__aeabi_dsub>
 800342c:	4622      	mov	r2, r4
 800342e:	462b      	mov	r3, r5
 8003430:	f7fd f852 	bl	80004d8 <__aeabi_dmul>
 8003434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003438:	4680      	mov	r8, r0
 800343a:	4689      	mov	r9, r1
 800343c:	4630      	mov	r0, r6
 800343e:	4639      	mov	r1, r7
 8003440:	f7fd f84a 	bl	80004d8 <__aeabi_dmul>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4640      	mov	r0, r8
 800344a:	4649      	mov	r1, r9
 800344c:	f7fc fe8e 	bl	800016c <__adddf3>
 8003450:	4652      	mov	r2, sl
 8003452:	465b      	mov	r3, fp
 8003454:	4606      	mov	r6, r0
 8003456:	460f      	mov	r7, r1
 8003458:	4620      	mov	r0, r4
 800345a:	4629      	mov	r1, r5
 800345c:	f7fd f83c 	bl	80004d8 <__aeabi_dmul>
 8003460:	460b      	mov	r3, r1
 8003462:	4602      	mov	r2, r0
 8003464:	4680      	mov	r8, r0
 8003466:	4689      	mov	r9, r1
 8003468:	4630      	mov	r0, r6
 800346a:	4639      	mov	r1, r7
 800346c:	f7fc fe7e 	bl	800016c <__adddf3>
 8003470:	4b18      	ldr	r3, [pc, #96]	@ (80034d4 <__ieee754_pow+0x40c>)
 8003472:	4604      	mov	r4, r0
 8003474:	4299      	cmp	r1, r3
 8003476:	460d      	mov	r5, r1
 8003478:	468a      	mov	sl, r1
 800347a:	468b      	mov	fp, r1
 800347c:	f340 82e0 	ble.w	8003a40 <__ieee754_pow+0x978>
 8003480:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8003484:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8003488:	4303      	orrs	r3, r0
 800348a:	f000 81df 	beq.w	800384c <__ieee754_pow+0x784>
 800348e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	2300      	movs	r3, #0
 8003496:	f7fd fa91 	bl	80009bc <__aeabi_dcmplt>
 800349a:	3800      	subs	r0, #0
 800349c:	bf18      	it	ne
 800349e:	2001      	movne	r0, #1
 80034a0:	e71d      	b.n	80032de <__ieee754_pow+0x216>
 80034a2:	bf00      	nop
 80034a4:	f3af 8000 	nop.w
 80034a8:	60000000 	.word	0x60000000
 80034ac:	3ff71547 	.word	0x3ff71547
 80034b0:	f85ddf44 	.word	0xf85ddf44
 80034b4:	3e54ae0b 	.word	0x3e54ae0b
 80034b8:	55555555 	.word	0x55555555
 80034bc:	3fd55555 	.word	0x3fd55555
 80034c0:	652b82fe 	.word	0x652b82fe
 80034c4:	3ff71547 	.word	0x3ff71547
 80034c8:	3ff00000 	.word	0x3ff00000
 80034cc:	3fd00000 	.word	0x3fd00000
 80034d0:	3fe00000 	.word	0x3fe00000
 80034d4:	408fffff 	.word	0x408fffff
 80034d8:	4ad3      	ldr	r2, [pc, #844]	@ (8003828 <__ieee754_pow+0x760>)
 80034da:	402a      	ands	r2, r5
 80034dc:	2a00      	cmp	r2, #0
 80034de:	f040 817a 	bne.w	80037d6 <__ieee754_pow+0x70e>
 80034e2:	4bd2      	ldr	r3, [pc, #840]	@ (800382c <__ieee754_pow+0x764>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	f7fc fff7 	bl	80004d8 <__aeabi_dmul>
 80034ea:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80034ee:	460b      	mov	r3, r1
 80034f0:	151a      	asrs	r2, r3, #20
 80034f2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80034f6:	4422      	add	r2, r4
 80034f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80034fa:	4acd      	ldr	r2, [pc, #820]	@ (8003830 <__ieee754_pow+0x768>)
 80034fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003500:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8003504:	4293      	cmp	r3, r2
 8003506:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800350a:	dd08      	ble.n	800351e <__ieee754_pow+0x456>
 800350c:	4ac9      	ldr	r2, [pc, #804]	@ (8003834 <__ieee754_pow+0x76c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	f340 8163 	ble.w	80037da <__ieee754_pow+0x712>
 8003514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003516:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800351a:	3301      	adds	r3, #1
 800351c:	930a      	str	r3, [sp, #40]	@ 0x28
 800351e:	2600      	movs	r6, #0
 8003520:	00f3      	lsls	r3, r6, #3
 8003522:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003524:	4bc4      	ldr	r3, [pc, #784]	@ (8003838 <__ieee754_pow+0x770>)
 8003526:	4629      	mov	r1, r5
 8003528:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800352c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003530:	461a      	mov	r2, r3
 8003532:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003536:	4623      	mov	r3, r4
 8003538:	4682      	mov	sl, r0
 800353a:	f7fc fe15 	bl	8000168 <__aeabi_dsub>
 800353e:	4652      	mov	r2, sl
 8003540:	462b      	mov	r3, r5
 8003542:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8003546:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800354a:	f7fc fe0f 	bl	800016c <__adddf3>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	2000      	movs	r0, #0
 8003554:	49b9      	ldr	r1, [pc, #740]	@ (800383c <__ieee754_pow+0x774>)
 8003556:	f7fd f8e9 	bl	800072c <__aeabi_ddiv>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003562:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003566:	f7fc ffb7 	bl	80004d8 <__aeabi_dmul>
 800356a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800356e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003572:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003576:	2300      	movs	r3, #0
 8003578:	2200      	movs	r2, #0
 800357a:	46ab      	mov	fp, r5
 800357c:	106d      	asrs	r5, r5, #1
 800357e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8003582:	9304      	str	r3, [sp, #16]
 8003584:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8003588:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800358c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003590:	4640      	mov	r0, r8
 8003592:	4649      	mov	r1, r9
 8003594:	4614      	mov	r4, r2
 8003596:	461d      	mov	r5, r3
 8003598:	f7fc ff9e 	bl	80004d8 <__aeabi_dmul>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80035a4:	f7fc fde0 	bl	8000168 <__aeabi_dsub>
 80035a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035ac:	4606      	mov	r6, r0
 80035ae:	460f      	mov	r7, r1
 80035b0:	4620      	mov	r0, r4
 80035b2:	4629      	mov	r1, r5
 80035b4:	f7fc fdd8 	bl	8000168 <__aeabi_dsub>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4650      	mov	r0, sl
 80035be:	4659      	mov	r1, fp
 80035c0:	f7fc fdd2 	bl	8000168 <__aeabi_dsub>
 80035c4:	4642      	mov	r2, r8
 80035c6:	464b      	mov	r3, r9
 80035c8:	f7fc ff86 	bl	80004d8 <__aeabi_dmul>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4630      	mov	r0, r6
 80035d2:	4639      	mov	r1, r7
 80035d4:	f7fc fdc8 	bl	8000168 <__aeabi_dsub>
 80035d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80035dc:	f7fc ff7c 	bl	80004d8 <__aeabi_dmul>
 80035e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80035e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	f7fc ff74 	bl	80004d8 <__aeabi_dmul>
 80035f0:	a37b      	add	r3, pc, #492	@ (adr r3, 80037e0 <__ieee754_pow+0x718>)
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	4604      	mov	r4, r0
 80035f8:	460d      	mov	r5, r1
 80035fa:	f7fc ff6d 	bl	80004d8 <__aeabi_dmul>
 80035fe:	a37a      	add	r3, pc, #488	@ (adr r3, 80037e8 <__ieee754_pow+0x720>)
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f7fc fdb2 	bl	800016c <__adddf3>
 8003608:	4622      	mov	r2, r4
 800360a:	462b      	mov	r3, r5
 800360c:	f7fc ff64 	bl	80004d8 <__aeabi_dmul>
 8003610:	a377      	add	r3, pc, #476	@ (adr r3, 80037f0 <__ieee754_pow+0x728>)
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	f7fc fda9 	bl	800016c <__adddf3>
 800361a:	4622      	mov	r2, r4
 800361c:	462b      	mov	r3, r5
 800361e:	f7fc ff5b 	bl	80004d8 <__aeabi_dmul>
 8003622:	a375      	add	r3, pc, #468	@ (adr r3, 80037f8 <__ieee754_pow+0x730>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f7fc fda0 	bl	800016c <__adddf3>
 800362c:	4622      	mov	r2, r4
 800362e:	462b      	mov	r3, r5
 8003630:	f7fc ff52 	bl	80004d8 <__aeabi_dmul>
 8003634:	a372      	add	r3, pc, #456	@ (adr r3, 8003800 <__ieee754_pow+0x738>)
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	f7fc fd97 	bl	800016c <__adddf3>
 800363e:	4622      	mov	r2, r4
 8003640:	462b      	mov	r3, r5
 8003642:	f7fc ff49 	bl	80004d8 <__aeabi_dmul>
 8003646:	a370      	add	r3, pc, #448	@ (adr r3, 8003808 <__ieee754_pow+0x740>)
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f7fc fd8e 	bl	800016c <__adddf3>
 8003650:	4622      	mov	r2, r4
 8003652:	4606      	mov	r6, r0
 8003654:	460f      	mov	r7, r1
 8003656:	462b      	mov	r3, r5
 8003658:	4620      	mov	r0, r4
 800365a:	4629      	mov	r1, r5
 800365c:	f7fc ff3c 	bl	80004d8 <__aeabi_dmul>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4630      	mov	r0, r6
 8003666:	4639      	mov	r1, r7
 8003668:	f7fc ff36 	bl	80004d8 <__aeabi_dmul>
 800366c:	4604      	mov	r4, r0
 800366e:	460d      	mov	r5, r1
 8003670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003674:	4642      	mov	r2, r8
 8003676:	464b      	mov	r3, r9
 8003678:	f7fc fd78 	bl	800016c <__adddf3>
 800367c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003680:	f7fc ff2a 	bl	80004d8 <__aeabi_dmul>
 8003684:	4622      	mov	r2, r4
 8003686:	462b      	mov	r3, r5
 8003688:	f7fc fd70 	bl	800016c <__adddf3>
 800368c:	4642      	mov	r2, r8
 800368e:	4682      	mov	sl, r0
 8003690:	468b      	mov	fp, r1
 8003692:	464b      	mov	r3, r9
 8003694:	4640      	mov	r0, r8
 8003696:	4649      	mov	r1, r9
 8003698:	f7fc ff1e 	bl	80004d8 <__aeabi_dmul>
 800369c:	2200      	movs	r2, #0
 800369e:	4b68      	ldr	r3, [pc, #416]	@ (8003840 <__ieee754_pow+0x778>)
 80036a0:	4606      	mov	r6, r0
 80036a2:	460f      	mov	r7, r1
 80036a4:	f7fc fd62 	bl	800016c <__adddf3>
 80036a8:	4652      	mov	r2, sl
 80036aa:	465b      	mov	r3, fp
 80036ac:	f7fc fd5e 	bl	800016c <__adddf3>
 80036b0:	2400      	movs	r4, #0
 80036b2:	460d      	mov	r5, r1
 80036b4:	4622      	mov	r2, r4
 80036b6:	460b      	mov	r3, r1
 80036b8:	4640      	mov	r0, r8
 80036ba:	4649      	mov	r1, r9
 80036bc:	f7fc ff0c 	bl	80004d8 <__aeabi_dmul>
 80036c0:	2200      	movs	r2, #0
 80036c2:	4680      	mov	r8, r0
 80036c4:	4689      	mov	r9, r1
 80036c6:	4620      	mov	r0, r4
 80036c8:	4629      	mov	r1, r5
 80036ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003840 <__ieee754_pow+0x778>)
 80036cc:	f7fc fd4c 	bl	8000168 <__aeabi_dsub>
 80036d0:	4632      	mov	r2, r6
 80036d2:	463b      	mov	r3, r7
 80036d4:	f7fc fd48 	bl	8000168 <__aeabi_dsub>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4650      	mov	r0, sl
 80036de:	4659      	mov	r1, fp
 80036e0:	f7fc fd42 	bl	8000168 <__aeabi_dsub>
 80036e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80036e8:	f7fc fef6 	bl	80004d8 <__aeabi_dmul>
 80036ec:	4622      	mov	r2, r4
 80036ee:	4606      	mov	r6, r0
 80036f0:	460f      	mov	r7, r1
 80036f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80036f6:	462b      	mov	r3, r5
 80036f8:	f7fc feee 	bl	80004d8 <__aeabi_dmul>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4630      	mov	r0, r6
 8003702:	4639      	mov	r1, r7
 8003704:	f7fc fd32 	bl	800016c <__adddf3>
 8003708:	2400      	movs	r4, #0
 800370a:	4606      	mov	r6, r0
 800370c:	460f      	mov	r7, r1
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4640      	mov	r0, r8
 8003714:	4649      	mov	r1, r9
 8003716:	f7fc fd29 	bl	800016c <__adddf3>
 800371a:	a33d      	add	r3, pc, #244	@ (adr r3, 8003810 <__ieee754_pow+0x748>)
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	4620      	mov	r0, r4
 8003722:	460d      	mov	r5, r1
 8003724:	f7fc fed8 	bl	80004d8 <__aeabi_dmul>
 8003728:	4642      	mov	r2, r8
 800372a:	464b      	mov	r3, r9
 800372c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003730:	4620      	mov	r0, r4
 8003732:	4629      	mov	r1, r5
 8003734:	f7fc fd18 	bl	8000168 <__aeabi_dsub>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4630      	mov	r0, r6
 800373e:	4639      	mov	r1, r7
 8003740:	f7fc fd12 	bl	8000168 <__aeabi_dsub>
 8003744:	a334      	add	r3, pc, #208	@ (adr r3, 8003818 <__ieee754_pow+0x750>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f7fc fec5 	bl	80004d8 <__aeabi_dmul>
 800374e:	a334      	add	r3, pc, #208	@ (adr r3, 8003820 <__ieee754_pow+0x758>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	4606      	mov	r6, r0
 8003756:	460f      	mov	r7, r1
 8003758:	4620      	mov	r0, r4
 800375a:	4629      	mov	r1, r5
 800375c:	f7fc febc 	bl	80004d8 <__aeabi_dmul>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4630      	mov	r0, r6
 8003766:	4639      	mov	r1, r7
 8003768:	f7fc fd00 	bl	800016c <__adddf3>
 800376c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800376e:	4b35      	ldr	r3, [pc, #212]	@ (8003844 <__ieee754_pow+0x77c>)
 8003770:	2400      	movs	r4, #0
 8003772:	4413      	add	r3, r2
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f7fc fcf8 	bl	800016c <__adddf3>
 800377c:	4682      	mov	sl, r0
 800377e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003780:	468b      	mov	fp, r1
 8003782:	f7fc fe3f 	bl	8000404 <__aeabi_i2d>
 8003786:	4606      	mov	r6, r0
 8003788:	460f      	mov	r7, r1
 800378a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800378c:	4b2e      	ldr	r3, [pc, #184]	@ (8003848 <__ieee754_pow+0x780>)
 800378e:	4413      	add	r3, r2
 8003790:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003794:	4652      	mov	r2, sl
 8003796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800379a:	465b      	mov	r3, fp
 800379c:	f7fc fce6 	bl	800016c <__adddf3>
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	f7fc fce2 	bl	800016c <__adddf3>
 80037a8:	4632      	mov	r2, r6
 80037aa:	463b      	mov	r3, r7
 80037ac:	f7fc fcde 	bl	800016c <__adddf3>
 80037b0:	4632      	mov	r2, r6
 80037b2:	463b      	mov	r3, r7
 80037b4:	4620      	mov	r0, r4
 80037b6:	460d      	mov	r5, r1
 80037b8:	f7fc fcd6 	bl	8000168 <__aeabi_dsub>
 80037bc:	4642      	mov	r2, r8
 80037be:	464b      	mov	r3, r9
 80037c0:	f7fc fcd2 	bl	8000168 <__aeabi_dsub>
 80037c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80037c8:	f7fc fcce 	bl	8000168 <__aeabi_dsub>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4650      	mov	r0, sl
 80037d2:	4659      	mov	r1, fp
 80037d4:	e618      	b.n	8003408 <__ieee754_pow+0x340>
 80037d6:	2400      	movs	r4, #0
 80037d8:	e68a      	b.n	80034f0 <__ieee754_pow+0x428>
 80037da:	2601      	movs	r6, #1
 80037dc:	e6a0      	b.n	8003520 <__ieee754_pow+0x458>
 80037de:	bf00      	nop
 80037e0:	4a454eef 	.word	0x4a454eef
 80037e4:	3fca7e28 	.word	0x3fca7e28
 80037e8:	93c9db65 	.word	0x93c9db65
 80037ec:	3fcd864a 	.word	0x3fcd864a
 80037f0:	a91d4101 	.word	0xa91d4101
 80037f4:	3fd17460 	.word	0x3fd17460
 80037f8:	518f264d 	.word	0x518f264d
 80037fc:	3fd55555 	.word	0x3fd55555
 8003800:	db6fabff 	.word	0xdb6fabff
 8003804:	3fdb6db6 	.word	0x3fdb6db6
 8003808:	33333303 	.word	0x33333303
 800380c:	3fe33333 	.word	0x3fe33333
 8003810:	e0000000 	.word	0xe0000000
 8003814:	3feec709 	.word	0x3feec709
 8003818:	dc3a03fd 	.word	0xdc3a03fd
 800381c:	3feec709 	.word	0x3feec709
 8003820:	145b01f5 	.word	0x145b01f5
 8003824:	be3e2fe0 	.word	0xbe3e2fe0
 8003828:	7ff00000 	.word	0x7ff00000
 800382c:	43400000 	.word	0x43400000
 8003830:	0003988e 	.word	0x0003988e
 8003834:	000bb679 	.word	0x000bb679
 8003838:	08003f78 	.word	0x08003f78
 800383c:	3ff00000 	.word	0x3ff00000
 8003840:	40080000 	.word	0x40080000
 8003844:	08003f58 	.word	0x08003f58
 8003848:	08003f68 	.word	0x08003f68
 800384c:	a39a      	add	r3, pc, #616	@ (adr r3, 8003ab8 <__ieee754_pow+0x9f0>)
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	4630      	mov	r0, r6
 8003854:	4639      	mov	r1, r7
 8003856:	f7fc fc89 	bl	800016c <__adddf3>
 800385a:	4642      	mov	r2, r8
 800385c:	e9cd 0100 	strd	r0, r1, [sp]
 8003860:	464b      	mov	r3, r9
 8003862:	4620      	mov	r0, r4
 8003864:	4629      	mov	r1, r5
 8003866:	f7fc fc7f 	bl	8000168 <__aeabi_dsub>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003872:	f7fd f8c1 	bl	80009f8 <__aeabi_dcmpgt>
 8003876:	2800      	cmp	r0, #0
 8003878:	f47f ae09 	bne.w	800348e <__ieee754_pow+0x3c6>
 800387c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003880:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8003884:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8003888:	fa43 fa0a 	asr.w	sl, r3, sl
 800388c:	44da      	add	sl, fp
 800388e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8003892:	489b      	ldr	r0, [pc, #620]	@ (8003b00 <__ieee754_pow+0xa38>)
 8003894:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8003898:	4108      	asrs	r0, r1
 800389a:	ea00 030a 	and.w	r3, r0, sl
 800389e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80038a2:	f1c1 0114 	rsb	r1, r1, #20
 80038a6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80038aa:	4640      	mov	r0, r8
 80038ac:	fa4a fa01 	asr.w	sl, sl, r1
 80038b0:	f1bb 0f00 	cmp.w	fp, #0
 80038b4:	4649      	mov	r1, r9
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	bfb8      	it	lt
 80038bc:	f1ca 0a00 	rsblt	sl, sl, #0
 80038c0:	f7fc fc52 	bl	8000168 <__aeabi_dsub>
 80038c4:	4680      	mov	r8, r0
 80038c6:	4689      	mov	r9, r1
 80038c8:	2400      	movs	r4, #0
 80038ca:	4632      	mov	r2, r6
 80038cc:	463b      	mov	r3, r7
 80038ce:	4640      	mov	r0, r8
 80038d0:	4649      	mov	r1, r9
 80038d2:	f7fc fc4b 	bl	800016c <__adddf3>
 80038d6:	a37a      	add	r3, pc, #488	@ (adr r3, 8003ac0 <__ieee754_pow+0x9f8>)
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	4620      	mov	r0, r4
 80038de:	460d      	mov	r5, r1
 80038e0:	f7fc fdfa 	bl	80004d8 <__aeabi_dmul>
 80038e4:	4642      	mov	r2, r8
 80038e6:	464b      	mov	r3, r9
 80038e8:	e9cd 0100 	strd	r0, r1, [sp]
 80038ec:	4620      	mov	r0, r4
 80038ee:	4629      	mov	r1, r5
 80038f0:	f7fc fc3a 	bl	8000168 <__aeabi_dsub>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4630      	mov	r0, r6
 80038fa:	4639      	mov	r1, r7
 80038fc:	f7fc fc34 	bl	8000168 <__aeabi_dsub>
 8003900:	a371      	add	r3, pc, #452	@ (adr r3, 8003ac8 <__ieee754_pow+0xa00>)
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f7fc fde7 	bl	80004d8 <__aeabi_dmul>
 800390a:	a371      	add	r3, pc, #452	@ (adr r3, 8003ad0 <__ieee754_pow+0xa08>)
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	4680      	mov	r8, r0
 8003912:	4689      	mov	r9, r1
 8003914:	4620      	mov	r0, r4
 8003916:	4629      	mov	r1, r5
 8003918:	f7fc fdde 	bl	80004d8 <__aeabi_dmul>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4640      	mov	r0, r8
 8003922:	4649      	mov	r1, r9
 8003924:	f7fc fc22 	bl	800016c <__adddf3>
 8003928:	4604      	mov	r4, r0
 800392a:	460d      	mov	r5, r1
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003934:	f7fc fc1a 	bl	800016c <__adddf3>
 8003938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800393c:	4680      	mov	r8, r0
 800393e:	4689      	mov	r9, r1
 8003940:	f7fc fc12 	bl	8000168 <__aeabi_dsub>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4620      	mov	r0, r4
 800394a:	4629      	mov	r1, r5
 800394c:	f7fc fc0c 	bl	8000168 <__aeabi_dsub>
 8003950:	4642      	mov	r2, r8
 8003952:	4606      	mov	r6, r0
 8003954:	460f      	mov	r7, r1
 8003956:	464b      	mov	r3, r9
 8003958:	4640      	mov	r0, r8
 800395a:	4649      	mov	r1, r9
 800395c:	f7fc fdbc 	bl	80004d8 <__aeabi_dmul>
 8003960:	a35d      	add	r3, pc, #372	@ (adr r3, 8003ad8 <__ieee754_pow+0xa10>)
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	4604      	mov	r4, r0
 8003968:	460d      	mov	r5, r1
 800396a:	f7fc fdb5 	bl	80004d8 <__aeabi_dmul>
 800396e:	a35c      	add	r3, pc, #368	@ (adr r3, 8003ae0 <__ieee754_pow+0xa18>)
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	f7fc fbf8 	bl	8000168 <__aeabi_dsub>
 8003978:	4622      	mov	r2, r4
 800397a:	462b      	mov	r3, r5
 800397c:	f7fc fdac 	bl	80004d8 <__aeabi_dmul>
 8003980:	a359      	add	r3, pc, #356	@ (adr r3, 8003ae8 <__ieee754_pow+0xa20>)
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f7fc fbf1 	bl	800016c <__adddf3>
 800398a:	4622      	mov	r2, r4
 800398c:	462b      	mov	r3, r5
 800398e:	f7fc fda3 	bl	80004d8 <__aeabi_dmul>
 8003992:	a357      	add	r3, pc, #348	@ (adr r3, 8003af0 <__ieee754_pow+0xa28>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f7fc fbe6 	bl	8000168 <__aeabi_dsub>
 800399c:	4622      	mov	r2, r4
 800399e:	462b      	mov	r3, r5
 80039a0:	f7fc fd9a 	bl	80004d8 <__aeabi_dmul>
 80039a4:	a354      	add	r3, pc, #336	@ (adr r3, 8003af8 <__ieee754_pow+0xa30>)
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	f7fc fbdf 	bl	800016c <__adddf3>
 80039ae:	4622      	mov	r2, r4
 80039b0:	462b      	mov	r3, r5
 80039b2:	f7fc fd91 	bl	80004d8 <__aeabi_dmul>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4640      	mov	r0, r8
 80039bc:	4649      	mov	r1, r9
 80039be:	f7fc fbd3 	bl	8000168 <__aeabi_dsub>
 80039c2:	4604      	mov	r4, r0
 80039c4:	460d      	mov	r5, r1
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4640      	mov	r0, r8
 80039cc:	4649      	mov	r1, r9
 80039ce:	f7fc fd83 	bl	80004d8 <__aeabi_dmul>
 80039d2:	2200      	movs	r2, #0
 80039d4:	e9cd 0100 	strd	r0, r1, [sp]
 80039d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80039dc:	4620      	mov	r0, r4
 80039de:	4629      	mov	r1, r5
 80039e0:	f7fc fbc2 	bl	8000168 <__aeabi_dsub>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039ec:	f7fc fe9e 	bl	800072c <__aeabi_ddiv>
 80039f0:	4632      	mov	r2, r6
 80039f2:	4604      	mov	r4, r0
 80039f4:	460d      	mov	r5, r1
 80039f6:	463b      	mov	r3, r7
 80039f8:	4640      	mov	r0, r8
 80039fa:	4649      	mov	r1, r9
 80039fc:	f7fc fd6c 	bl	80004d8 <__aeabi_dmul>
 8003a00:	4632      	mov	r2, r6
 8003a02:	463b      	mov	r3, r7
 8003a04:	f7fc fbb2 	bl	800016c <__adddf3>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	4629      	mov	r1, r5
 8003a10:	f7fc fbaa 	bl	8000168 <__aeabi_dsub>
 8003a14:	4642      	mov	r2, r8
 8003a16:	464b      	mov	r3, r9
 8003a18:	f7fc fba6 	bl	8000168 <__aeabi_dsub>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	2000      	movs	r0, #0
 8003a22:	4938      	ldr	r1, [pc, #224]	@ (8003b04 <__ieee754_pow+0xa3c>)
 8003a24:	f7fc fba0 	bl	8000168 <__aeabi_dsub>
 8003a28:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003a2c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8003a30:	da2e      	bge.n	8003a90 <__ieee754_pow+0x9c8>
 8003a32:	4652      	mov	r2, sl
 8003a34:	f000 f874 	bl	8003b20 <scalbn>
 8003a38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a3c:	f7ff bbed 	b.w	800321a <__ieee754_pow+0x152>
 8003a40:	4c31      	ldr	r4, [pc, #196]	@ (8003b08 <__ieee754_pow+0xa40>)
 8003a42:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003a46:	42a3      	cmp	r3, r4
 8003a48:	d91a      	bls.n	8003a80 <__ieee754_pow+0x9b8>
 8003a4a:	4b30      	ldr	r3, [pc, #192]	@ (8003b0c <__ieee754_pow+0xa44>)
 8003a4c:	440b      	add	r3, r1
 8003a4e:	4303      	orrs	r3, r0
 8003a50:	d009      	beq.n	8003a66 <__ieee754_pow+0x99e>
 8003a52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f7fc ffaf 	bl	80009bc <__aeabi_dcmplt>
 8003a5e:	3800      	subs	r0, #0
 8003a60:	bf18      	it	ne
 8003a62:	2001      	movne	r0, #1
 8003a64:	e444      	b.n	80032f0 <__ieee754_pow+0x228>
 8003a66:	4642      	mov	r2, r8
 8003a68:	464b      	mov	r3, r9
 8003a6a:	f7fc fb7d 	bl	8000168 <__aeabi_dsub>
 8003a6e:	4632      	mov	r2, r6
 8003a70:	463b      	mov	r3, r7
 8003a72:	f7fc ffb7 	bl	80009e4 <__aeabi_dcmpge>
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d1eb      	bne.n	8003a52 <__ieee754_pow+0x98a>
 8003a7a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8003b10 <__ieee754_pow+0xa48>
 8003a7e:	e6fd      	b.n	800387c <__ieee754_pow+0x7b4>
 8003a80:	469a      	mov	sl, r3
 8003a82:	4b24      	ldr	r3, [pc, #144]	@ (8003b14 <__ieee754_pow+0xa4c>)
 8003a84:	459a      	cmp	sl, r3
 8003a86:	f63f aef9 	bhi.w	800387c <__ieee754_pow+0x7b4>
 8003a8a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8003a8e:	e71b      	b.n	80038c8 <__ieee754_pow+0x800>
 8003a90:	4621      	mov	r1, r4
 8003a92:	e7d1      	b.n	8003a38 <__ieee754_pow+0x970>
 8003a94:	2000      	movs	r0, #0
 8003a96:	491b      	ldr	r1, [pc, #108]	@ (8003b04 <__ieee754_pow+0xa3c>)
 8003a98:	f7ff bb34 	b.w	8003104 <__ieee754_pow+0x3c>
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	f7ff bb30 	b.w	8003104 <__ieee754_pow+0x3c>
 8003aa4:	4650      	mov	r0, sl
 8003aa6:	4659      	mov	r1, fp
 8003aa8:	f7ff bb2c 	b.w	8003104 <__ieee754_pow+0x3c>
 8003aac:	460c      	mov	r4, r1
 8003aae:	f7ff bb79 	b.w	80031a4 <__ieee754_pow+0xdc>
 8003ab2:	2400      	movs	r4, #0
 8003ab4:	f7ff bb64 	b.w	8003180 <__ieee754_pow+0xb8>
 8003ab8:	652b82fe 	.word	0x652b82fe
 8003abc:	3c971547 	.word	0x3c971547
 8003ac0:	00000000 	.word	0x00000000
 8003ac4:	3fe62e43 	.word	0x3fe62e43
 8003ac8:	fefa39ef 	.word	0xfefa39ef
 8003acc:	3fe62e42 	.word	0x3fe62e42
 8003ad0:	0ca86c39 	.word	0x0ca86c39
 8003ad4:	be205c61 	.word	0xbe205c61
 8003ad8:	72bea4d0 	.word	0x72bea4d0
 8003adc:	3e663769 	.word	0x3e663769
 8003ae0:	c5d26bf1 	.word	0xc5d26bf1
 8003ae4:	3ebbbd41 	.word	0x3ebbbd41
 8003ae8:	af25de2c 	.word	0xaf25de2c
 8003aec:	3f11566a 	.word	0x3f11566a
 8003af0:	16bebd93 	.word	0x16bebd93
 8003af4:	3f66c16c 	.word	0x3f66c16c
 8003af8:	5555553e 	.word	0x5555553e
 8003afc:	3fc55555 	.word	0x3fc55555
 8003b00:	fff00000 	.word	0xfff00000
 8003b04:	3ff00000 	.word	0x3ff00000
 8003b08:	4090cbff 	.word	0x4090cbff
 8003b0c:	3f6f3400 	.word	0x3f6f3400
 8003b10:	4090cc00 	.word	0x4090cc00
 8003b14:	3fe00000 	.word	0x3fe00000

08003b18 <fabs>:
 8003b18:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4770      	bx	lr

08003b20 <scalbn>:
 8003b20:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8003b24:	4616      	mov	r6, r2
 8003b26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003b2a:	4683      	mov	fp, r0
 8003b2c:	468c      	mov	ip, r1
 8003b2e:	460b      	mov	r3, r1
 8003b30:	b982      	cbnz	r2, 8003b54 <scalbn+0x34>
 8003b32:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003b36:	4303      	orrs	r3, r0
 8003b38:	d039      	beq.n	8003bae <scalbn+0x8e>
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003bf8 <scalbn+0xd8>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f7fc fccb 	bl	80004d8 <__aeabi_dmul>
 8003b42:	4b2e      	ldr	r3, [pc, #184]	@ (8003bfc <scalbn+0xdc>)
 8003b44:	4683      	mov	fp, r0
 8003b46:	429e      	cmp	r6, r3
 8003b48:	468c      	mov	ip, r1
 8003b4a:	da0d      	bge.n	8003b68 <scalbn+0x48>
 8003b4c:	a326      	add	r3, pc, #152	@ (adr r3, 8003be8 <scalbn+0xc8>)
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	e01b      	b.n	8003b8c <scalbn+0x6c>
 8003b54:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8003b58:	42ba      	cmp	r2, r7
 8003b5a:	d109      	bne.n	8003b70 <scalbn+0x50>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	f7fc fb05 	bl	800016c <__adddf3>
 8003b62:	4683      	mov	fp, r0
 8003b64:	468c      	mov	ip, r1
 8003b66:	e022      	b.n	8003bae <scalbn+0x8e>
 8003b68:	460b      	mov	r3, r1
 8003b6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003b6e:	3a36      	subs	r2, #54	@ 0x36
 8003b70:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003b74:	428e      	cmp	r6, r1
 8003b76:	dd0c      	ble.n	8003b92 <scalbn+0x72>
 8003b78:	a31d      	add	r3, pc, #116	@ (adr r3, 8003bf0 <scalbn+0xd0>)
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	461c      	mov	r4, r3
 8003b80:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8003b84:	f361 74df 	bfi	r4, r1, #31, #1
 8003b88:	4621      	mov	r1, r4
 8003b8a:	481d      	ldr	r0, [pc, #116]	@ (8003c00 <scalbn+0xe0>)
 8003b8c:	f7fc fca4 	bl	80004d8 <__aeabi_dmul>
 8003b90:	e7e7      	b.n	8003b62 <scalbn+0x42>
 8003b92:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8003b96:	4432      	add	r2, r6
 8003b98:	428a      	cmp	r2, r1
 8003b9a:	dced      	bgt.n	8003b78 <scalbn+0x58>
 8003b9c:	2a00      	cmp	r2, #0
 8003b9e:	dd0a      	ble.n	8003bb6 <scalbn+0x96>
 8003ba0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003ba4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003ba8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003bac:	46ac      	mov	ip, r5
 8003bae:	4658      	mov	r0, fp
 8003bb0:	4661      	mov	r1, ip
 8003bb2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8003bb6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8003bba:	da09      	bge.n	8003bd0 <scalbn+0xb0>
 8003bbc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8003bc0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8003bc4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8003bc8:	480e      	ldr	r0, [pc, #56]	@ (8003c04 <scalbn+0xe4>)
 8003bca:	f041 011f 	orr.w	r1, r1, #31
 8003bce:	e7bd      	b.n	8003b4c <scalbn+0x2c>
 8003bd0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003bd4:	3236      	adds	r2, #54	@ 0x36
 8003bd6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003bda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003bde:	4658      	mov	r0, fp
 8003be0:	4629      	mov	r1, r5
 8003be2:	2200      	movs	r2, #0
 8003be4:	4b08      	ldr	r3, [pc, #32]	@ (8003c08 <scalbn+0xe8>)
 8003be6:	e7d1      	b.n	8003b8c <scalbn+0x6c>
 8003be8:	c2f8f359 	.word	0xc2f8f359
 8003bec:	01a56e1f 	.word	0x01a56e1f
 8003bf0:	8800759c 	.word	0x8800759c
 8003bf4:	7e37e43c 	.word	0x7e37e43c
 8003bf8:	43500000 	.word	0x43500000
 8003bfc:	ffff3cb0 	.word	0xffff3cb0
 8003c00:	8800759c 	.word	0x8800759c
 8003c04:	c2f8f359 	.word	0xc2f8f359
 8003c08:	3c900000 	.word	0x3c900000

08003c0c <with_errno>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	4604      	mov	r4, r0
 8003c10:	460d      	mov	r5, r1
 8003c12:	4616      	mov	r6, r2
 8003c14:	f7ff f9be 	bl	8002f94 <__errno>
 8003c18:	4629      	mov	r1, r5
 8003c1a:	6006      	str	r6, [r0, #0]
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	bd70      	pop	{r4, r5, r6, pc}

08003c20 <xflow>:
 8003c20:	b513      	push	{r0, r1, r4, lr}
 8003c22:	4604      	mov	r4, r0
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	b10c      	cbz	r4, 8003c2e <xflow+0xe>
 8003c2a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8003c2e:	e9cd 2300 	strd	r2, r3, [sp]
 8003c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c36:	f7fc fc4f 	bl	80004d8 <__aeabi_dmul>
 8003c3a:	2222      	movs	r2, #34	@ 0x22
 8003c3c:	b002      	add	sp, #8
 8003c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c42:	f7ff bfe3 	b.w	8003c0c <with_errno>

08003c46 <__math_uflow>:
 8003c46:	2200      	movs	r2, #0
 8003c48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003c4c:	f7ff bfe8 	b.w	8003c20 <xflow>

08003c50 <__math_oflow>:
 8003c50:	2200      	movs	r2, #0
 8003c52:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8003c56:	f7ff bfe3 	b.w	8003c20 <xflow>
	...

08003c5c <__ieee754_sqrt>:
 8003c5c:	4a67      	ldr	r2, [pc, #412]	@ (8003dfc <__ieee754_sqrt+0x1a0>)
 8003c5e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c62:	438a      	bics	r2, r1
 8003c64:	4606      	mov	r6, r0
 8003c66:	460f      	mov	r7, r1
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	d10e      	bne.n	8003c8c <__ieee754_sqrt+0x30>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	f7fc fc32 	bl	80004d8 <__aeabi_dmul>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4630      	mov	r0, r6
 8003c7a:	4639      	mov	r1, r7
 8003c7c:	f7fc fa76 	bl	800016c <__adddf3>
 8003c80:	4606      	mov	r6, r0
 8003c82:	460f      	mov	r7, r1
 8003c84:	4630      	mov	r0, r6
 8003c86:	4639      	mov	r1, r7
 8003c88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c8c:	2900      	cmp	r1, #0
 8003c8e:	dc0c      	bgt.n	8003caa <__ieee754_sqrt+0x4e>
 8003c90:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8003c94:	4302      	orrs	r2, r0
 8003c96:	d0f5      	beq.n	8003c84 <__ieee754_sqrt+0x28>
 8003c98:	b189      	cbz	r1, 8003cbe <__ieee754_sqrt+0x62>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	f7fc fa64 	bl	8000168 <__aeabi_dsub>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	f7fc fd42 	bl	800072c <__aeabi_ddiv>
 8003ca8:	e7ea      	b.n	8003c80 <__ieee754_sqrt+0x24>
 8003caa:	150a      	asrs	r2, r1, #20
 8003cac:	d115      	bne.n	8003cda <__ieee754_sqrt+0x7e>
 8003cae:	2100      	movs	r1, #0
 8003cb0:	e009      	b.n	8003cc6 <__ieee754_sqrt+0x6a>
 8003cb2:	0ae3      	lsrs	r3, r4, #11
 8003cb4:	3a15      	subs	r2, #21
 8003cb6:	0564      	lsls	r4, r4, #21
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0fa      	beq.n	8003cb2 <__ieee754_sqrt+0x56>
 8003cbc:	e7f7      	b.n	8003cae <__ieee754_sqrt+0x52>
 8003cbe:	460a      	mov	r2, r1
 8003cc0:	e7fa      	b.n	8003cb8 <__ieee754_sqrt+0x5c>
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	3101      	adds	r1, #1
 8003cc6:	02d8      	lsls	r0, r3, #11
 8003cc8:	d5fb      	bpl.n	8003cc2 <__ieee754_sqrt+0x66>
 8003cca:	1e48      	subs	r0, r1, #1
 8003ccc:	1a12      	subs	r2, r2, r0
 8003cce:	f1c1 0020 	rsb	r0, r1, #32
 8003cd2:	fa24 f000 	lsr.w	r0, r4, r0
 8003cd6:	4303      	orrs	r3, r0
 8003cd8:	408c      	lsls	r4, r1
 8003cda:	2600      	movs	r6, #0
 8003cdc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8003ce0:	2116      	movs	r1, #22
 8003ce2:	07d2      	lsls	r2, r2, #31
 8003ce4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003ce8:	4632      	mov	r2, r6
 8003cea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cf2:	bf5c      	itt	pl
 8003cf4:	005b      	lslpl	r3, r3, #1
 8003cf6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8003cfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003cfe:	bf58      	it	pl
 8003d00:	0064      	lslpl	r4, r4, #1
 8003d02:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003d06:	107f      	asrs	r7, r7, #1
 8003d08:	0064      	lsls	r4, r4, #1
 8003d0a:	1815      	adds	r5, r2, r0
 8003d0c:	429d      	cmp	r5, r3
 8003d0e:	bfde      	ittt	le
 8003d10:	182a      	addle	r2, r5, r0
 8003d12:	1b5b      	suble	r3, r3, r5
 8003d14:	1836      	addle	r6, r6, r0
 8003d16:	0fe5      	lsrs	r5, r4, #31
 8003d18:	3901      	subs	r1, #1
 8003d1a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8003d1e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003d22:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003d26:	d1f0      	bne.n	8003d0a <__ieee754_sqrt+0xae>
 8003d28:	460d      	mov	r5, r1
 8003d2a:	f04f 0a20 	mov.w	sl, #32
 8003d2e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003d32:	429a      	cmp	r2, r3
 8003d34:	eb01 0c00 	add.w	ip, r1, r0
 8003d38:	db02      	blt.n	8003d40 <__ieee754_sqrt+0xe4>
 8003d3a:	d113      	bne.n	8003d64 <__ieee754_sqrt+0x108>
 8003d3c:	45a4      	cmp	ip, r4
 8003d3e:	d811      	bhi.n	8003d64 <__ieee754_sqrt+0x108>
 8003d40:	f1bc 0f00 	cmp.w	ip, #0
 8003d44:	eb0c 0100 	add.w	r1, ip, r0
 8003d48:	da42      	bge.n	8003dd0 <__ieee754_sqrt+0x174>
 8003d4a:	2900      	cmp	r1, #0
 8003d4c:	db40      	blt.n	8003dd0 <__ieee754_sqrt+0x174>
 8003d4e:	f102 0e01 	add.w	lr, r2, #1
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	4672      	mov	r2, lr
 8003d56:	45a4      	cmp	ip, r4
 8003d58:	bf88      	it	hi
 8003d5a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003d5e:	eba4 040c 	sub.w	r4, r4, ip
 8003d62:	4405      	add	r5, r0
 8003d64:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8003d68:	f1ba 0a01 	subs.w	sl, sl, #1
 8003d6c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8003d70:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003d74:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003d78:	d1db      	bne.n	8003d32 <__ieee754_sqrt+0xd6>
 8003d7a:	431c      	orrs	r4, r3
 8003d7c:	d01a      	beq.n	8003db4 <__ieee754_sqrt+0x158>
 8003d7e:	4c20      	ldr	r4, [pc, #128]	@ (8003e00 <__ieee754_sqrt+0x1a4>)
 8003d80:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8003e04 <__ieee754_sqrt+0x1a8>
 8003d84:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003d88:	e9db 2300 	ldrd	r2, r3, [fp]
 8003d8c:	f7fc f9ec 	bl	8000168 <__aeabi_dsub>
 8003d90:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4640      	mov	r0, r8
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	f7fc fe18 	bl	80009d0 <__aeabi_dcmple>
 8003da0:	b140      	cbz	r0, 8003db4 <__ieee754_sqrt+0x158>
 8003da2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003da6:	e9db 2300 	ldrd	r2, r3, [fp]
 8003daa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003dae:	d111      	bne.n	8003dd4 <__ieee754_sqrt+0x178>
 8003db0:	4655      	mov	r5, sl
 8003db2:	3601      	adds	r6, #1
 8003db4:	1072      	asrs	r2, r6, #1
 8003db6:	086b      	lsrs	r3, r5, #1
 8003db8:	07f1      	lsls	r1, r6, #31
 8003dba:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8003dbe:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8003dc2:	bf48      	it	mi
 8003dc4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8003dc8:	4618      	mov	r0, r3
 8003dca:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8003dce:	e757      	b.n	8003c80 <__ieee754_sqrt+0x24>
 8003dd0:	4696      	mov	lr, r2
 8003dd2:	e7be      	b.n	8003d52 <__ieee754_sqrt+0xf6>
 8003dd4:	f7fc f9ca 	bl	800016c <__adddf3>
 8003dd8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4640      	mov	r0, r8
 8003de2:	4649      	mov	r1, r9
 8003de4:	f7fc fdea 	bl	80009bc <__aeabi_dcmplt>
 8003de8:	b120      	cbz	r0, 8003df4 <__ieee754_sqrt+0x198>
 8003dea:	1ca8      	adds	r0, r5, #2
 8003dec:	bf08      	it	eq
 8003dee:	3601      	addeq	r6, #1
 8003df0:	3502      	adds	r5, #2
 8003df2:	e7df      	b.n	8003db4 <__ieee754_sqrt+0x158>
 8003df4:	1c6b      	adds	r3, r5, #1
 8003df6:	f023 0501 	bic.w	r5, r3, #1
 8003dfa:	e7db      	b.n	8003db4 <__ieee754_sqrt+0x158>
 8003dfc:	7ff00000 	.word	0x7ff00000
 8003e00:	20000068 	.word	0x20000068
 8003e04:	20000060 	.word	0x20000060

08003e08 <_init>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	bf00      	nop
 8003e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0e:	bc08      	pop	{r3}
 8003e10:	469e      	mov	lr, r3
 8003e12:	4770      	bx	lr

08003e14 <_fini>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	bf00      	nop
 8003e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1a:	bc08      	pop	{r3}
 8003e1c:	469e      	mov	lr, r3
 8003e1e:	4770      	bx	lr
