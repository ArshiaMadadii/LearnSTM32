
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b430  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800b540  0800b540  0000c540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb70  0800bb70  0000d1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb70  0800bb70  0000cb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb78  0800bb78  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb78  0800bb78  0000cb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb7c  0800bb7c  0000cb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800bb80  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  200001f0  0800bd70  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b88  0800bd70  0000db88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010533  00000000  00000000  0000d219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f9  00000000  00000000  0001d74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00020148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cba  00000000  00000000  00021198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197f7  00000000  00000000  00021e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e4b  00000000  00000000  0003b649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef32  00000000  00000000  0004e494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd3c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc8  00000000  00000000  000dd40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e2fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b528 	.word	0x0800b528

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800b528 	.word	0x0800b528

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000bd4:	b4b0      	push	{r4, r5, r7}
 8000bd6:	b08f      	sub	sp, #60	@ 0x3c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000bdc:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000be2:	2307      	movs	r3, #7
 8000be4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000be8:	2307      	movs	r3, #7
 8000bea:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000bf4:	23ff      	movs	r3, #255	@ 0xff
 8000bf6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000bfa:	2364      	movs	r3, #100	@ 0x64
 8000bfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000c00:	2308      	movs	r3, #8
 8000c02:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	461d      	mov	r5, r3
 8000c08:	f107 040c 	add.w	r4, r7, #12
 8000c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	373c      	adds	r7, #60	@ 0x3c
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bcb0      	pop	{r4, r5, r7}
 8000c24:	4770      	bx	lr

08000c26 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b084      	sub	sp, #16
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000c30:	2101      	movs	r1, #1
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f9ff 	bl	8001036 <LoRa_read>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000c3c:	7bbb      	ldrb	r3, [r7, #14]
 8000c3e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d107      	bne.n	8000c56 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000c46:	7bbb      	ldrb	r3, [r7, #14]
 8000c48:	f023 0307 	bic.w	r3, r3, #7
 8000c4c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
 8000c54:	e03e      	b.n	8000cd4 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d10c      	bne.n	8000c76 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c60:	f023 0307 	bic.w	r3, r3, #7
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	61da      	str	r2, [r3, #28]
 8000c74:	e02e      	b.n	8000cd4 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d10c      	bne.n	8000c96 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c80:	f023 0307 	bic.w	r3, r3, #7
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	f043 0303 	orr.w	r3, r3, #3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2203      	movs	r2, #3
 8000c92:	61da      	str	r2, [r3, #28]
 8000c94:	e01e      	b.n	8000cd4 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d10c      	bne.n	8000cb6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ca0:	f023 0307 	bic.w	r3, r3, #7
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	f043 0305 	orr.w	r3, r3, #5
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2205      	movs	r2, #5
 8000cb2:	61da      	str	r2, [r3, #28]
 8000cb4:	e00e      	b.n	8000cd4 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d10b      	bne.n	8000cd4 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cc0:	f023 0307 	bic.w	r3, r3, #7
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	f043 0306 	orr.w	r3, r3, #6
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2206      	movs	r2, #6
 8000cd2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2101      	movs	r1, #1
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f9c5 	bl	800106a <LoRa_write>
	//HAL_Delay(10);
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	889b      	ldrh	r3, [r3, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	f002 febb 	bl	8003a7e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	6998      	ldr	r0, [r3, #24]
 8000d0c:	88fa      	ldrh	r2, [r7, #6]
 8000d0e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	f003 fb82 	bl	800441c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d18:	bf00      	nop
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 ff82 	bl	8004c28 <HAL_SPI_GetState>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d1f7      	bne.n	8000d1a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	6998      	ldr	r0, [r3, #24]
 8000d2e:	8b3a      	ldrh	r2, [r7, #24]
 8000d30:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d34:	6839      	ldr	r1, [r7, #0]
 8000d36:	f003 fcb5 	bl	80046a4 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d3a:	bf00      	nop
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 ff71 	bl	8004c28 <HAL_SPI_GetState>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d1f7      	bne.n	8000d3c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	889b      	ldrh	r3, [r3, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	4619      	mov	r1, r3
 8000d58:	f002 fe91 	bl	8003a7e <HAL_GPIO_WritePin>
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	4613      	mov	r3, r2
 8000d72:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	889b      	ldrh	r3, [r3, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f002 fe7d 	bl	8003a7e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6998      	ldr	r0, [r3, #24]
 8000d88:	88fa      	ldrh	r2, [r7, #6]
 8000d8a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	f003 fb44 	bl	800441c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d94:	bf00      	nop
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 ff44 	bl	8004c28 <HAL_SPI_GetState>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d1f7      	bne.n	8000d96 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6998      	ldr	r0, [r3, #24]
 8000daa:	8b3a      	ldrh	r2, [r7, #24]
 8000dac:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000db0:	6839      	ldr	r1, [r7, #0]
 8000db2:	f003 fb33 	bl	800441c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000db6:	bf00      	nop
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f003 ff33 	bl	8004c28 <HAL_SPI_GetState>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d1f7      	bne.n	8000db8 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	889b      	ldrh	r3, [r3, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f002 fe53 	bl	8003a7e <HAL_GPIO_WritePin>
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000dec:	2126      	movs	r1, #38	@ 0x26
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f921 	bl	8001036 <LoRa_read>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d004      	beq.n	8000e08 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e003      	b.n	8000e10 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	f023 0308 	bic.w	r3, r3, #8
 8000e0e:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	461a      	mov	r2, r3
 8000e14:	2126      	movs	r1, #38	@ 0x26
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f927 	bl	800106a <LoRa_write>
	HAL_Delay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f002 faaf 	bl	8003380 <HAL_Delay>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	@ 0x58
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000e34:	4a17      	ldr	r2, [pc, #92]	@ (8000e94 <LoRa_setAutoLDO+0x68>)
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	2250      	movs	r2, #80	@ 0x50
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f006 f9a3 	bl	800718a <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fad7 	bl	8000404 <__aeabi_i2d>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	3358      	adds	r3, #88	@ 0x58
 8000e60:	443b      	add	r3, r7
 8000e62:	3b50      	subs	r3, #80	@ 0x50
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	f7ff fc60 	bl	800072c <__aeabi_ddiv>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff fde0 	bl	8000a38 <__aeabi_d2iz>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b10      	cmp	r3, #16
 8000e7c:	bfcc      	ite	gt
 8000e7e:	2301      	movgt	r3, #1
 8000e80:	2300      	movle	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffaa 	bl	8000de0 <LoRa_setLowDaraRateOptimization>
}
 8000e8c:	bf00      	nop
 8000e8e:	3758      	adds	r7, #88	@ 0x58
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	0800b540 	.word	0x0800b540

08000e98 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	04db      	lsls	r3, r3, #19
 8000ea6:	115b      	asrs	r3, r3, #5
 8000ea8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	0c1b      	lsrs	r3, r3, #16
 8000eae:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000eb0:	7afb      	ldrb	r3, [r7, #11]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	2106      	movs	r1, #6
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f8d7 	bl	800106a <LoRa_write>
	HAL_Delay(5);
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	f002 fa5f 	bl	8003380 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000ec8:	7afb      	ldrb	r3, [r7, #11]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	2107      	movs	r1, #7
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f8cb 	bl	800106a <LoRa_write>
	HAL_Delay(5);
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	f002 fa53 	bl	8003380 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000ede:	7afb      	ldrb	r3, [r7, #11]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f8c0 	bl	800106a <LoRa_write>
	HAL_Delay(5);
 8000eea:	2005      	movs	r0, #5
 8000eec:	f002 fa48 	bl	8003380 <HAL_Delay>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2b0c      	cmp	r3, #12
 8000f06:	dd01      	ble.n	8000f0c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	dc01      	bgt.n	8000f16 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000f12:	2307      	movs	r3, #7
 8000f14:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000f16:	211e      	movs	r1, #30
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 f88c 	bl	8001036 <LoRa_read>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000f22:	200a      	movs	r0, #10
 8000f24:	f002 fa2c 	bl	8003380 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4413      	add	r3, r2
 8000f3a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	211e      	movs	r1, #30
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f891 	bl	800106a <LoRa_write>
	HAL_Delay(10);
 8000f48:	200a      	movs	r0, #10
 8000f4a:	f002 fa19 	bl	8003380 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff6c 	bl	8000e2c <LoRa_setAutoLDO>
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2109      	movs	r1, #9
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f87b 	bl	800106a <LoRa_write>
	HAL_Delay(10);
 8000f74:	200a      	movs	r0, #10
 8000f76:	f002 fa03 	bl	8003380 <HAL_Delay>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f98:	d801      	bhi.n	8000f9e <LoRa_setOCP+0x1a>
		current = 45;
 8000f9a:	232d      	movs	r3, #45	@ 0x2d
 8000f9c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fa2:	d901      	bls.n	8000fa8 <LoRa_setOCP+0x24>
		current = 240;
 8000fa4:	23f0      	movs	r3, #240	@ 0xf0
 8000fa6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	2b78      	cmp	r3, #120	@ 0x78
 8000fac:	d809      	bhi.n	8000fc2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	3b2d      	subs	r3, #45	@ 0x2d
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <LoRa_setOCP+0x78>)
 8000fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb8:	1052      	asrs	r2, r2, #1
 8000fba:	17db      	asrs	r3, r3, #31
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e00b      	b.n	8000fda <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fc6:	d808      	bhi.n	8000fda <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	331e      	adds	r3, #30
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <LoRa_setOCP+0x78>)
 8000fce:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd2:	1092      	asrs	r2, r2, #2
 8000fd4:	17db      	asrs	r3, r3, #31
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	3320      	adds	r3, #32
 8000fde:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	210b      	movs	r1, #11
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f83f 	bl	800106a <LoRa_write>
	HAL_Delay(10);
 8000fec:	200a      	movs	r0, #10
 8000fee:	f002 f9c7 	bl	8003380 <HAL_Delay>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	66666667 	.word	0x66666667

08001000 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001008:	211e      	movs	r1, #30
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f813 	bl	8001036 <LoRa_read>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f043 0307 	orr.w	r3, r3, #7
 800101a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	461a      	mov	r2, r3
 8001020:	211e      	movs	r1, #30
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f821 	bl	800106a <LoRa_write>
	HAL_Delay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f002 f9a9 	bl	8003380 <HAL_Delay>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af02      	add	r7, sp, #8
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	460b      	mov	r3, r1
 8001040:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800104c:	f107 030f 	add.w	r3, r7, #15
 8001050:	f107 010e 	add.w	r1, r7, #14
 8001054:	2201      	movs	r2, #1
 8001056:	9200      	str	r2, [sp, #0]
 8001058:	2201      	movs	r2, #1
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fe44 	bl	8000ce8 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af02      	add	r7, sp, #8
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	70fb      	strb	r3, [r7, #3]
 8001076:	4613      	mov	r3, r2
 8001078:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001080:	b2db      	uxtb	r3, r3
 8001082:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001084:	78bb      	ldrb	r3, [r7, #2]
 8001086:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001088:	f107 030f 	add.w	r3, r7, #15
 800108c:	f107 010e 	add.w	r1, r7, #14
 8001090:	2201      	movs	r2, #1
 8001092:	9200      	str	r2, [sp, #0]
 8001094:	2201      	movs	r2, #1
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fe64 	bl	8000d64 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	461a      	mov	r2, r3
 80010b0:	460b      	mov	r3, r1
 80010b2:	72fb      	strb	r3, [r7, #11]
 80010b4:	4613      	mov	r3, r2
 80010b6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	889b      	ldrh	r3, [r3, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	f002 fcd6 	bl	8003a7e <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6998      	ldr	r0, [r3, #24]
 80010d6:	f107 0117 	add.w	r1, r7, #23
 80010da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010de:	2201      	movs	r2, #1
 80010e0:	f003 f99c 	bl	800441c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80010e4:	bf00      	nop
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fd9c 	bl	8004c28 <HAL_SPI_GetState>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d1f7      	bne.n	80010e6 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6998      	ldr	r0, [r3, #24]
 80010fa:	7abb      	ldrb	r3, [r7, #10]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	f003 f98a 	bl	800441c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001108:	bf00      	nop
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fd8a 	bl	8004c28 <HAL_SPI_GetState>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d1f7      	bne.n	800110a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	889b      	ldrh	r3, [r3, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	f002 fcaa 	bl	8003a7e <HAL_GPIO_WritePin>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]

	return 1;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	4611      	mov	r1, r2
 8001152:	461a      	mov	r2, r3
 8001154:	460b      	mov	r3, r1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	4613      	mov	r3, r2
 800115a:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001162:	2101      	movs	r1, #1
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff fd5e 	bl	8000c26 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800116a:	210e      	movs	r1, #14
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff ff62 	bl	8001036 <LoRa_read>
 8001172:	4603      	mov	r3, r0
 8001174:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001176:	7cfb      	ldrb	r3, [r7, #19]
 8001178:	461a      	mov	r2, r3
 800117a:	210d      	movs	r1, #13
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f7ff ff74 	bl	800106a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	461a      	mov	r2, r3
 8001186:	2122      	movs	r1, #34	@ 0x22
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff ff6e 	bl	800106a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	2100      	movs	r1, #0
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f7ff ff85 	bl	80010a4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800119a:	2103      	movs	r1, #3
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fd42 	bl	8000c26 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80011a2:	2112      	movs	r1, #18
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff ff46 	bl	8001036 <LoRa_read>
 80011aa:	4603      	mov	r3, r0
 80011ac:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80011ae:	7cfb      	ldrb	r3, [r7, #19]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00a      	beq.n	80011ce <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80011b8:	22ff      	movs	r2, #255	@ 0xff
 80011ba:	2112      	movs	r1, #18
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f7ff ff54 	bl	800106a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80011c2:	6979      	ldr	r1, [r7, #20]
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff fd2e 	bl	8000c26 <LoRa_gotoMode>
			return 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80011ce:	88bb      	ldrh	r3, [r7, #4]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	80bb      	strh	r3, [r7, #4]
 80011d4:	88bb      	ldrh	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d105      	bne.n	80011e6 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80011da:	6979      	ldr	r1, [r7, #20]
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f7ff fd22 	bl	8000c26 <LoRa_gotoMode>
				return 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e003      	b.n	80011ee <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f002 f8ca 	bl	8003380 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80011ec:	e7d9      	b.n	80011a2 <LoRa_transmit+0x5c>
	}
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff97 	bl	8001132 <LoRa_isvalid>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 8096 	beq.w	8001338 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800120c:	2100      	movs	r1, #0
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fd09 	bl	8000c26 <LoRa_gotoMode>
			HAL_Delay(10);
 8001214:	200a      	movs	r0, #10
 8001216:	f002 f8b3 	bl	8003380 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800121a:	2101      	movs	r1, #1
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff0a 	bl	8001036 <LoRa_read>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f002 f8aa 	bl	8003380 <HAL_Delay>
			data = read | 0x80;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001232:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	461a      	mov	r2, r3
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff15 	bl	800106a <LoRa_write>
			HAL_Delay(100);
 8001240:	2064      	movs	r0, #100	@ 0x64
 8001242:	f002 f89d 	bl	8003380 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4619      	mov	r1, r3
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fe23 	bl	8000e98 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001258:	4619      	mov	r1, r3
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fe7e 	bl	8000f5c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001266:	4619      	mov	r1, r3
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fe8b 	bl	8000f84 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800126e:	2223      	movs	r2, #35	@ 0x23
 8001270:	210c      	movs	r1, #12
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fef9 	bl	800106a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fec1 	bl	8001000 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fe36 	bl	8000ef8 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800128c:	22ff      	movs	r2, #255	@ 0xff
 800128e:	211f      	movs	r1, #31
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff feea 	bl	800106a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	461a      	mov	r2, r3
 80012b6:	211d      	movs	r1, #29
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fed6 	bl	800106a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fdb4 	bl	8000e2c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	2120      	movs	r1, #32
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fec9 	bl	800106a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	2121      	movs	r1, #33	@ 0x21
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fec1 	bl	800106a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80012e8:	2140      	movs	r1, #64	@ 0x40
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fea3 	bl	8001036 <LoRa_read>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80012fa:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	461a      	mov	r2, r3
 8001300:	2140      	movs	r1, #64	@ 0x40
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff feb1 	bl	800106a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001308:	2101      	movs	r1, #1
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fc8b 	bl	8000c26 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001316:	200a      	movs	r0, #10
 8001318:	f002 f832 	bl	8003380 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800131c:	2142      	movs	r1, #66	@ 0x42
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fe89 	bl	8001036 <LoRa_read>
 8001324:	4603      	mov	r3, r0
 8001326:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	2b12      	cmp	r3, #18
 800132c:	d101      	bne.n	8001332 <LoRa_init+0x13c>
				return LORA_OK;
 800132e:	23c8      	movs	r3, #200	@ 0xc8
 8001330:	e004      	b.n	800133c <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001332:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001336:	e001      	b.n	800133c <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001338:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8001344:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001348:	b08c      	sub	sp, #48	@ 0x30
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001350:	4b5b      	ldr	r3, [pc, #364]	@ (80014c0 <decodeGGA+0x17c>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800135a:	e004      	b.n	8001366 <decodeGGA+0x22>
 800135c:	4b58      	ldr	r3, [pc, #352]	@ (80014c0 <decodeGGA+0x17c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a57      	ldr	r2, [pc, #348]	@ (80014c0 <decodeGGA+0x17c>)
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b56      	ldr	r3, [pc, #344]	@ (80014c0 <decodeGGA+0x17c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b2c      	cmp	r3, #44	@ 0x2c
 8001374:	d1f2      	bne.n	800135c <decodeGGA+0x18>
	inx++;
 8001376:	4b52      	ldr	r3, [pc, #328]	@ (80014c0 <decodeGGA+0x17c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a50      	ldr	r2, [pc, #320]	@ (80014c0 <decodeGGA+0x17c>)
 800137e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001380:	e004      	b.n	800138c <decodeGGA+0x48>
 8001382:	4b4f      	ldr	r3, [pc, #316]	@ (80014c0 <decodeGGA+0x17c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a4d      	ldr	r2, [pc, #308]	@ (80014c0 <decodeGGA+0x17c>)
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b4c      	ldr	r3, [pc, #304]	@ (80014c0 <decodeGGA+0x17c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b2c      	cmp	r3, #44	@ 0x2c
 800139a:	d1f2      	bne.n	8001382 <decodeGGA+0x3e>
	inx++;
 800139c:	4b48      	ldr	r3, [pc, #288]	@ (80014c0 <decodeGGA+0x17c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	4a47      	ldr	r2, [pc, #284]	@ (80014c0 <decodeGGA+0x17c>)
 80013a4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 80013a6:	e004      	b.n	80013b2 <decodeGGA+0x6e>
 80013a8:	4b45      	ldr	r3, [pc, #276]	@ (80014c0 <decodeGGA+0x17c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a44      	ldr	r2, [pc, #272]	@ (80014c0 <decodeGGA+0x17c>)
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b43      	ldr	r3, [pc, #268]	@ (80014c0 <decodeGGA+0x17c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b2c      	cmp	r3, #44	@ 0x2c
 80013c0:	d1f2      	bne.n	80013a8 <decodeGGA+0x64>
	inx++;
 80013c2:	4b3f      	ldr	r3, [pc, #252]	@ (80014c0 <decodeGGA+0x17c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a3d      	ldr	r2, [pc, #244]	@ (80014c0 <decodeGGA+0x17c>)
 80013ca:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 80013cc:	e004      	b.n	80013d8 <decodeGGA+0x94>
 80013ce:	4b3c      	ldr	r3, [pc, #240]	@ (80014c0 <decodeGGA+0x17c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a3a      	ldr	r2, [pc, #232]	@ (80014c0 <decodeGGA+0x17c>)
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b39      	ldr	r3, [pc, #228]	@ (80014c0 <decodeGGA+0x17c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b2c      	cmp	r3, #44	@ 0x2c
 80013e6:	d1f2      	bne.n	80013ce <decodeGGA+0x8a>
	inx++;
 80013e8:	4b35      	ldr	r3, [pc, #212]	@ (80014c0 <decodeGGA+0x17c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a34      	ldr	r2, [pc, #208]	@ (80014c0 <decodeGGA+0x17c>)
 80013f0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 80013f2:	e004      	b.n	80013fe <decodeGGA+0xba>
 80013f4:	4b32      	ldr	r3, [pc, #200]	@ (80014c0 <decodeGGA+0x17c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a31      	ldr	r2, [pc, #196]	@ (80014c0 <decodeGGA+0x17c>)
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b30      	ldr	r3, [pc, #192]	@ (80014c0 <decodeGGA+0x17c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b2c      	cmp	r3, #44	@ 0x2c
 800140c:	d1f2      	bne.n	80013f4 <decodeGGA+0xb0>
	inx++;
 800140e:	4b2c      	ldr	r3, [pc, #176]	@ (80014c0 <decodeGGA+0x17c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a2a      	ldr	r2, [pc, #168]	@ (80014c0 <decodeGGA+0x17c>)
 8001416:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001418:	e004      	b.n	8001424 <decodeGGA+0xe0>
 800141a:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <decodeGGA+0x17c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a27      	ldr	r2, [pc, #156]	@ (80014c0 <decodeGGA+0x17c>)
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b26      	ldr	r3, [pc, #152]	@ (80014c0 <decodeGGA+0x17c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b2c      	cmp	r3, #44	@ 0x2c
 8001432:	d1f2      	bne.n	800141a <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001434:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <decodeGGA+0x17c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	4a21      	ldr	r2, [pc, #132]	@ (80014c0 <decodeGGA+0x17c>)
 800143c:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 800143e:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <decodeGGA+0x17c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b31      	cmp	r3, #49	@ 0x31
 800144c:	d00f      	beq.n	800146e <decodeGGA+0x12a>
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <decodeGGA+0x17c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b32      	cmp	r3, #50	@ 0x32
 800145c:	d007      	beq.n	800146e <decodeGGA+0x12a>
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <decodeGGA+0x17c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b36      	cmp	r3, #54	@ 0x36
 800146c:	d106      	bne.n	800147c <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2201      	movs	r2, #1
 8001472:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <decodeGGA+0x17c>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800147a:	e009      	b.n	8001490 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001482:	2301      	movs	r3, #1
 8001484:	e2f2      	b.n	8001a6c <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <decodeGGA+0x17c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	4a0c      	ldr	r2, [pc, #48]	@ (80014c0 <decodeGGA+0x17c>)
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <decodeGGA+0x17c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b2c      	cmp	r3, #44	@ 0x2c
 800149e:	d1f2      	bne.n	8001486 <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 80014a0:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <decodeGGA+0x17c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a06      	ldr	r2, [pc, #24]	@ (80014c0 <decodeGGA+0x17c>)
 80014a8:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	220c      	movs	r2, #12
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 fdc5 	bl	8007042 <memset>
	i=0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80014bc:	e016      	b.n	80014ec <decodeGGA+0x1a8>
 80014be:	bf00      	nop
 80014c0:	2000020c 	.word	0x2000020c
	{
		buffer[i] = GGAbuffer[inx];
 80014c4:	4ba7      	ldr	r3, [pc, #668]	@ (8001764 <decodeGGA+0x420>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	7819      	ldrb	r1, [r3, #0]
 80014d0:	f107 020c 	add.w	r2, r7, #12
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d6:	4413      	add	r3, r2
 80014d8:	460a      	mov	r2, r1
 80014da:	701a      	strb	r2, [r3, #0]
		i++;
 80014dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014de:	3301      	adds	r3, #1
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80014e2:	4ba0      	ldr	r3, [pc, #640]	@ (8001764 <decodeGGA+0x420>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	4a9e      	ldr	r2, [pc, #632]	@ (8001764 <decodeGGA+0x420>)
 80014ea:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80014ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001764 <decodeGGA+0x420>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b2c      	cmp	r3, #44	@ 0x2c
 80014fa:	d1e3      	bne.n	80014c4 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4618      	mov	r0, r3
 8001502:	f004 fd83 	bl	800600c <atoi>
 8001506:	4603      	mov	r3, r0
 8001508:	4a97      	ldr	r2, [pc, #604]	@ (8001768 <decodeGGA+0x424>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	1312      	asrs	r2, r2, #12
 8001510:	17db      	asrs	r3, r3, #31
 8001512:	1ad2      	subs	r2, r2, r3
 8001514:	4b95      	ldr	r3, [pc, #596]	@ (800176c <decodeGGA+0x428>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4995      	ldr	r1, [pc, #596]	@ (8001770 <decodeGGA+0x42c>)
 800151a:	fb81 0103 	smull	r0, r1, r1, r3
 800151e:	1149      	asrs	r1, r1, #5
 8001520:	17db      	asrs	r3, r3, #31
 8001522:	1acb      	subs	r3, r1, r3
 8001524:	4413      	add	r3, r2
 8001526:	4a93      	ldr	r2, [pc, #588]	@ (8001774 <decodeGGA+0x430>)
 8001528:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fd6c 	bl	800600c <atoi>
 8001534:	4603      	mov	r3, r0
 8001536:	4a8e      	ldr	r2, [pc, #568]	@ (8001770 <decodeGGA+0x42c>)
 8001538:	fb82 1203 	smull	r1, r2, r2, r3
 800153c:	1152      	asrs	r2, r2, #5
 800153e:	17db      	asrs	r3, r3, #31
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	4a8b      	ldr	r2, [pc, #556]	@ (8001770 <decodeGGA+0x42c>)
 8001544:	fb82 1203 	smull	r1, r2, r2, r3
 8001548:	1151      	asrs	r1, r2, #5
 800154a:	17da      	asrs	r2, r3, #31
 800154c:	1a8a      	subs	r2, r1, r2
 800154e:	2164      	movs	r1, #100	@ 0x64
 8001550:	fb01 f202 	mul.w	r2, r1, r2
 8001554:	1a9a      	subs	r2, r3, r2
 8001556:	4b85      	ldr	r3, [pc, #532]	@ (800176c <decodeGGA+0x428>)
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	4b85      	ldr	r3, [pc, #532]	@ (8001770 <decodeGGA+0x42c>)
 800155c:	fb83 0301 	smull	r0, r3, r3, r1
 8001560:	1158      	asrs	r0, r3, #5
 8001562:	17cb      	asrs	r3, r1, #31
 8001564:	1ac3      	subs	r3, r0, r3
 8001566:	2064      	movs	r0, #100	@ 0x64
 8001568:	fb00 f303 	mul.w	r3, r0, r3
 800156c:	1acb      	subs	r3, r1, r3
 800156e:	4413      	add	r3, r2
 8001570:	4a81      	ldr	r2, [pc, #516]	@ (8001778 <decodeGGA+0x434>)
 8001572:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8001574:	4b80      	ldr	r3, [pc, #512]	@ (8001778 <decodeGGA+0x434>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b3b      	cmp	r3, #59	@ 0x3b
 800157a:	dd09      	ble.n	8001590 <decodeGGA+0x24c>
	{
		min = min-60;
 800157c:	4b7e      	ldr	r3, [pc, #504]	@ (8001778 <decodeGGA+0x434>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3b3c      	subs	r3, #60	@ 0x3c
 8001582:	4a7d      	ldr	r2, [pc, #500]	@ (8001778 <decodeGGA+0x434>)
 8001584:	6013      	str	r3, [r2, #0]
		hr++;
 8001586:	4b7b      	ldr	r3, [pc, #492]	@ (8001774 <decodeGGA+0x430>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	4a79      	ldr	r2, [pc, #484]	@ (8001774 <decodeGGA+0x430>)
 800158e:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8001590:	4b78      	ldr	r3, [pc, #480]	@ (8001774 <decodeGGA+0x430>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	da09      	bge.n	80015ac <decodeGGA+0x268>
	{
		hr=24+hr;
 8001598:	4b76      	ldr	r3, [pc, #472]	@ (8001774 <decodeGGA+0x430>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3318      	adds	r3, #24
 800159e:	4a75      	ldr	r2, [pc, #468]	@ (8001774 <decodeGGA+0x430>)
 80015a0:	6013      	str	r3, [r2, #0]
		daychange--;
 80015a2:	4b76      	ldr	r3, [pc, #472]	@ (800177c <decodeGGA+0x438>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	4a74      	ldr	r2, [pc, #464]	@ (800177c <decodeGGA+0x438>)
 80015aa:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 80015ac:	4b71      	ldr	r3, [pc, #452]	@ (8001774 <decodeGGA+0x430>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b17      	cmp	r3, #23
 80015b2:	dd09      	ble.n	80015c8 <decodeGGA+0x284>
	{
		hr=hr-24;
 80015b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001774 <decodeGGA+0x430>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	3b18      	subs	r3, #24
 80015ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001774 <decodeGGA+0x430>)
 80015bc:	6013      	str	r3, [r2, #0]
		daychange++;
 80015be:	4b6f      	ldr	r3, [pc, #444]	@ (800177c <decodeGGA+0x438>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a6d      	ldr	r2, [pc, #436]	@ (800177c <decodeGGA+0x438>)
 80015c6:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80015c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001774 <decodeGGA+0x430>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80015d0:	4b69      	ldr	r3, [pc, #420]	@ (8001778 <decodeGGA+0x434>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	4618      	mov	r0, r3
 80015de:	f004 fd15 	bl	800600c <atoi>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b62      	ldr	r3, [pc, #392]	@ (8001770 <decodeGGA+0x42c>)
 80015e6:	fb83 1302 	smull	r1, r3, r3, r2
 80015ea:	1159      	asrs	r1, r3, #5
 80015ec:	17d3      	asrs	r3, r2, #31
 80015ee:	1acb      	subs	r3, r1, r3
 80015f0:	2164      	movs	r1, #100	@ 0x64
 80015f2:	fb01 f303 	mul.w	r3, r1, r3
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80015fc:	4b59      	ldr	r3, [pc, #356]	@ (8001764 <decodeGGA+0x420>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	4a58      	ldr	r2, [pc, #352]	@ (8001764 <decodeGGA+0x420>)
 8001604:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	220c      	movs	r2, #12
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f005 fd17 	bl	8007042 <memset>
	i=0;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001618:	e013      	b.n	8001642 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 800161a:	4b52      	ldr	r3, [pc, #328]	@ (8001764 <decodeGGA+0x420>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	7819      	ldrb	r1, [r3, #0]
 8001626:	f107 020c 	add.w	r2, r7, #12
 800162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162c:	4413      	add	r3, r2
 800162e:	460a      	mov	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
		i++;
 8001632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001634:	3301      	adds	r3, #1
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001638:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <decodeGGA+0x420>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	4a49      	ldr	r2, [pc, #292]	@ (8001764 <decodeGGA+0x420>)
 8001640:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001642:	4b48      	ldr	r3, [pc, #288]	@ (8001764 <decodeGGA+0x420>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001650:	d1e3      	bne.n	800161a <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fd7a 	bl	8000150 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	2b05      	cmp	r3, #5
 8001660:	d801      	bhi.n	8001666 <decodeGGA+0x322>
 8001662:	2302      	movs	r3, #2
 8001664:	e202      	b.n	8001a6c <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	4618      	mov	r0, r3
 800166c:	f004 fcce 	bl	800600c <atoi>
 8001670:	4603      	mov	r3, r0
 8001672:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001678:	e002      	b.n	8001680 <decodeGGA+0x33c>
 800167a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167c:	3301      	adds	r3, #1
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001680:	f107 020c 	add.w	r2, r7, #12
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001686:	4413      	add	r3, r2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b2e      	cmp	r3, #46	@ 0x2e
 800168c:	d1f5      	bne.n	800167a <decodeGGA+0x336>
	j++;
 800168e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001690:	3301      	adds	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe fd59 	bl	8000150 <strlen>
 800169e:	4602      	mov	r2, r0
 80016a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80016a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a8:	f107 020c 	add.w	r2, r7, #12
 80016ac:	4413      	add	r3, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 fcac 	bl	800600c <atoi>
 80016b4:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80016b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fea2 	bl	8000404 <__aeabi_i2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001780 <decodeGGA+0x43c>)
 80016c6:	f7ff f831 	bl	800072c <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4690      	mov	r8, r2
 80016d0:	4699      	mov	r9, r3
 80016d2:	69f8      	ldr	r0, [r7, #28]
 80016d4:	f7fe fe96 	bl	8000404 <__aeabi_i2d>
 80016d8:	4604      	mov	r4, r0
 80016da:	460d      	mov	r5, r1
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	3302      	adds	r3, #2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fe8f 	bl	8000404 <__aeabi_i2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	f04f 0000 	mov.w	r0, #0
 80016ee:	4925      	ldr	r1, [pc, #148]	@ (8001784 <decodeGGA+0x440>)
 80016f0:	f009 f80a 	bl	800a708 <pow>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4620      	mov	r0, r4
 80016fa:	4629      	mov	r1, r5
 80016fc:	f7ff f816 	bl	800072c <__aeabi_ddiv>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4640      	mov	r0, r8
 8001706:	4649      	mov	r1, r9
 8001708:	f7fe fd30 	bl	800016c <__adddf3>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f9d8 	bl	8000ac8 <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	601a      	str	r2, [r3, #0]
	inx++;  
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <decodeGGA+0x420>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a0e      	ldr	r2, [pc, #56]	@ (8001764 <decodeGGA+0x420>)
 800172a:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 800172c:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <decodeGGA+0x420>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <decodeGGA+0x420>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <decodeGGA+0x420>)
 8001744:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001746:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <decodeGGA+0x420>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	4a05      	ldr	r2, [pc, #20]	@ (8001764 <decodeGGA+0x420>)
 800174e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	220c      	movs	r2, #12
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f005 fc72 	bl	8007042 <memset>
	i=0;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001762:	e025      	b.n	80017b0 <decodeGGA+0x46c>
 8001764:	2000020c 	.word	0x2000020c
 8001768:	68db8bad 	.word	0x68db8bad
 800176c:	20000000 	.word	0x20000000
 8001770:	51eb851f 	.word	0x51eb851f
 8001774:	20000210 	.word	0x20000210
 8001778:	20000214 	.word	0x20000214
 800177c:	20000224 	.word	0x20000224
 8001780:	40590000 	.word	0x40590000
 8001784:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8001788:	4b88      	ldr	r3, [pc, #544]	@ (80019ac <decodeGGA+0x668>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	7819      	ldrb	r1, [r3, #0]
 8001794:	f107 020c 	add.w	r2, r7, #12
 8001798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179a:	4413      	add	r3, r2
 800179c:	460a      	mov	r2, r1
 800179e:	701a      	strb	r2, [r3, #0]
		i++;
 80017a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a2:	3301      	adds	r3, #1
 80017a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80017a6:	4b81      	ldr	r3, [pc, #516]	@ (80019ac <decodeGGA+0x668>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	4a7f      	ldr	r2, [pc, #508]	@ (80019ac <decodeGGA+0x668>)
 80017ae:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80017b0:	4b7e      	ldr	r3, [pc, #504]	@ (80019ac <decodeGGA+0x668>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b2c      	cmp	r3, #44	@ 0x2c
 80017be:	d1e3      	bne.n	8001788 <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4618      	mov	r0, r3
 80017c6:	f004 fc21 	bl	800600c <atoi>
 80017ca:	4603      	mov	r3, r0
 80017cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80017d2:	e002      	b.n	80017da <decodeGGA+0x496>
 80017d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d6:	3301      	adds	r3, #1
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017da:	f107 020c 	add.w	r2, r7, #12
 80017de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80017e6:	d1f5      	bne.n	80017d4 <decodeGGA+0x490>
	j++;
 80017e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ea:	3301      	adds	r3, #1
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fcac 	bl	8000150 <strlen>
 80017f8:	4602      	mov	r2, r0
 80017fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001802:	f107 020c 	add.w	r2, r7, #12
 8001806:	4413      	add	r3, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fbff 	bl	800600c <atoi>
 800180e:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001810:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fdf5 	bl	8000404 <__aeabi_i2d>
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	4b64      	ldr	r3, [pc, #400]	@ (80019b0 <decodeGGA+0x66c>)
 8001820:	f7fe ff84 	bl	800072c <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4690      	mov	r8, r2
 800182a:	4699      	mov	r9, r3
 800182c:	69f8      	ldr	r0, [r7, #28]
 800182e:	f7fe fde9 	bl	8000404 <__aeabi_i2d>
 8001832:	4604      	mov	r4, r0
 8001834:	460d      	mov	r5, r1
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	3302      	adds	r3, #2
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fde2 	bl	8000404 <__aeabi_i2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	f04f 0000 	mov.w	r0, #0
 8001848:	495a      	ldr	r1, [pc, #360]	@ (80019b4 <decodeGGA+0x670>)
 800184a:	f008 ff5d 	bl	800a708 <pow>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4620      	mov	r0, r4
 8001854:	4629      	mov	r1, r5
 8001856:	f7fe ff69 	bl	800072c <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4640      	mov	r0, r8
 8001860:	4649      	mov	r1, r9
 8001862:	f7fe fc83 	bl	800016c <__adddf3>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f92b 	bl	8000ac8 <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	609a      	str	r2, [r3, #8]
	inx++;
 800187c:	4b4b      	ldr	r3, [pc, #300]	@ (80019ac <decodeGGA+0x668>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	4a4a      	ldr	r2, [pc, #296]	@ (80019ac <decodeGGA+0x668>)
 8001884:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8001886:	4b49      	ldr	r3, [pc, #292]	@ (80019ac <decodeGGA+0x668>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	781a      	ldrb	r2, [r3, #0]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001896:	4b45      	ldr	r3, [pc, #276]	@ (80019ac <decodeGGA+0x668>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	4a43      	ldr	r2, [pc, #268]	@ (80019ac <decodeGGA+0x668>)
 800189e:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80018a0:	4b42      	ldr	r3, [pc, #264]	@ (80019ac <decodeGGA+0x668>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	4a41      	ldr	r2, [pc, #260]	@ (80019ac <decodeGGA+0x668>)
 80018a8:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80018aa:	4b40      	ldr	r3, [pc, #256]	@ (80019ac <decodeGGA+0x668>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4a3e      	ldr	r2, [pc, #248]	@ (80019ac <decodeGGA+0x668>)
 80018b2:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80018b4:	4b3d      	ldr	r3, [pc, #244]	@ (80019ac <decodeGGA+0x668>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	4a3c      	ldr	r2, [pc, #240]	@ (80019ac <decodeGGA+0x668>)
 80018bc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	220c      	movs	r2, #12
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f005 fbbb 	bl	8007042 <memset>
	i=0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80018d0:	e013      	b.n	80018fa <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 80018d2:	4b36      	ldr	r3, [pc, #216]	@ (80019ac <decodeGGA+0x668>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	7819      	ldrb	r1, [r3, #0]
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e4:	4413      	add	r3, r2
 80018e6:	460a      	mov	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
		i++;
 80018ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ec:	3301      	adds	r3, #1
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80018f0:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <decodeGGA+0x668>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	4a2d      	ldr	r2, [pc, #180]	@ (80019ac <decodeGGA+0x668>)
 80018f8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80018fa:	4b2c      	ldr	r3, [pc, #176]	@ (80019ac <decodeGGA+0x668>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b2c      	cmp	r3, #44	@ 0x2c
 8001908:	d1e3      	bne.n	80018d2 <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4618      	mov	r0, r3
 8001910:	f004 fb7c 	bl	800600c <atoi>
 8001914:	4602      	mov	r2, r0
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	629a      	str	r2, [r3, #40]	@ 0x28


	/***************** skip HDOP  *********************/
	inx++;
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <decodeGGA+0x668>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	4a22      	ldr	r2, [pc, #136]	@ (80019ac <decodeGGA+0x668>)
 8001922:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001924:	e004      	b.n	8001930 <decodeGGA+0x5ec>
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <decodeGGA+0x668>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	4a1f      	ldr	r2, [pc, #124]	@ (80019ac <decodeGGA+0x668>)
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <decodeGGA+0x668>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b2c      	cmp	r3, #44	@ 0x2c
 800193e:	d1f2      	bne.n	8001926 <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <decodeGGA+0x668>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	4a19      	ldr	r2, [pc, #100]	@ (80019ac <decodeGGA+0x668>)
 8001948:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	220c      	movs	r2, #12
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f005 fb75 	bl	8007042 <memset>
	i=0;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 800195c:	e013      	b.n	8001986 <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <decodeGGA+0x668>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4413      	add	r3, r2
 8001968:	7819      	ldrb	r1, [r3, #0]
 800196a:	f107 020c 	add.w	r2, r7, #12
 800196e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001970:	4413      	add	r3, r2
 8001972:	460a      	mov	r2, r1
 8001974:	701a      	strb	r2, [r3, #0]
		i++;
 8001976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001978:	3301      	adds	r3, #1
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <decodeGGA+0x668>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3301      	adds	r3, #1
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <decodeGGA+0x668>)
 8001984:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <decodeGGA+0x668>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b2c      	cmp	r3, #44	@ 0x2c
 8001994:	d1e3      	bne.n	800195e <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4618      	mov	r0, r3
 800199c:	f004 fb36 	bl	800600c <atoi>
 80019a0:	4603      	mov	r3, r0
 80019a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 80019a8:	e009      	b.n	80019be <decodeGGA+0x67a>
 80019aa:	bf00      	nop
 80019ac:	2000020c 	.word	0x2000020c
 80019b0:	40590000 	.word	0x40590000
 80019b4:	40240000 	.word	0x40240000
 80019b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ba:	3301      	adds	r3, #1
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019be:	f107 020c 	add.w	r2, r7, #12
 80019c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c4:	4413      	add	r3, r2
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80019ca:	d1f5      	bne.n	80019b8 <decodeGGA+0x674>
	j++;
 80019cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ce:	3301      	adds	r3, #1
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fbba 	bl	8000150 <strlen>
 80019dc:	4602      	mov	r2, r0
 80019de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80019e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e6:	f107 020c 	add.w	r2, r7, #12
 80019ea:	4413      	add	r3, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f004 fb0d 	bl	800600c <atoi>
 80019f2:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80019f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fd03 	bl	8000404 <__aeabi_i2d>
 80019fe:	4604      	mov	r4, r0
 8001a00:	460d      	mov	r5, r1
 8001a02:	69f8      	ldr	r0, [r7, #28]
 8001a04:	f7fe fcfe 	bl	8000404 <__aeabi_i2d>
 8001a08:	4680      	mov	r8, r0
 8001a0a:	4689      	mov	r9, r1
 8001a0c:	6a38      	ldr	r0, [r7, #32]
 8001a0e:	f7fe fcf9 	bl	8000404 <__aeabi_i2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	4917      	ldr	r1, [pc, #92]	@ (8001a78 <decodeGGA+0x734>)
 8001a1c:	f008 fe74 	bl	800a708 <pow>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4640      	mov	r0, r8
 8001a26:	4649      	mov	r1, r9
 8001a28:	f7fe fe80 	bl	800072c <__aeabi_ddiv>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	f7fe fb9a 	bl	800016c <__adddf3>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f842 	bl	8000ac8 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	621a      	str	r2, [r3, #32]

	inx++;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <decodeGGA+0x738>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	4a09      	ldr	r2, [pc, #36]	@ (8001a7c <decodeGGA+0x738>)
 8001a56:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001a58:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <decodeGGA+0x738>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return 0;
 8001a6a:	2300      	movs	r3, #0

}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3730      	adds	r7, #48	@ 0x30
 8001a70:	46bd      	mov	sp, r7
 8001a72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a76:	bf00      	nop
 8001a78:	40240000 	.word	0x40240000
 8001a7c:	2000020c 	.word	0x2000020c

08001a80 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001a80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a84:	b090      	sub	sp, #64	@ 0x40
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001a8c:	4b92      	ldr	r3, [pc, #584]	@ (8001cd8 <decodeRMC+0x258>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 8001a96:	e004      	b.n	8001aa2 <decodeRMC+0x22>
 8001a98:	4b8f      	ldr	r3, [pc, #572]	@ (8001cd8 <decodeRMC+0x258>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	4a8e      	ldr	r2, [pc, #568]	@ (8001cd8 <decodeRMC+0x258>)
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8001cd8 <decodeRMC+0x258>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ab0:	d1f2      	bne.n	8001a98 <decodeRMC+0x18>
	inx++;
 8001ab2:	4b89      	ldr	r3, [pc, #548]	@ (8001cd8 <decodeRMC+0x258>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a87      	ldr	r2, [pc, #540]	@ (8001cd8 <decodeRMC+0x258>)
 8001aba:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001abc:	e004      	b.n	8001ac8 <decodeRMC+0x48>
 8001abe:	4b86      	ldr	r3, [pc, #536]	@ (8001cd8 <decodeRMC+0x258>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a84      	ldr	r2, [pc, #528]	@ (8001cd8 <decodeRMC+0x258>)
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b83      	ldr	r3, [pc, #524]	@ (8001cd8 <decodeRMC+0x258>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ad6:	d1f2      	bne.n	8001abe <decodeRMC+0x3e>
	inx++;
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	@ (8001cd8 <decodeRMC+0x258>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a7e      	ldr	r2, [pc, #504]	@ (8001cd8 <decodeRMC+0x258>)
 8001ae0:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8001cd8 <decodeRMC+0x258>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b41      	cmp	r3, #65	@ 0x41
 8001af0:	d10d      	bne.n	8001b0e <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8001af8:	4b77      	ldr	r3, [pc, #476]	@ (8001cd8 <decodeRMC+0x258>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	4a76      	ldr	r2, [pc, #472]	@ (8001cd8 <decodeRMC+0x258>)
 8001b00:	6013      	str	r3, [r2, #0]
	inx++;
 8001b02:	4b75      	ldr	r3, [pc, #468]	@ (8001cd8 <decodeRMC+0x258>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	4a73      	ldr	r2, [pc, #460]	@ (8001cd8 <decodeRMC+0x258>)
 8001b0a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001b0c:	e009      	b.n	8001b22 <decodeRMC+0xa2>
		rmc->isValid =0;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
		return 1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e1d5      	b.n	8001ec4 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001b18:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd8 <decodeRMC+0x258>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	4a6e      	ldr	r2, [pc, #440]	@ (8001cd8 <decodeRMC+0x258>)
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b6d      	ldr	r3, [pc, #436]	@ (8001cd8 <decodeRMC+0x258>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b30:	d1f2      	bne.n	8001b18 <decodeRMC+0x98>
	inx++;
 8001b32:	4b69      	ldr	r3, [pc, #420]	@ (8001cd8 <decodeRMC+0x258>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	4a67      	ldr	r2, [pc, #412]	@ (8001cd8 <decodeRMC+0x258>)
 8001b3a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8001b3c:	e004      	b.n	8001b48 <decodeRMC+0xc8>
 8001b3e:	4b66      	ldr	r3, [pc, #408]	@ (8001cd8 <decodeRMC+0x258>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	4a64      	ldr	r2, [pc, #400]	@ (8001cd8 <decodeRMC+0x258>)
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b63      	ldr	r3, [pc, #396]	@ (8001cd8 <decodeRMC+0x258>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b56:	d1f2      	bne.n	8001b3e <decodeRMC+0xbe>
	inx++;
 8001b58:	4b5f      	ldr	r3, [pc, #380]	@ (8001cd8 <decodeRMC+0x258>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001cd8 <decodeRMC+0x258>)
 8001b60:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8001b62:	e004      	b.n	8001b6e <decodeRMC+0xee>
 8001b64:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd8 <decodeRMC+0x258>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001cd8 <decodeRMC+0x258>)
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd8 <decodeRMC+0x258>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b7c:	d1f2      	bne.n	8001b64 <decodeRMC+0xe4>
	inx++;
 8001b7e:	4b56      	ldr	r3, [pc, #344]	@ (8001cd8 <decodeRMC+0x258>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	4a54      	ldr	r2, [pc, #336]	@ (8001cd8 <decodeRMC+0x258>)
 8001b86:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 8001b88:	e004      	b.n	8001b94 <decodeRMC+0x114>
 8001b8a:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <decodeRMC+0x258>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a51      	ldr	r2, [pc, #324]	@ (8001cd8 <decodeRMC+0x258>)
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b50      	ldr	r3, [pc, #320]	@ (8001cd8 <decodeRMC+0x258>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ba2:	d1f2      	bne.n	8001b8a <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8001ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd8 <decodeRMC+0x258>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd8 <decodeRMC+0x258>)
 8001bac:	6013      	str	r3, [r2, #0]
	i=0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f005 fa41 	bl	8007042 <memset>
	while (RMCbuffer[inx] != ',')
 8001bc0:	e013      	b.n	8001bea <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 8001bc2:	4b45      	ldr	r3, [pc, #276]	@ (8001cd8 <decodeRMC+0x258>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	7819      	ldrb	r1, [r3, #0]
 8001bce:	f107 0208 	add.w	r2, r7, #8
 8001bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bd4:	4413      	add	r3, r2
 8001bd6:	460a      	mov	r2, r1
 8001bd8:	701a      	strb	r2, [r3, #0]
		i++;
 8001bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bdc:	3301      	adds	r3, #1
 8001bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001be0:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd8 <decodeRMC+0x258>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	4a3c      	ldr	r2, [pc, #240]	@ (8001cd8 <decodeRMC+0x258>)
 8001be8:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001bea:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <decodeRMC+0x258>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b2c      	cmp	r3, #44	@ 0x2c
 8001bf8:	d1e3      	bne.n	8001bc2 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d055      	beq.n	8001cb0 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f004 f9ff 	bl	800600c <atoi>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	867b      	strh	r3, [r7, #50]	@ 0x32
		int j = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	63bb      	str	r3, [r7, #56]	@ 0x38
		while (buffer[j] != '.') j++;   // same as above
 8001c16:	e002      	b.n	8001c1e <decodeRMC+0x19e>
 8001c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c1e:	f107 0208 	add.w	r2, r7, #8
 8001c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c24:	4413      	add	r3, r2
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c2a:	d1f5      	bne.n	8001c18 <decodeRMC+0x198>
		j++;
 8001c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c2e:	3301      	adds	r3, #1
 8001c30:	63bb      	str	r3, [r7, #56]	@ 0x38
		int declen = (strlen(buffer))-j;
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fa8a 	bl	8000150 <strlen>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int dec = atoi ((char *) buffer+j);
 8001c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c46:	f107 0208 	add.w	r2, r7, #8
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f004 f9dd 	bl	800600c <atoi>
 8001c52:	62b8      	str	r0, [r7, #40]	@ 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001c54:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fbd3 	bl	8000404 <__aeabi_i2d>
 8001c5e:	4604      	mov	r4, r0
 8001c60:	460d      	mov	r5, r1
 8001c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c64:	f7fe fbce 	bl	8000404 <__aeabi_i2d>
 8001c68:	4680      	mov	r8, r0
 8001c6a:	4689      	mov	r9, r1
 8001c6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c6e:	f7fe fbc9 	bl	8000404 <__aeabi_i2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	f04f 0000 	mov.w	r0, #0
 8001c7a:	4918      	ldr	r1, [pc, #96]	@ (8001cdc <decodeRMC+0x25c>)
 8001c7c:	f008 fd44 	bl	800a708 <pow>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4640      	mov	r0, r8
 8001c86:	4649      	mov	r1, r9
 8001c88:	f7fe fd50 	bl	800072c <__aeabi_ddiv>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4620      	mov	r0, r4
 8001c92:	4629      	mov	r1, r5
 8001c94:	f7fe fa6a 	bl	800016c <__adddf3>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe ff12 	bl	8000ac8 <__aeabi_d2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
		rmc->speed = lat;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	e003      	b.n	8001cb8 <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <decodeRMC+0x258>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	4a06      	ldr	r2, [pc, #24]	@ (8001cd8 <decodeRMC+0x258>)
 8001cc0:	6013      	str	r3, [r2, #0]
	i=0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	220c      	movs	r2, #12
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f005 f9b7 	bl	8007042 <memset>
	while (RMCbuffer[inx] != ',')
 8001cd4:	e018      	b.n	8001d08 <decodeRMC+0x288>
 8001cd6:	bf00      	nop
 8001cd8:	2000020c 	.word	0x2000020c
 8001cdc:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 8001ce0:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed0 <decodeRMC+0x450>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	7819      	ldrb	r1, [r3, #0]
 8001cec:	f107 0208 	add.w	r2, r7, #8
 8001cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cf2:	4413      	add	r3, r2
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	701a      	strb	r2, [r3, #0]
		i++;
 8001cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001cfe:	4b74      	ldr	r3, [pc, #464]	@ (8001ed0 <decodeRMC+0x450>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3301      	adds	r3, #1
 8001d04:	4a72      	ldr	r2, [pc, #456]	@ (8001ed0 <decodeRMC+0x450>)
 8001d06:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001d08:	4b71      	ldr	r3, [pc, #452]	@ (8001ed0 <decodeRMC+0x450>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d16:	d1e3      	bne.n	8001ce0 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 8001d18:	f107 0308 	add.w	r3, r7, #8
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d055      	beq.n	8001dce <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 f970 	bl	800600c <atoi>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	847b      	strh	r3, [r7, #34]	@ 0x22
		int j = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	637b      	str	r3, [r7, #52]	@ 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001d34:	e002      	b.n	8001d3c <decodeRMC+0x2bc>
 8001d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d38:	3301      	adds	r3, #1
 8001d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d3c:	f107 0208 	add.w	r2, r7, #8
 8001d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d42:	4413      	add	r3, r2
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d48:	d1f5      	bne.n	8001d36 <decodeRMC+0x2b6>
		j++;
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	637b      	str	r3, [r7, #52]	@ 0x34
		int declen = (strlen(buffer))-j;
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe f9fb 	bl	8000150 <strlen>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d64:	f107 0208 	add.w	r2, r7, #8
 8001d68:	4413      	add	r3, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 f94e 	bl	800600c <atoi>
 8001d70:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001d72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fb44 	bl	8000404 <__aeabi_i2d>
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	460d      	mov	r5, r1
 8001d80:	69b8      	ldr	r0, [r7, #24]
 8001d82:	f7fe fb3f 	bl	8000404 <__aeabi_i2d>
 8001d86:	4680      	mov	r8, r0
 8001d88:	4689      	mov	r9, r1
 8001d8a:	69f8      	ldr	r0, [r7, #28]
 8001d8c:	f7fe fb3a 	bl	8000404 <__aeabi_i2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	f04f 0000 	mov.w	r0, #0
 8001d98:	494e      	ldr	r1, [pc, #312]	@ (8001ed4 <decodeRMC+0x454>)
 8001d9a:	f008 fcb5 	bl	800a708 <pow>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4640      	mov	r0, r8
 8001da4:	4649      	mov	r1, r9
 8001da6:	f7fe fcc1 	bl	800072c <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4620      	mov	r0, r4
 8001db0:	4629      	mov	r1, r5
 8001db2:	f7fe f9db 	bl	800016c <__adddf3>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe fe83 	bl	8000ac8 <__aeabi_d2f>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	611a      	str	r2, [r3, #16]
 8001dcc:	e003      	b.n	8001dd6 <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed0 <decodeRMC+0x450>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	4a3c      	ldr	r2, [pc, #240]	@ (8001ed0 <decodeRMC+0x450>)
 8001dde:	6013      	str	r3, [r2, #0]
	i=0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	220c      	movs	r2, #12
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f005 f928 	bl	8007042 <memset>
	while (RMCbuffer[inx] != ',')
 8001df2:	e013      	b.n	8001e1c <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 8001df4:	4b36      	ldr	r3, [pc, #216]	@ (8001ed0 <decodeRMC+0x450>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	7819      	ldrb	r1, [r3, #0]
 8001e00:	f107 0208 	add.w	r2, r7, #8
 8001e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e06:	4413      	add	r3, r2
 8001e08:	460a      	mov	r2, r1
 8001e0a:	701a      	strb	r2, [r3, #0]
		i++;
 8001e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e0e:	3301      	adds	r3, #1
 8001e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001e12:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed0 <decodeRMC+0x450>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed0 <decodeRMC+0x450>)
 8001e1a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed0 <decodeRMC+0x450>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b2c      	cmp	r3, #44	@ 0x2c
 8001e2a:	d1e3      	bne.n	8001df4 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 f8eb 	bl	800600c <atoi>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a27      	ldr	r2, [pc, #156]	@ (8001ed8 <decodeRMC+0x458>)
 8001e3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e3e:	1312      	asrs	r2, r2, #12
 8001e40:	17db      	asrs	r3, r3, #31
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4a25      	ldr	r2, [pc, #148]	@ (8001edc <decodeRMC+0x45c>)
 8001e46:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f004 f8dd 	bl	800600c <atoi>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a22      	ldr	r2, [pc, #136]	@ (8001ee0 <decodeRMC+0x460>)
 8001e56:	fb82 1203 	smull	r1, r2, r2, r3
 8001e5a:	1152      	asrs	r2, r2, #5
 8001e5c:	17db      	asrs	r3, r3, #31
 8001e5e:	1ad2      	subs	r2, r2, r3
 8001e60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <decodeRMC+0x460>)
 8001e62:	fb83 1302 	smull	r1, r3, r3, r2
 8001e66:	1159      	asrs	r1, r3, #5
 8001e68:	17d3      	asrs	r3, r2, #31
 8001e6a:	1acb      	subs	r3, r1, r3
 8001e6c:	2164      	movs	r1, #100	@ 0x64
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee4 <decodeRMC+0x464>)
 8001e76:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f004 f8c5 	bl	800600c <atoi>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <decodeRMC+0x460>)
 8001e86:	fb83 1302 	smull	r1, r3, r3, r2
 8001e8a:	1159      	asrs	r1, r3, #5
 8001e8c:	17d3      	asrs	r3, r2, #31
 8001e8e:	1acb      	subs	r3, r1, r3
 8001e90:	2164      	movs	r1, #100	@ 0x64
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	4a13      	ldr	r2, [pc, #76]	@ (8001ee8 <decodeRMC+0x468>)
 8001e9a:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <decodeRMC+0x45c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <decodeRMC+0x46c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <decodeRMC+0x45c>)
 8001ea8:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <decodeRMC+0x45c>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <decodeRMC+0x464>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <decodeRMC+0x468>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	609a      	str	r2, [r3, #8]

	return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3740      	adds	r7, #64	@ 0x40
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000020c 	.word	0x2000020c
 8001ed4:	40240000 	.word	0x40240000
 8001ed8:	68db8bad 	.word	0x68db8bad
 8001edc:	20000218 	.word	0x20000218
 8001ee0:	51eb851f 	.word	0x51eb851f
 8001ee4:	2000021c 	.word	0x2000021c
 8001ee8:	20000220 	.word	0x20000220
 8001eec:	20000224 	.word	0x20000224

08001ef0 <delay_us>:
/* USER CODE BEGIN 0 */
/*********************************** DHT22 Function ***************************/


void delay_us(uint16_t us)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1,0);
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <delay_us+0x2c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8001f02:	bf00      	nop
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <delay_us+0x2c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d3f9      	bcc.n	8001f04 <delay_us+0x14>
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	20000280 	.word	0x20000280

08001f20 <start_signal>:


void start_signal(void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	463b      	mov	r3, r7
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT22_Pin;
 8001f32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f36:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2302      	movs	r3, #2
 8001f42:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8001f44:	463b      	mov	r3, r7
 8001f46:	4619      	mov	r1, r3
 8001f48:	480f      	ldr	r0, [pc, #60]	@ (8001f88 <start_signal+0x68>)
 8001f4a:	f001 fbfd 	bl	8003748 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <start_signal+0x68>)
 8001f56:	f001 fd92 	bl	8003a7e <HAL_GPIO_WritePin>
    HAL_Delay(18);
 8001f5a:	2012      	movs	r0, #18
 8001f5c:	f001 fa10 	bl	8003380 <HAL_Delay>
    HAL_GPIO_WritePin(DHT22_GPIO_Port, DHT22_Pin, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f66:	4808      	ldr	r0, [pc, #32]	@ (8001f88 <start_signal+0x68>)
 8001f68:	f001 fd89 	bl	8003a7e <HAL_GPIO_WritePin>
    delay_us(30); // Wait 20-40μs
 8001f6c:	201e      	movs	r0, #30
 8001f6e:	f7ff ffbf 	bl	8001ef0 <delay_us>

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8001f76:	463b      	mov	r3, r7
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4803      	ldr	r0, [pc, #12]	@ (8001f88 <start_signal+0x68>)
 8001f7c:	f001 fbe4 	bl	8003748 <HAL_GPIO_Init>
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40010c00 	.word	0x40010c00

08001f8c <check_response>:

uint8_t check_response(void) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
    TOUT = 0;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <check_response+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001f96:	4b1b      	ldr	r3, [pc, #108]	@ (8002004 <check_response+0x78>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    while (!HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) && (__HAL_TIM_GET_COUNTER(&htim1) < 100)) {};
 8001f9e:	bf00      	nop
 8001fa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fa4:	4818      	ldr	r0, [pc, #96]	@ (8002008 <check_response+0x7c>)
 8001fa6:	f001 fd53 	bl	8003a50 <HAL_GPIO_ReadPin>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d104      	bne.n	8001fba <check_response+0x2e>
 8001fb0:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <check_response+0x78>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	2b63      	cmp	r3, #99	@ 0x63
 8001fb8:	d9f2      	bls.n	8001fa0 <check_response+0x14>
    if (__HAL_TIM_GET_COUNTER(&htim1) >= 100)
 8001fba:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <check_response+0x78>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	2b63      	cmp	r3, #99	@ 0x63
 8001fc2:	d901      	bls.n	8001fc8 <check_response+0x3c>
        return 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e019      	b.n	8001ffc <check_response+0x70>

    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <check_response+0x78>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin) && (__HAL_TIM_GET_COUNTER(&htim1) < 100)) {};
 8001fd0:	bf00      	nop
 8001fd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fd6:	480c      	ldr	r0, [pc, #48]	@ (8002008 <check_response+0x7c>)
 8001fd8:	f001 fd3a 	bl	8003a50 <HAL_GPIO_ReadPin>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d004      	beq.n	8001fec <check_response+0x60>
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <check_response+0x78>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	2b63      	cmp	r3, #99	@ 0x63
 8001fea:	d9f2      	bls.n	8001fd2 <check_response+0x46>
    if (__HAL_TIM_GET_COUNTER(&htim1) >= 100)
 8001fec:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <check_response+0x78>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	2b63      	cmp	r3, #99	@ 0x63
 8001ff4:	d901      	bls.n	8001ffa <check_response+0x6e>
        return 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <check_response+0x70>

    return 1;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000488 	.word	0x20000488
 8002004:	20000280 	.word	0x20000280
 8002008:	40010c00 	.word	0x40010c00

0800200c <read_byte>:

uint8_t read_byte(void) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
    uint8_t num = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 8; i++) {
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <read_byte+0x80>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	e02d      	b.n	800207a <read_byte+0x6e>
        while (!HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin)) {};
 800201e:	bf00      	nop
 8002020:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002024:	481a      	ldr	r0, [pc, #104]	@ (8002090 <read_byte+0x84>)
 8002026:	f001 fd13 	bl	8003a50 <HAL_GPIO_ReadPin>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f7      	beq.n	8002020 <read_byte+0x14>
        __HAL_TIM_SET_COUNTER(&htim1, 0);
 8002030:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <read_byte+0x88>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2200      	movs	r2, #0
 8002036:	625a      	str	r2, [r3, #36]	@ 0x24
        while (HAL_GPIO_ReadPin(DHT22_GPIO_Port, DHT22_Pin)) {};
 8002038:	bf00      	nop
 800203a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800203e:	4814      	ldr	r0, [pc, #80]	@ (8002090 <read_byte+0x84>)
 8002040:	f001 fd06 	bl	8003a50 <HAL_GPIO_ReadPin>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f7      	bne.n	800203a <read_byte+0x2e>
        if (__HAL_TIM_GET_COUNTER(&htim1) > 40) // 40μs threshold
 800204a:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <read_byte+0x88>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	2b28      	cmp	r3, #40	@ 0x28
 8002052:	d90c      	bls.n	800206e <read_byte+0x62>
            num |= (1 << (7 - i));
 8002054:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <read_byte+0x80>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	f1c3 0307 	rsb	r3, r3, #7
 800205c:	2201      	movs	r2, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	b25a      	sxtb	r2, r3
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4313      	orrs	r3, r2
 800206a:	b25b      	sxtb	r3, r3
 800206c:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 8; i++) {
 800206e:	4b07      	ldr	r3, [pc, #28]	@ (800208c <read_byte+0x80>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b05      	ldr	r3, [pc, #20]	@ (800208c <read_byte+0x80>)
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	4b04      	ldr	r3, [pc, #16]	@ (800208c <read_byte+0x80>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b07      	cmp	r3, #7
 8002080:	d9cd      	bls.n	800201e <read_byte+0x12>
    }
    return num;
 8002082:	79fb      	ldrb	r3, [r7, #7]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	2000048a 	.word	0x2000048a
 8002090:	40010c00 	.word	0x40010c00
 8002094:	20000280 	.word	0x20000280

08002098 <send_uart>:

void send_uart(char *string) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7fe f855 	bl	8000150 <strlen>
 80020a6:	4603      	mov	r3, r0
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4803      	ldr	r0, [pc, #12]	@ (80020c0 <send_uart+0x28>)
 80020b2:	f003 f9e5 	bl	8005480 <HAL_UART_Transmit>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200002c8 	.word	0x200002c8

080020c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020c8:	b0a1      	sub	sp, #132	@ 0x84
 80020ca:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020cc:	f001 f8f6 	bl	80032bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d0:	f000 fad6 	bl	8002680 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  char tx_buffer[] = "No Function";
 80020d4:	4aaf      	ldr	r2, [pc, #700]	@ (8002394 <main+0x2d0>)
 80020d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80020da:	ca07      	ldmia	r2, {r0, r1, r2}
 80020dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e0:	f000 fbea 	bl	80028b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80020e4:	f000 fb94 	bl	8002810 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80020e8:	f000 fbbc 	bl	8002864 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80020ec:	f000 fb0a 	bl	8002704 <MX_SPI1_Init>
  MX_TIM1_Init();
 80020f0:	f000 fb3e 	bl	8002770 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	  /*--------------------------GPS Begin------------------------*/
  Ringbuf_init();
 80020f4:	f000 feac 	bl	8002e50 <Ringbuf_init>
  HAL_Delay(500);
 80020f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020fc:	f001 f940 	bl	8003380 <HAL_Delay>
  uartx_write_text(&huart1, "Hello GPS...\r\n");
 8002100:	49a5      	ldr	r1, [pc, #660]	@ (8002398 <main+0x2d4>)
 8002102:	48a6      	ldr	r0, [pc, #664]	@ (800239c <main+0x2d8>)
 8002104:	f000 fe8d 	bl	8002e22 <uartx_write_text>
  HAL_Delay(500);
 8002108:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800210c:	f001 f938 	bl	8003380 <HAL_Delay>
	  /*--------------------------GPS End--------------------------*/

  	  /*---------------------------LoRa Begin----------------------*/
  myLoRa = newLoRa();
 8002110:	4ca3      	ldr	r4, [pc, #652]	@ (80023a0 <main+0x2dc>)
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fd5c 	bl	8000bd4 <newLoRa>
 800211c:	4625      	mov	r5, r4
 800211e:	f107 0408 	add.w	r4, r7, #8
 8002122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800212a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800212e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8002132:	4b9b      	ldr	r3, [pc, #620]	@ (80023a0 <main+0x2dc>)
 8002134:	4a9b      	ldr	r2, [pc, #620]	@ (80023a4 <main+0x2e0>)
 8002136:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8002138:	4b99      	ldr	r3, [pc, #612]	@ (80023a0 <main+0x2dc>)
 800213a:	2201      	movs	r2, #1
 800213c:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 800213e:	4b98      	ldr	r3, [pc, #608]	@ (80023a0 <main+0x2dc>)
 8002140:	4a98      	ldr	r2, [pc, #608]	@ (80023a4 <main+0x2e0>)
 8002142:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8002144:	4b96      	ldr	r3, [pc, #600]	@ (80023a0 <main+0x2dc>)
 8002146:	2202      	movs	r2, #2
 8002148:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 800214a:	4b95      	ldr	r3, [pc, #596]	@ (80023a0 <main+0x2dc>)
 800214c:	4a95      	ldr	r2, [pc, #596]	@ (80023a4 <main+0x2e0>)
 800214e:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8002150:	4b93      	ldr	r3, [pc, #588]	@ (80023a0 <main+0x2dc>)
 8002152:	2204      	movs	r2, #4
 8002154:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8002156:	4b92      	ldr	r3, [pc, #584]	@ (80023a0 <main+0x2dc>)
 8002158:	4a93      	ldr	r2, [pc, #588]	@ (80023a8 <main+0x2e4>)
 800215a:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 440;             // default = 433 MHz
 800215c:	4b90      	ldr	r3, [pc, #576]	@ (80023a0 <main+0x2dc>)
 800215e:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8002162:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8002164:	4b8e      	ldr	r3, [pc, #568]	@ (80023a0 <main+0x2dc>)
 8002166:	2207      	movs	r2, #7
 8002168:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_31_25KHz;       // default = BW_125KHz
 800216c:	4b8c      	ldr	r3, [pc, #560]	@ (80023a0 <main+0x2dc>)
 800216e:	2204      	movs	r2, #4
 8002170:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8002174:	4b8a      	ldr	r3, [pc, #552]	@ (80023a0 <main+0x2dc>)
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 800217c:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <main+0x2dc>)
 800217e:	22ff      	movs	r2, #255	@ 0xff
 8002180:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8002184:	4b86      	ldr	r3, [pc, #536]	@ (80023a0 <main+0x2dc>)
 8002186:	2282      	movs	r2, #130	@ 0x82
 8002188:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 9;              // default = 8;
 800218c:	4b84      	ldr	r3, [pc, #528]	@ (80023a0 <main+0x2dc>)
 800218e:	2209      	movs	r2, #9
 8002190:	851a      	strh	r2, [r3, #40]	@ 0x28
	   /*---------------------------LoRa End---------------------------*/
  HAL_TIM_Base_Start(&htim1);
 8002192:	4886      	ldr	r0, [pc, #536]	@ (80023ac <main+0x2e8>)
 8002194:	f002 feb0 	bl	8004ef8 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 8002198:	466b      	mov	r3, sp
 800219a:	607b      	str	r3, [r7, #4]
		/*------------------------------DHT22 Begin--------------------------------*/

	  HAL_Delay(1000); // Delay for 1 second
 800219c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021a0:	f001 f8ee 	bl	8003380 <HAL_Delay>
	          start_signal(); // Send start signal to DHT22
 80021a4:	f7ff febc 	bl	8001f20 <start_signal>

	          uint8_t check = check_response();
 80021a8:	f7ff fef0 	bl	8001f8c <check_response>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	          if (!check) {
 80021b2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <main+0xfe>
	              send_uart("No response from the sensor\r\n");
 80021ba:	487d      	ldr	r0, [pc, #500]	@ (80023b0 <main+0x2ec>)
 80021bc:	f7ff ff6c 	bl	8002098 <send_uart>
 80021c0:	e0ae      	b.n	8002320 <main+0x25c>
	          } else {
	              // Read bytes from DHT22
	              RH_Byte1 = read_byte();
 80021c2:	f7ff ff23 	bl	800200c <read_byte>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b7a      	ldr	r3, [pc, #488]	@ (80023b4 <main+0x2f0>)
 80021cc:	701a      	strb	r2, [r3, #0]
	              RH_Byte2 = read_byte();
 80021ce:	f7ff ff1d 	bl	800200c <read_byte>
 80021d2:	4603      	mov	r3, r0
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b78      	ldr	r3, [pc, #480]	@ (80023b8 <main+0x2f4>)
 80021d8:	701a      	strb	r2, [r3, #0]
	              T_Byte1 = read_byte();
 80021da:	f7ff ff17 	bl	800200c <read_byte>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b76      	ldr	r3, [pc, #472]	@ (80023bc <main+0x2f8>)
 80021e4:	701a      	strb	r2, [r3, #0]
	              T_Byte2 = read_byte();
 80021e6:	f7ff ff11 	bl	800200c <read_byte>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b74      	ldr	r3, [pc, #464]	@ (80023c0 <main+0x2fc>)
 80021f0:	701a      	strb	r2, [r3, #0]
	              CheckSum = read_byte();
 80021f2:	f7ff ff0b 	bl	800200c <read_byte>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b72      	ldr	r3, [pc, #456]	@ (80023c4 <main+0x300>)
 80021fc:	701a      	strb	r2, [r3, #0]

	              // Combine humidity and temperature bytes
	              uint16_t rh = (RH_Byte1 << 8) | RH_Byte2;
 80021fe:	4b6d      	ldr	r3, [pc, #436]	@ (80023b4 <main+0x2f0>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	b21a      	sxth	r2, r3
 8002206:	4b6c      	ldr	r3, [pc, #432]	@ (80023b8 <main+0x2f4>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b21b      	sxth	r3, r3
 800220c:	4313      	orrs	r3, r2
 800220e:	b21b      	sxth	r3, r3
 8002210:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	              uint16_t temp = (T_Byte1 << 8) | T_Byte2;
 8002214:	4b69      	ldr	r3, [pc, #420]	@ (80023bc <main+0x2f8>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	b21a      	sxth	r2, r3
 800221c:	4b68      	ldr	r3, [pc, #416]	@ (80023c0 <main+0x2fc>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b21b      	sxth	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	b21b      	sxth	r3, r3
 8002226:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	              uint8_t sign = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	              // Check if temperature is negative
	              if (temp > 0x8000) {
 8002230:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002238:	d908      	bls.n	800224c <main+0x188>
	                  temp &= 0x7FFF; // Clear the sign bit
 800223a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800223e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002242:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	                  sign = 1; // Indicate negative temperature
 8002246:	2301      	movs	r3, #1
 8002248:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	              }

	              char rh_buf[8], temp_buf[8];
	              sprintf(rh_buf, "%2.2u", rh);
 800224c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8002250:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002254:	495c      	ldr	r1, [pc, #368]	@ (80023c8 <main+0x304>)
 8002256:	4618      	mov	r0, r3
 8002258:	f004 fe90 	bl	8006f7c <siprintf>
	              sprintf(temp_buf, "%2.2u", temp);
 800225c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8002260:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002264:	4958      	ldr	r1, [pc, #352]	@ (80023c8 <main+0x304>)
 8002266:	4618      	mov	r0, r3
 8002268:	f004 fe88 	bl	8006f7c <siprintf>

	              // Check checksum
	              if (CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2) & 0xFF))
 800226c:	4b55      	ldr	r3, [pc, #340]	@ (80023c4 <main+0x300>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	4b50      	ldr	r3, [pc, #320]	@ (80023b4 <main+0x2f0>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	4b4f      	ldr	r3, [pc, #316]	@ (80023b8 <main+0x2f4>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4413      	add	r3, r2
 800227e:	4a4f      	ldr	r2, [pc, #316]	@ (80023bc <main+0x2f8>)
 8002280:	7812      	ldrb	r2, [r2, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a4e      	ldr	r2, [pc, #312]	@ (80023c0 <main+0x2fc>)
 8002286:	7812      	ldrb	r2, [r2, #0]
 8002288:	4413      	add	r3, r2
 800228a:	b2db      	uxtb	r3, r3
 800228c:	4299      	cmp	r1, r3
 800228e:	d144      	bne.n	800231a <main+0x256>
	              {
	            	  send_uart("Test Message\r\n");
 8002290:	484e      	ldr	r0, [pc, #312]	@ (80023cc <main+0x308>)
 8002292:	f7ff ff01 	bl	8002098 <send_uart>
	                  sprintf(msg1, "RH = %3u.%1u %% ", rh / 10, rh % 10);
 8002296:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800229a:	4a4d      	ldr	r2, [pc, #308]	@ (80023d0 <main+0x30c>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 80022aa:	4b49      	ldr	r3, [pc, #292]	@ (80023d0 <main+0x30c>)
 80022ac:	fba3 1302 	umull	r1, r3, r3, r2
 80022b0:	08d9      	lsrs	r1, r3, #3
 80022b2:	460b      	mov	r3, r1
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4602      	mov	r2, r0
 80022c0:	4944      	ldr	r1, [pc, #272]	@ (80023d4 <main+0x310>)
 80022c2:	4845      	ldr	r0, [pc, #276]	@ (80023d8 <main+0x314>)
 80022c4:	f004 fe5a 	bl	8006f7c <siprintf>
	                  send_uart(msg1);
 80022c8:	4843      	ldr	r0, [pc, #268]	@ (80023d8 <main+0x314>)
 80022ca:	f7ff fee5 	bl	8002098 <send_uart>
	                  sprintf(msg, "Temp = %c%3u.%1u C \r\n", sign ? '-' : ' ', temp / 10, temp % 10);
 80022ce:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <main+0x216>
 80022d6:	202d      	movs	r0, #45	@ 0x2d
 80022d8:	e000      	b.n	80022dc <main+0x218>
 80022da:	2020      	movs	r0, #32
 80022dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80022e0:	4a3b      	ldr	r2, [pc, #236]	@ (80023d0 <main+0x30c>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	08db      	lsrs	r3, r3, #3
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	461c      	mov	r4, r3
 80022ec:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80022f0:	4b37      	ldr	r3, [pc, #220]	@ (80023d0 <main+0x30c>)
 80022f2:	fba3 1302 	umull	r1, r3, r3, r2
 80022f6:	08d9      	lsrs	r1, r3, #3
 80022f8:	460b      	mov	r3, r1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	b29b      	uxth	r3, r3
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	4623      	mov	r3, r4
 8002308:	4602      	mov	r2, r0
 800230a:	4934      	ldr	r1, [pc, #208]	@ (80023dc <main+0x318>)
 800230c:	4834      	ldr	r0, [pc, #208]	@ (80023e0 <main+0x31c>)
 800230e:	f004 fe35 	bl	8006f7c <siprintf>
	                  send_uart(msg);
 8002312:	4833      	ldr	r0, [pc, #204]	@ (80023e0 <main+0x31c>)
 8002314:	f7ff fec0 	bl	8002098 <send_uart>
 8002318:	e002      	b.n	8002320 <main+0x25c>
	              } else {
	                  send_uart("Checksum Error! Trying Again ...\r\n");
 800231a:	4832      	ldr	r0, [pc, #200]	@ (80023e4 <main+0x320>)
 800231c:	f7ff febc 	bl	8002098 <send_uart>
	              }
	          }
				/*------------------------------DHT22 End--------------------------------*/

	  	/*--------------------------GPS Begin--------------------------*/
	  uartx_write_text(&huart1, "Hello\r\n");
 8002320:	4931      	ldr	r1, [pc, #196]	@ (80023e8 <main+0x324>)
 8002322:	481e      	ldr	r0, [pc, #120]	@ (800239c <main+0x2d8>)
 8002324:	f000 fd7d 	bl	8002e22 <uartx_write_text>

	 	  if (Wait_for("GGA") == 1)
 8002328:	4830      	ldr	r0, [pc, #192]	@ (80023ec <main+0x328>)
 800232a:	f000 febb 	bl	80030a4 <Wait_for>
 800232e:	4603      	mov	r3, r0
 8002330:	2b01      	cmp	r3, #1
 8002332:	d115      	bne.n	8002360 <main+0x29c>
	 	 	  {

	 	 		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 8002334:	4b2e      	ldr	r3, [pc, #184]	@ (80023f0 <main+0x32c>)
 8002336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233a:	601a      	str	r2, [r3, #0]

	 	 		  Copy_upto("*", GGA);
 800233c:	492d      	ldr	r1, [pc, #180]	@ (80023f4 <main+0x330>)
 800233e:	482e      	ldr	r0, [pc, #184]	@ (80023f8 <main+0x334>)
 8002340:	f000 fe30 	bl	8002fa4 <Copy_upto>
	 	 		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 8002344:	492d      	ldr	r1, [pc, #180]	@ (80023fc <main+0x338>)
 8002346:	482b      	ldr	r0, [pc, #172]	@ (80023f4 <main+0x330>)
 8002348:	f7fe fffc 	bl	8001344 <decodeGGA>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <main+0x296>
 8002352:	4b2b      	ldr	r3, [pc, #172]	@ (8002400 <main+0x33c>)
 8002354:	2202      	movs	r2, #2
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e002      	b.n	8002360 <main+0x29c>
	 	 		  else flagGGA = 1;  // 1 indicates the data is invalid
 800235a:	4b29      	ldr	r3, [pc, #164]	@ (8002400 <main+0x33c>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]
	 	 	  }

	 	 	  if (Wait_for("RMC") == 1)
 8002360:	4828      	ldr	r0, [pc, #160]	@ (8002404 <main+0x340>)
 8002362:	f000 fe9f 	bl	80030a4 <Wait_for>
 8002366:	4603      	mov	r3, r0
 8002368:	2b01      	cmp	r3, #1
 800236a:	d156      	bne.n	800241a <main+0x356>
	 	 	  {

	 	 		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 800236c:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <main+0x32c>)
 800236e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002372:	601a      	str	r2, [r3, #0]

	 	 		  Copy_upto("*", RMC);
 8002374:	4924      	ldr	r1, [pc, #144]	@ (8002408 <main+0x344>)
 8002376:	4820      	ldr	r0, [pc, #128]	@ (80023f8 <main+0x334>)
 8002378:	f000 fe14 	bl	8002fa4 <Copy_upto>
	 	 		  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 800237c:	4923      	ldr	r1, [pc, #140]	@ (800240c <main+0x348>)
 800237e:	4822      	ldr	r0, [pc, #136]	@ (8002408 <main+0x344>)
 8002380:	f7ff fb7e 	bl	8001a80 <decodeRMC>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d144      	bne.n	8002414 <main+0x350>
 800238a:	4b21      	ldr	r3, [pc, #132]	@ (8002410 <main+0x34c>)
 800238c:	2202      	movs	r2, #2
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e043      	b.n	800241a <main+0x356>
 8002392:	bf00      	nop
 8002394:	0800b6d8 	.word	0x0800b6d8
 8002398:	0800b590 	.word	0x0800b590
 800239c:	200002c8 	.word	0x200002c8
 80023a0:	20000358 	.word	0x20000358
 80023a4:	40010c00 	.word	0x40010c00
 80023a8:	20000228 	.word	0x20000228
 80023ac:	20000280 	.word	0x20000280
 80023b0:	0800b5a0 	.word	0x0800b5a0
 80023b4:	2000048d 	.word	0x2000048d
 80023b8:	2000048e 	.word	0x2000048e
 80023bc:	2000048b 	.word	0x2000048b
 80023c0:	2000048c 	.word	0x2000048c
 80023c4:	20000489 	.word	0x20000489
 80023c8:	0800b5c0 	.word	0x0800b5c0
 80023cc:	0800b5c8 	.word	0x0800b5c8
 80023d0:	cccccccd 	.word	0xcccccccd
 80023d4:	0800b5d8 	.word	0x0800b5d8
 80023d8:	200004b0 	.word	0x200004b0
 80023dc:	0800b5ec 	.word	0x0800b5ec
 80023e0:	20000490 	.word	0x20000490
 80023e4:	0800b604 	.word	0x0800b604
 80023e8:	0800b628 	.word	0x0800b628
 80023ec:	0800b630 	.word	0x0800b630
 80023f0:	20000004 	.word	0x20000004
 80023f4:	200004d0 	.word	0x200004d0
 80023f8:	0800b634 	.word	0x0800b634
 80023fc:	20000598 	.word	0x20000598
 8002400:	200005dc 	.word	0x200005dc
 8002404:	0800b638 	.word	0x0800b638
 8002408:	20000534 	.word	0x20000534
 800240c:	200005c4 	.word	0x200005c4
 8002410:	200005e0 	.word	0x200005e0
	 	 		  else flagRMC = 1;  // 1 indicates the data is invalid
 8002414:	4b88      	ldr	r3, [pc, #544]	@ (8002638 <main+0x574>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]
	 	 	  }

	 	 	  if((flagGGA == 2 ) | (flagRMC == 2 )){
 800241a:	4b88      	ldr	r3, [pc, #544]	@ (800263c <main+0x578>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b02      	cmp	r3, #2
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2da      	uxtb	r2, r3
 8002428:	4b83      	ldr	r3, [pc, #524]	@ (8002638 <main+0x574>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b02      	cmp	r3, #2
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d03b      	beq.n	80024b6 <main+0x3f2>
	 			  sprintf (lcdBuffer, " %02d:%02d:%02d, %02d%02d%02d", gpsData.ggastruct.tim.hour, \
 800243e:	4b80      	ldr	r3, [pc, #512]	@ (8002640 <main+0x57c>)
 8002440:	691c      	ldr	r4, [r3, #16]
 8002442:	4b7f      	ldr	r3, [pc, #508]	@ (8002640 <main+0x57c>)
 8002444:	695d      	ldr	r5, [r3, #20]
 8002446:	4b7e      	ldr	r3, [pc, #504]	@ (8002640 <main+0x57c>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	4a7d      	ldr	r2, [pc, #500]	@ (8002640 <main+0x57c>)
 800244c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800244e:	497c      	ldr	r1, [pc, #496]	@ (8002640 <main+0x57c>)
 8002450:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8002452:	487b      	ldr	r0, [pc, #492]	@ (8002640 <main+0x57c>)
 8002454:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002456:	9003      	str	r0, [sp, #12]
 8002458:	9102      	str	r1, [sp, #8]
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	462b      	mov	r3, r5
 8002460:	4622      	mov	r2, r4
 8002462:	4978      	ldr	r1, [pc, #480]	@ (8002644 <main+0x580>)
 8002464:	4878      	ldr	r0, [pc, #480]	@ (8002648 <main+0x584>)
 8002466:	f004 fd89 	bl	8006f7c <siprintf>
	 			gpsData.ggastruct.tim.min, gpsData.ggastruct.tim.sec, gpsData.rmcstruct.date.Day, \

	 				gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);

	 			  uartx_write_text(&huart1, lcdBuffer);
 800246a:	4977      	ldr	r1, [pc, #476]	@ (8002648 <main+0x584>)
 800246c:	4877      	ldr	r0, [pc, #476]	@ (800264c <main+0x588>)
 800246e:	f000 fcd8 	bl	8002e22 <uartx_write_text>
	 			  sprintf (lcdBuffer, " \r\n Latitude= %.2f%c, Longitude= %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8002472:	4b73      	ldr	r3, [pc, #460]	@ (8002640 <main+0x57c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fd ffd6 	bl	8000428 <__aeabi_f2d>
 800247c:	4604      	mov	r4, r0
 800247e:	460d      	mov	r5, r1
 8002480:	4b6f      	ldr	r3, [pc, #444]	@ (8002640 <main+0x57c>)
 8002482:	791b      	ldrb	r3, [r3, #4]
 8002484:	461e      	mov	r6, r3
	 	 					  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8002486:	4b6e      	ldr	r3, [pc, #440]	@ (8002640 <main+0x57c>)
 8002488:	689b      	ldr	r3, [r3, #8]
	 			  sprintf (lcdBuffer, " \r\n Latitude= %.2f%c, Longitude= %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd ffcc 	bl	8000428 <__aeabi_f2d>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
	 	 					  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8002494:	496a      	ldr	r1, [pc, #424]	@ (8002640 <main+0x57c>)
 8002496:	7b09      	ldrb	r1, [r1, #12]
	 			  sprintf (lcdBuffer, " \r\n Latitude= %.2f%c, Longitude= %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8002498:	9104      	str	r1, [sp, #16]
 800249a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800249e:	9600      	str	r6, [sp, #0]
 80024a0:	4622      	mov	r2, r4
 80024a2:	462b      	mov	r3, r5
 80024a4:	496a      	ldr	r1, [pc, #424]	@ (8002650 <main+0x58c>)
 80024a6:	4868      	ldr	r0, [pc, #416]	@ (8002648 <main+0x584>)
 80024a8:	f004 fd68 	bl	8006f7c <siprintf>
	 			  uartx_write_text(&huart1, lcdBuffer);
 80024ac:	4966      	ldr	r1, [pc, #408]	@ (8002648 <main+0x584>)
 80024ae:	4867      	ldr	r0, [pc, #412]	@ (800264c <main+0x588>)
 80024b0:	f000 fcb7 	bl	8002e22 <uartx_write_text>
 80024b4:	e019      	b.n	80024ea <main+0x426>
	 	 		  }

	 	 		  else if ((flagGGA == 1) | (flagRMC == 1))
 80024b6:	4b61      	ldr	r3, [pc, #388]	@ (800263c <main+0x578>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002638 <main+0x574>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4313      	orrs	r3, r2
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <main+0x426>
	 	 		  {
	 	 			  // Instead of clearing the display, it's better if we print spaces.
	 	 			  // This will avoid the "refreshing" part
	 				  uartx_write_text(&huart1, "   NO FIX YET   ");
 80024da:	495e      	ldr	r1, [pc, #376]	@ (8002654 <main+0x590>)
 80024dc:	485b      	ldr	r0, [pc, #364]	@ (800264c <main+0x588>)
 80024de:	f000 fca0 	bl	8002e22 <uartx_write_text>

	 				  uartx_write_text(&huart1, "   Please wait  ");
 80024e2:	495d      	ldr	r1, [pc, #372]	@ (8002658 <main+0x594>)
 80024e4:	4859      	ldr	r0, [pc, #356]	@ (800264c <main+0x588>)
 80024e6:	f000 fc9c 	bl	8002e22 <uartx_write_text>

	 	 		  }

	 	 		  if (VCCTimeout <= 0)
 80024ea:	4b5c      	ldr	r3, [pc, #368]	@ (800265c <main+0x598>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	dc12      	bgt.n	8002518 <main+0x454>
	 	 		  {
	 	 			  VCCTimeout = 5000;  // Reset the timeout
 80024f2:	4b5a      	ldr	r3, [pc, #360]	@ (800265c <main+0x598>)
 80024f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f8:	601a      	str	r2, [r3, #0]

	 	 			  //reset flags
	 	 			  flagGGA =flagRMC =0;
 80024fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002638 <main+0x574>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	4b4d      	ldr	r3, [pc, #308]	@ (8002638 <main+0x574>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a4d      	ldr	r2, [pc, #308]	@ (800263c <main+0x578>)
 8002506:	6013      	str	r3, [r2, #0]

	 	 			  // You are here means the VCC is less, or maybe there is some connection issue
	 	 			  // Check the VCC, also you can try connecting to the external 5V


	 				  uartx_write_text(&huart1, "    VCC Issue   ");
 8002508:	4955      	ldr	r1, [pc, #340]	@ (8002660 <main+0x59c>)
 800250a:	4850      	ldr	r0, [pc, #320]	@ (800264c <main+0x588>)
 800250c:	f000 fc89 	bl	8002e22 <uartx_write_text>

	 				  uartx_write_text(&huart1, "Check Connection");
 8002510:	4954      	ldr	r1, [pc, #336]	@ (8002664 <main+0x5a0>)
 8002512:	484e      	ldr	r0, [pc, #312]	@ (800264c <main+0x588>)
 8002514:	f000 fc85 	bl	8002e22 <uartx_write_text>

	 	 		  }


	 	 		  HAL_Delay(1000);
 8002518:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800251c:	f000 ff30 	bl	8003380 <HAL_Delay>

	 	 		 HAL_UART_Transmit(&huart1, (uint8_t *)tx_buffer, strlen(tx_buffer), 1000);
 8002520:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002524:	4618      	mov	r0, r3
 8002526:	f7fd fe13 	bl	8000150 <strlen>
 800252a:	4603      	mov	r3, r0
 800252c:	b29a      	uxth	r2, r3
 800252e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8002532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002536:	4845      	ldr	r0, [pc, #276]	@ (800264c <main+0x588>)
 8002538:	f002 ffa2 	bl	8005480 <HAL_UART_Transmit>
	 	 		  HAL_Delay(1000);
 800253c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002540:	f000 ff1e 	bl	8003380 <HAL_Delay>
  	  	  	  	  /*--------------------------GPS Begin--------------------------*/

	 	  	  	  /*---------------------------LoRa Begin------------------------*/
	 	 		   Rx_Buffer1[128]=0;
 8002544:	4b48      	ldr	r3, [pc, #288]	@ (8002668 <main+0x5a4>)
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	 	 		   Rx_Buffer[128]=0;
 800254c:	4b47      	ldr	r3, [pc, #284]	@ (800266c <main+0x5a8>)
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	 	 		  while (LoRa_stat == 0)
 8002554:	e008      	b.n	8002568 <main+0x4a4>
	 	 		  {
	 	 	  if(LoRa_init(&myLoRa)== LORA_OK )
 8002556:	4846      	ldr	r0, [pc, #280]	@ (8002670 <main+0x5ac>)
 8002558:	f7fe fe4d 	bl	80011f6 <LoRa_init>
 800255c:	4603      	mov	r3, r0
 800255e:	2bc8      	cmp	r3, #200	@ 0xc8
 8002560:	d102      	bne.n	8002568 <main+0x4a4>
	 	 	  {
	 	 		 LoRa_stat = 1;
 8002562:	4b44      	ldr	r3, [pc, #272]	@ (8002674 <main+0x5b0>)
 8002564:	2201      	movs	r2, #1
 8002566:	801a      	strh	r2, [r3, #0]
	 	 		  while (LoRa_stat == 0)
 8002568:	4b42      	ldr	r3, [pc, #264]	@ (8002674 <main+0x5b0>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f2      	beq.n	8002556 <main+0x492>
	 	 	  }
	 	 		  }
	 	 	    // Calculate the total size of the combined buffer
	 	 	    uint16_t combinedSize = strlen(lcdBuffer) + strlen(msg) + strlen(msg1) + 1; // +1 for null terminator
 8002570:	4835      	ldr	r0, [pc, #212]	@ (8002648 <main+0x584>)
 8002572:	f7fd fded 	bl	8000150 <strlen>
 8002576:	4603      	mov	r3, r0
 8002578:	b29c      	uxth	r4, r3
 800257a:	483f      	ldr	r0, [pc, #252]	@ (8002678 <main+0x5b4>)
 800257c:	f7fd fde8 	bl	8000150 <strlen>
 8002580:	4603      	mov	r3, r0
 8002582:	b29b      	uxth	r3, r3
 8002584:	4423      	add	r3, r4
 8002586:	b29c      	uxth	r4, r3
 8002588:	483c      	ldr	r0, [pc, #240]	@ (800267c <main+0x5b8>)
 800258a:	f7fd fde1 	bl	8000150 <strlen>
 800258e:	4603      	mov	r3, r0
 8002590:	b29b      	uxth	r3, r3
 8002592:	4423      	add	r3, r4
 8002594:	b29b      	uxth	r3, r3
 8002596:	3301      	adds	r3, #1
 8002598:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
	 	 	    char combinedBuffer[combinedSize];
 800259c:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 80025a0:	460b      	mov	r3, r1
 80025a2:	3b01      	subs	r3, #1
 80025a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025a6:	b28b      	uxth	r3, r1
 80025a8:	2200      	movs	r2, #0
 80025aa:	469a      	mov	sl, r3
 80025ac:	4693      	mov	fp, r2
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025c2:	b28b      	uxth	r3, r1
 80025c4:	2200      	movs	r2, #0
 80025c6:	4698      	mov	r8, r3
 80025c8:	4691      	mov	r9, r2
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025de:	460b      	mov	r3, r1
 80025e0:	3307      	adds	r3, #7
 80025e2:	08db      	lsrs	r3, r3, #3
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	ebad 0d03 	sub.w	sp, sp, r3
 80025ea:	ab06      	add	r3, sp, #24
 80025ec:	3300      	adds	r3, #0
 80025ee:	65bb      	str	r3, [r7, #88]	@ 0x58

	 	 	    // Clear the combined buffer
	 	 	    memset(combinedBuffer, 0, sizeof(combinedBuffer));
 80025f0:	460b      	mov	r3, r1
 80025f2:	461a      	mov	r2, r3
 80025f4:	2100      	movs	r1, #0
 80025f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80025f8:	f004 fd23 	bl	8007042 <memset>

	 	 	    // Combine lcdBuffer, msg, and msg1 into the combined buffer
	 	 	    strcpy(combinedBuffer, lcdBuffer);          // Copy lcdBuffer
 80025fc:	4912      	ldr	r1, [pc, #72]	@ (8002648 <main+0x584>)
 80025fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002600:	f004 fdad 	bl	800715e <strcpy>
	 	 	    strcat(combinedBuffer, msg);               // Append msg
 8002604:	491c      	ldr	r1, [pc, #112]	@ (8002678 <main+0x5b4>)
 8002606:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002608:	f004 fd23 	bl	8007052 <strcat>
	 	 	    strcat(combinedBuffer, msg1);              // Append msg1
 800260c:	491b      	ldr	r1, [pc, #108]	@ (800267c <main+0x5b8>)
 800260e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002610:	f004 fd1f 	bl	8007052 <strcat>

	 	 	    // Transmit the combined buffer using LoRa
	 	 	    LoRa_transmit(&myLoRa, (uint8_t *)combinedBuffer, strlen(combinedBuffer), 100);
 8002614:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002616:	f7fd fd9b 	bl	8000150 <strlen>
 800261a:	4603      	mov	r3, r0
 800261c:	b2da      	uxtb	r2, r3
 800261e:	2364      	movs	r3, #100	@ 0x64
 8002620:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002622:	4813      	ldr	r0, [pc, #76]	@ (8002670 <main+0x5ac>)
 8002624:	f7fe fd8f 	bl	8001146 <LoRa_transmit>
	 	 	    HAL_Delay(5000);
 8002628:	f241 3088 	movw	r0, #5000	@ 0x1388
 800262c:	f000 fea8 	bl	8003380 <HAL_Delay>
 8002630:	f8d7 d004 	ldr.w	sp, [r7, #4]
  {
 8002634:	e5b0      	b.n	8002198 <main+0xd4>
 8002636:	bf00      	nop
 8002638:	200005e0 	.word	0x200005e0
 800263c:	200005dc 	.word	0x200005dc
 8002640:	20000598 	.word	0x20000598
 8002644:	0800b63c 	.word	0x0800b63c
 8002648:	200005e4 	.word	0x200005e4
 800264c:	200002c8 	.word	0x200002c8
 8002650:	0800b65c 	.word	0x0800b65c
 8002654:	0800b688 	.word	0x0800b688
 8002658:	0800b69c 	.word	0x0800b69c
 800265c:	20000004 	.word	0x20000004
 8002660:	0800b6b0 	.word	0x0800b6b0
 8002664:	0800b6c4 	.word	0x0800b6c4
 8002668:	20000408 	.word	0x20000408
 800266c:	20000388 	.word	0x20000388
 8002670:	20000358 	.word	0x20000358
 8002674:	20000384 	.word	0x20000384
 8002678:	20000490 	.word	0x20000490
 800267c:	200004b0 	.word	0x200004b0

08002680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b090      	sub	sp, #64	@ 0x40
 8002684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002686:	f107 0318 	add.w	r3, r7, #24
 800268a:	2228      	movs	r2, #40	@ 0x28
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f004 fcd7 	bl	8007042 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026a6:	2301      	movs	r3, #1
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026aa:	2310      	movs	r3, #16
 80026ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ae:	2302      	movs	r3, #2
 80026b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80026b2:	2300      	movs	r3, #0
 80026b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80026b6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80026ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026bc:	f107 0318 	add.w	r3, r7, #24
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 fa17 	bl	8003af4 <HAL_RCC_OscConfig>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80026cc:	f000 f954 	bl	8002978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d0:	230f      	movs	r3, #15
 80026d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d4:	2302      	movs	r3, #2
 80026d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	2102      	movs	r1, #2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f001 fc84 	bl	8003ff8 <HAL_RCC_ClockConfig>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80026f6:	f000 f93f 	bl	8002978 <Error_Handler>
  }
}
 80026fa:	bf00      	nop
 80026fc:	3740      	adds	r7, #64	@ 0x40
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002708:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <MX_SPI1_Init+0x64>)
 800270a:	4a18      	ldr	r2, [pc, #96]	@ (800276c <MX_SPI1_Init+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800270e:	4b16      	ldr	r3, [pc, #88]	@ (8002768 <MX_SPI1_Init+0x64>)
 8002710:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002716:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <MX_SPI1_Init+0x64>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800271c:	4b12      	ldr	r3, [pc, #72]	@ (8002768 <MX_SPI1_Init+0x64>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002722:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <MX_SPI1_Init+0x64>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002728:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <MX_SPI1_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800272e:	4b0e      	ldr	r3, [pc, #56]	@ (8002768 <MX_SPI1_Init+0x64>)
 8002730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002736:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <MX_SPI1_Init+0x64>)
 8002738:	2210      	movs	r2, #16
 800273a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800273c:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <MX_SPI1_Init+0x64>)
 800273e:	2200      	movs	r2, #0
 8002740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002742:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <MX_SPI1_Init+0x64>)
 8002744:	2200      	movs	r2, #0
 8002746:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002748:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <MX_SPI1_Init+0x64>)
 800274a:	2200      	movs	r2, #0
 800274c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <MX_SPI1_Init+0x64>)
 8002750:	220a      	movs	r2, #10
 8002752:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002754:	4804      	ldr	r0, [pc, #16]	@ (8002768 <MX_SPI1_Init+0x64>)
 8002756:	f001 fddd 	bl	8004314 <HAL_SPI_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002760:	f000 f90a 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000228 	.word	0x20000228
 800276c:	40013000 	.word	0x40013000

08002770 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002784:	463b      	mov	r3, r7
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800278c:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <MX_TIM1_Init+0x98>)
 800278e:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <MX_TIM1_Init+0x9c>)
 8002790:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8002792:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <MX_TIM1_Init+0x98>)
 8002794:	223f      	movs	r2, #63	@ 0x3f
 8002796:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <MX_TIM1_Init+0x98>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800279e:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <MX_TIM1_Init+0x98>)
 80027a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a6:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <MX_TIM1_Init+0x98>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027ac:	4b16      	ldr	r3, [pc, #88]	@ (8002808 <MX_TIM1_Init+0x98>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <MX_TIM1_Init+0x98>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027b8:	4813      	ldr	r0, [pc, #76]	@ (8002808 <MX_TIM1_Init+0x98>)
 80027ba:	f002 fb4e 	bl	8004e5a <HAL_TIM_Base_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80027c4:	f000 f8d8 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027ce:	f107 0308 	add.w	r3, r7, #8
 80027d2:	4619      	mov	r1, r3
 80027d4:	480c      	ldr	r0, [pc, #48]	@ (8002808 <MX_TIM1_Init+0x98>)
 80027d6:	f002 fbd9 	bl	8004f8c <HAL_TIM_ConfigClockSource>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80027e0:	f000 f8ca 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e4:	2300      	movs	r3, #0
 80027e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027ec:	463b      	mov	r3, r7
 80027ee:	4619      	mov	r1, r3
 80027f0:	4805      	ldr	r0, [pc, #20]	@ (8002808 <MX_TIM1_Init+0x98>)
 80027f2:	f002 fd97 	bl	8005324 <HAL_TIMEx_MasterConfigSynchronization>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80027fc:	f000 f8bc 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002800:	bf00      	nop
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000280 	.word	0x20000280
 800280c:	40012c00 	.word	0x40012c00

08002810 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002814:	4b11      	ldr	r3, [pc, #68]	@ (800285c <MX_USART1_UART_Init+0x4c>)
 8002816:	4a12      	ldr	r2, [pc, #72]	@ (8002860 <MX_USART1_UART_Init+0x50>)
 8002818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <MX_USART1_UART_Init+0x4c>)
 800281c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002822:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <MX_USART1_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002828:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <MX_USART1_UART_Init+0x4c>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800282e:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <MX_USART1_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002834:	4b09      	ldr	r3, [pc, #36]	@ (800285c <MX_USART1_UART_Init+0x4c>)
 8002836:	220c      	movs	r2, #12
 8002838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283a:	4b08      	ldr	r3, [pc, #32]	@ (800285c <MX_USART1_UART_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <MX_USART1_UART_Init+0x4c>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002846:	4805      	ldr	r0, [pc, #20]	@ (800285c <MX_USART1_UART_Init+0x4c>)
 8002848:	f002 fdca 	bl	80053e0 <HAL_UART_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002852:	f000 f891 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200002c8 	.word	0x200002c8
 8002860:	40013800 	.word	0x40013800

08002864 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <MX_USART3_UART_Init+0x4c>)
 800286a:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <MX_USART3_UART_Init+0x50>)
 800286c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <MX_USART3_UART_Init+0x4c>)
 8002870:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002876:	4b0e      	ldr	r3, [pc, #56]	@ (80028b0 <MX_USART3_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800287c:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <MX_USART3_UART_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002882:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <MX_USART3_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002888:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <MX_USART3_UART_Init+0x4c>)
 800288a:	220c      	movs	r2, #12
 800288c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288e:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <MX_USART3_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002894:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <MX_USART3_UART_Init+0x4c>)
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800289a:	4805      	ldr	r0, [pc, #20]	@ (80028b0 <MX_USART3_UART_Init+0x4c>)
 800289c:	f002 fda0 	bl	80053e0 <HAL_UART_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028a6:	f000 f867 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000310 	.word	0x20000310
 80028b4:	40004800 	.word	0x40004800

080028b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028cc:	4b27      	ldr	r3, [pc, #156]	@ (800296c <MX_GPIO_Init+0xb4>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a26      	ldr	r2, [pc, #152]	@ (800296c <MX_GPIO_Init+0xb4>)
 80028d2:	f043 0320 	orr.w	r3, r3, #32
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b24      	ldr	r3, [pc, #144]	@ (800296c <MX_GPIO_Init+0xb4>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e4:	4b21      	ldr	r3, [pc, #132]	@ (800296c <MX_GPIO_Init+0xb4>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	4a20      	ldr	r2, [pc, #128]	@ (800296c <MX_GPIO_Init+0xb4>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6193      	str	r3, [r2, #24]
 80028f0:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <MX_GPIO_Init+0xb4>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <MX_GPIO_Init+0xb4>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4a1a      	ldr	r2, [pc, #104]	@ (800296c <MX_GPIO_Init+0xb4>)
 8002902:	f043 0308 	orr.w	r3, r3, #8
 8002906:	6193      	str	r3, [r2, #24]
 8002908:	4b18      	ldr	r3, [pc, #96]	@ (800296c <MX_GPIO_Init+0xb4>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	607b      	str	r3, [r7, #4]
 8002912:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8002914:	2201      	movs	r2, #1
 8002916:	2103      	movs	r1, #3
 8002918:	4815      	ldr	r0, [pc, #84]	@ (8002970 <MX_GPIO_Init+0xb8>)
 800291a:	f001 f8b0 	bl	8003a7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 800291e:	2303      	movs	r3, #3
 8002920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002922:	2301      	movs	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2302      	movs	r3, #2
 800292c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	f107 0310 	add.w	r3, r7, #16
 8002932:	4619      	mov	r1, r3
 8002934:	480e      	ldr	r0, [pc, #56]	@ (8002970 <MX_GPIO_Init+0xb8>)
 8002936:	f000 ff07 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800293a:	2304      	movs	r3, #4
 800293c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800293e:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <MX_GPIO_Init+0xbc>)
 8002940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002946:	f107 0310 	add.w	r3, r7, #16
 800294a:	4619      	mov	r1, r3
 800294c:	4808      	ldr	r0, [pc, #32]	@ (8002970 <MX_GPIO_Init+0xb8>)
 800294e:	f000 fefb 	bl	8003748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2101      	movs	r1, #1
 8002956:	2008      	movs	r0, #8
 8002958:	f000 fe0d 	bl	8003576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800295c:	2008      	movs	r0, #8
 800295e:	f000 fe26 	bl	80035ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002962:	bf00      	nop
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	40010c00 	.word	0x40010c00
 8002974:	10110000 	.word	0x10110000

08002978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800297c:	b672      	cpsid	i
}
 800297e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <Error_Handler+0x8>

08002984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <HAL_MspInit+0x5c>)
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	4a14      	ldr	r2, [pc, #80]	@ (80029e0 <HAL_MspInit+0x5c>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6193      	str	r3, [r2, #24]
 8002996:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <HAL_MspInit+0x5c>)
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <HAL_MspInit+0x5c>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	4a0e      	ldr	r2, [pc, #56]	@ (80029e0 <HAL_MspInit+0x5c>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ac:	61d3      	str	r3, [r2, #28]
 80029ae:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <HAL_MspInit+0x5c>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029ba:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <HAL_MspInit+0x60>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	4a04      	ldr	r2, [pc, #16]	@ (80029e4 <HAL_MspInit+0x60>)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40010000 	.word	0x40010000

080029e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1b      	ldr	r2, [pc, #108]	@ (8002a70 <HAL_SPI_MspInit+0x88>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d12f      	bne.n	8002a68 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a08:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <HAL_SPI_MspInit+0x8c>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4a19      	ldr	r2, [pc, #100]	@ (8002a74 <HAL_SPI_MspInit+0x8c>)
 8002a0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a12:	6193      	str	r3, [r2, #24]
 8002a14:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <HAL_SPI_MspInit+0x8c>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <HAL_SPI_MspInit+0x8c>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	4a13      	ldr	r2, [pc, #76]	@ (8002a74 <HAL_SPI_MspInit+0x8c>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6193      	str	r3, [r2, #24]
 8002a2c:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <HAL_SPI_MspInit+0x8c>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a38:	23a0      	movs	r3, #160	@ 0xa0
 8002a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	4619      	mov	r1, r3
 8002a4a:	480b      	ldr	r0, [pc, #44]	@ (8002a78 <HAL_SPI_MspInit+0x90>)
 8002a4c:	f000 fe7c 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a50:	2340      	movs	r3, #64	@ 0x40
 8002a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5c:	f107 0310 	add.w	r3, r7, #16
 8002a60:	4619      	mov	r1, r3
 8002a62:	4805      	ldr	r0, [pc, #20]	@ (8002a78 <HAL_SPI_MspInit+0x90>)
 8002a64:	f000 fe70 	bl	8003748 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002a68:	bf00      	nop
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40013000 	.word	0x40013000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40010800 	.word	0x40010800

08002a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a09      	ldr	r2, [pc, #36]	@ (8002ab0 <HAL_TIM_Base_MspInit+0x34>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x38>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	4a08      	ldr	r2, [pc, #32]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x38>)
 8002a94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a98:	6193      	str	r3, [r2, #24]
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x38>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	40012c00 	.word	0x40012c00
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	@ 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0318 	add.w	r3, r7, #24
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a3c      	ldr	r2, [pc, #240]	@ (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d132      	bne.n	8002b3e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a3a      	ldr	r2, [pc, #232]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002ade:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b38      	ldr	r3, [pc, #224]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	4b35      	ldr	r3, [pc, #212]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	4a34      	ldr	r2, [pc, #208]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	6193      	str	r3, [r2, #24]
 8002afc:	4b32      	ldr	r3, [pc, #200]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b12:	2303      	movs	r3, #3
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b16:	f107 0318 	add.w	r3, r7, #24
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	482b      	ldr	r0, [pc, #172]	@ (8002bcc <HAL_UART_MspInit+0x114>)
 8002b1e:	f000 fe13 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b30:	f107 0318 	add.w	r3, r7, #24
 8002b34:	4619      	mov	r1, r3
 8002b36:	4825      	ldr	r0, [pc, #148]	@ (8002bcc <HAL_UART_MspInit+0x114>)
 8002b38:	f000 fe06 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b3c:	e03e      	b.n	8002bbc <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a23      	ldr	r2, [pc, #140]	@ (8002bd0 <HAL_UART_MspInit+0x118>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d139      	bne.n	8002bbc <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b48:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002b4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b52:	61d3      	str	r3, [r2, #28]
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b60:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002b66:	f043 0308 	orr.w	r3, r3, #8
 8002b6a:	6193      	str	r3, [r2, #24]
 8002b6c:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_UART_MspInit+0x110>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b82:	2303      	movs	r3, #3
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b86:	f107 0318 	add.w	r3, r7, #24
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4811      	ldr	r0, [pc, #68]	@ (8002bd4 <HAL_UART_MspInit+0x11c>)
 8002b8e:	f000 fddb 	bl	8003748 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba0:	f107 0318 	add.w	r3, r7, #24
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	480b      	ldr	r0, [pc, #44]	@ (8002bd4 <HAL_UART_MspInit+0x11c>)
 8002ba8:	f000 fdce 	bl	8003748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2100      	movs	r1, #0
 8002bb0:	2027      	movs	r0, #39	@ 0x27
 8002bb2:	f000 fce0 	bl	8003576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002bb6:	2027      	movs	r0, #39	@ 0x27
 8002bb8:	f000 fcf9 	bl	80035ae <HAL_NVIC_EnableIRQ>
}
 8002bbc:	bf00      	nop
 8002bbe:	3728      	adds	r7, #40	@ 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40013800 	.word	0x40013800
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40010800 	.word	0x40010800
 8002bd0:	40004800 	.word	0x40004800
 8002bd4:	40010c00 	.word	0x40010c00

08002bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <NMI_Handler+0x4>

08002be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <HardFault_Handler+0x4>

08002be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <MemManage_Handler+0x4>

08002bf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <BusFault_Handler+0x4>

08002bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <UsageFault_Handler+0x4>

08002c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(timeout >0)  timeout--;
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <SysTick_Handler+0x20>)
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <SysTick_Handler+0x18>
 8002c30:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <SysTick_Handler+0x20>)
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	4b02      	ldr	r3, [pc, #8]	@ (8002c44 <SysTick_Handler+0x20>)
 8002c3a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c3c:	f000 fb84 	bl	8003348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	2000061c 	.word	0x2000061c

08002c48 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8002c4c:	2004      	movs	r0, #4
 8002c4e:	f000 ff2f 	bl	8003ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8002c5c:	4803      	ldr	r0, [pc, #12]	@ (8002c6c <USART3_IRQHandler+0x14>)
 8002c5e:	f000 faa9 	bl	80031b4 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c62:	4802      	ldr	r0, [pc, #8]	@ (8002c6c <USART3_IRQHandler+0x14>)
 8002c64:	f002 fc98 	bl	8005598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000310 	.word	0x20000310

08002c70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return 1;
 8002c74:	2301      	movs	r3, #1
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <_kill>:

int _kill(int pid, int sig)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c88:	f004 fa3c 	bl	8007104 <__errno>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2216      	movs	r2, #22
 8002c90:	601a      	str	r2, [r3, #0]
  return -1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <_exit>:

void _exit (int status)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ffe7 	bl	8002c7e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <_exit+0x12>

08002cb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	e00a      	b.n	8002cdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cc6:	f3af 8000 	nop.w
 8002cca:	4601      	mov	r1, r0
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	60ba      	str	r2, [r7, #8]
 8002cd2:	b2ca      	uxtb	r2, r1
 8002cd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	dbf0      	blt.n	8002cc6 <_read+0x12>
  }

  return len;
 8002ce4:	687b      	ldr	r3, [r7, #4]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e009      	b.n	8002d14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	60ba      	str	r2, [r7, #8]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	dbf1      	blt.n	8002d00 <_write+0x12>
  }
  return len;
 8002d1c:	687b      	ldr	r3, [r7, #4]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_close>:

int _close(int file)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d4c:	605a      	str	r2, [r3, #4]
  return 0;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <_isatty>:

int _isatty(int file)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d62:	2301      	movs	r3, #1
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
	...

08002d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d90:	4a14      	ldr	r2, [pc, #80]	@ (8002de4 <_sbrk+0x5c>)
 8002d92:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <_sbrk+0x60>)
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d9c:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <_sbrk+0x64>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da4:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <_sbrk+0x64>)
 8002da6:	4a12      	ldr	r2, [pc, #72]	@ (8002df0 <_sbrk+0x68>)
 8002da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <_sbrk+0x64>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d207      	bcs.n	8002dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db8:	f004 f9a4 	bl	8007104 <__errno>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	e009      	b.n	8002ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <_sbrk+0x64>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dce:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <_sbrk+0x64>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	4a05      	ldr	r2, [pc, #20]	@ (8002dec <_sbrk+0x64>)
 8002dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20005000 	.word	0x20005000
 8002de8:	00000400 	.word	0x00000400
 8002dec:	20000618 	.word	0x20000618
 8002df0:	20000b88 	.word	0x20000b88

08002df4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <uartx_write>:

#include "uart.h"


void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 8002e0c:	1cf9      	adds	r1, r7, #3
 8002e0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e12:	2201      	movs	r2, #1
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f002 fb33 	bl	8005480 <HAL_UART_Transmit>

}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, char *info)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 8002e2c:	e007      	b.n	8002e3e <uartx_write_text+0x1c>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	603a      	str	r2, [r7, #0]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	4619      	mov	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ffe1 	bl	8002e00 <uartx_write>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f3      	bne.n	8002e2e <uartx_write_text+0xc>

}
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <Ringbuf_init+0x38>)
 8002e56:	4a0d      	ldr	r2, [pc, #52]	@ (8002e8c <Ringbuf_init+0x3c>)
 8002e58:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <Ringbuf_init+0x40>)
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e94 <Ringbuf_init+0x44>)
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002e60:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <Ringbuf_init+0x48>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <Ringbuf_init+0x48>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002e70:	4b09      	ldr	r3, [pc, #36]	@ (8002e98 <Ringbuf_init+0x48>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <Ringbuf_init+0x48>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	60da      	str	r2, [r3, #12]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	20000a30 	.word	0x20000a30
 8002e8c:	20000620 	.word	0x20000620
 8002e90:	20000a34 	.word	0x20000a34
 8002e94:	20000828 	.word	0x20000828
 8002e98:	20000310 	.word	0x20000310

08002e9c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb4:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d009      	beq.n	8002ed6 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	79f9      	ldrb	r1, [r7, #7]
 8002ecc:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002ee6:	4b13      	ldr	r3, [pc, #76]	@ (8002f34 <Uart_read+0x54>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002eee:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <Uart_read+0x54>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d102      	bne.n	8002f00 <Uart_read+0x20>
  {
    return -1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	e013      	b.n	8002f28 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002f00:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <Uart_read+0x54>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <Uart_read+0x54>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002f0c:	5cd3      	ldrb	r3, [r2, r3]
 8002f0e:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002f10:	4b08      	ldr	r3, [pc, #32]	@ (8002f34 <Uart_read+0x54>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <Uart_read+0x54>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f22:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 8002f26:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000a30 	.word	0x20000a30

08002f38 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <IsDataAvailable+0x30>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <IsDataAvailable+0x30>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000a30 	.word	0x20000a30

08002f6c <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <Uart_peek+0x34>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <Uart_peek+0x34>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d102      	bne.n	8002f8a <Uart_peek+0x1e>
  {
    return -1;
 8002f84:	f04f 33ff 	mov.w	r3, #4294967295
 8002f88:	e006      	b.n	8002f98 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002f8a:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <Uart_peek+0x34>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <Uart_peek+0x34>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	20000a30 	.word	0x20000a30

08002fa4 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd f8cc 	bl	8000150 <strlen>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002fc0:	e01e      	b.n	8003000 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002fc2:	4b36      	ldr	r3, [pc, #216]	@ (800309c <Copy_upto+0xf8>)
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	4b35      	ldr	r3, [pc, #212]	@ (800309c <Copy_upto+0xf8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	6838      	ldr	r0, [r7, #0]
 8002fd2:	4403      	add	r3, r0
 8002fd4:	5c8a      	ldrb	r2, [r1, r2]
 8002fd6:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002fd8:	4b30      	ldr	r3, [pc, #192]	@ (800309c <Copy_upto+0xf8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800309c <Copy_upto+0xf8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002ff4:	bf00      	nop
 8002ff6:	f7ff ff9f 	bl	8002f38 <IsDataAvailable>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0fa      	beq.n	8002ff6 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8003000:	f7ff ffb4 	bl	8002f6c <Uart_peek>
 8003004:	4601      	mov	r1, r0
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	4299      	cmp	r1, r3
 8003010:	d1d7      	bne.n	8002fc2 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8003012:	e027      	b.n	8003064 <Copy_upto+0xc0>
	{
		so_far++;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3301      	adds	r3, #1
 8003018:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 800301a:	f7ff ff61 	bl	8002ee0 <Uart_read>
 800301e:	4601      	mov	r1, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	613a      	str	r2, [r7, #16]
 8003026:	461a      	mov	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	4413      	add	r3, r2
 800302c:	b2ca      	uxtb	r2, r1
 800302e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	429a      	cmp	r2, r3
 8003036:	d101      	bne.n	800303c <Copy_upto+0x98>
 8003038:	2301      	movs	r3, #1
 800303a:	e02a      	b.n	8003092 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 800303c:	4b18      	ldr	r3, [pc, #96]	@ (80030a0 <Copy_upto+0xfc>)
 800303e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003042:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8003044:	bf00      	nop
 8003046:	f7ff ff77 	bl	8002f38 <IsDataAvailable>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d103      	bne.n	8003058 <Copy_upto+0xb4>
 8003050:	4b13      	ldr	r3, [pc, #76]	@ (80030a0 <Copy_upto+0xfc>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f6      	bne.n	8003046 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8003058:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <Copy_upto+0xfc>)
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <Copy_upto+0xc0>
 8003060:	2300      	movs	r3, #0
 8003062:	e016      	b.n	8003092 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8003064:	f7ff ff82 	bl	8002f6c <Uart_peek>
 8003068:	4601      	mov	r1, r0
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	4299      	cmp	r1, r3
 8003074:	d0ce      	beq.n	8003014 <Copy_upto+0x70>
	}

	if (so_far != len)
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	429a      	cmp	r2, r3
 800307c:	d002      	beq.n	8003084 <Copy_upto+0xe0>
	{
		so_far = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
		goto again;
 8003082:	e79d      	b.n	8002fc0 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	429a      	cmp	r2, r3
 800308a:	d101      	bne.n	8003090 <Copy_upto+0xec>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <Copy_upto+0xee>
	else return 0;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000a30 	.word	0x20000a30
 80030a0:	2000061c 	.word	0x2000061c

080030a4 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fd f84d 	bl	8000150 <strlen>
 80030b6:	4603      	mov	r3, r0
 80030b8:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 80030ba:	4b3c      	ldr	r3, [pc, #240]	@ (80031ac <Wait_for+0x108>)
 80030bc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80030c0:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 80030c2:	bf00      	nop
 80030c4:	f7ff ff38 	bl	8002f38 <IsDataAvailable>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d103      	bne.n	80030d6 <Wait_for+0x32>
 80030ce:	4b37      	ldr	r3, [pc, #220]	@ (80031ac <Wait_for+0x108>)
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f6      	bne.n	80030c4 <Wait_for+0x20>
	if (timeout == 0) return 0;
 80030d6:	4b35      	ldr	r3, [pc, #212]	@ (80031ac <Wait_for+0x108>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d119      	bne.n	8003112 <Wait_for+0x6e>
 80030de:	2300      	movs	r3, #0
 80030e0:	e060      	b.n	80031a4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80030e2:	4b33      	ldr	r3, [pc, #204]	@ (80031b0 <Wait_for+0x10c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80030ea:	4b31      	ldr	r3, [pc, #196]	@ (80031b0 <Wait_for+0x10c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d00b      	beq.n	800310e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80030f6:	4b2e      	ldr	r3, [pc, #184]	@ (80031b0 <Wait_for+0x10c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	4b2b      	ldr	r3, [pc, #172]	@ (80031b0 <Wait_for+0x10c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003108:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800310c:	e001      	b.n	8003112 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800310e:	2300      	movs	r3, #0
 8003110:	e048      	b.n	80031a4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8003112:	f7ff ff2b 	bl	8002f6c <Uart_peek>
 8003116:	4601      	mov	r1, r0
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	4299      	cmp	r1, r3
 8003122:	d1de      	bne.n	80030e2 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8003124:	e027      	b.n	8003176 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3301      	adds	r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800312c:	4b20      	ldr	r3, [pc, #128]	@ (80031b0 <Wait_for+0x10c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	4b1e      	ldr	r3, [pc, #120]	@ (80031b0 <Wait_for+0x10c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800313e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	429a      	cmp	r2, r3
 8003148:	d101      	bne.n	800314e <Wait_for+0xaa>
 800314a:	2301      	movs	r3, #1
 800314c:	e02a      	b.n	80031a4 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 800314e:	4b17      	ldr	r3, [pc, #92]	@ (80031ac <Wait_for+0x108>)
 8003150:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003154:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8003156:	bf00      	nop
 8003158:	f7ff feee 	bl	8002f38 <IsDataAvailable>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <Wait_for+0xc6>
 8003162:	4b12      	ldr	r3, [pc, #72]	@ (80031ac <Wait_for+0x108>)
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f6      	bne.n	8003158 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <Wait_for+0x108>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <Wait_for+0xd2>
 8003172:	2300      	movs	r3, #0
 8003174:	e016      	b.n	80031a4 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8003176:	f7ff fef9 	bl	8002f6c <Uart_peek>
 800317a:	4601      	mov	r1, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	4299      	cmp	r1, r3
 8003186:	d0ce      	beq.n	8003126 <Wait_for+0x82>
	}

	if (so_far != len)
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	429a      	cmp	r2, r3
 800318e:	d002      	beq.n	8003196 <Wait_for+0xf2>
	{
		so_far = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
		goto again;
 8003194:	e791      	b.n	80030ba <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	d101      	bne.n	80031a2 <Wait_for+0xfe>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <Wait_for+0x100>
	else return 0;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	2000061c 	.word	0x2000061c
 80031b0:	20000a30 	.word	0x20000a30

080031b4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d013      	beq.n	80031fe <Uart_isr+0x4a>
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80031ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003268 <Uart_isr+0xb4>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fe50 	bl	8002e9c <store_char>
        return;
 80031fc:	e031      	b.n	8003262 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003204:	2b00      	cmp	r3, #0
 8003206:	d02c      	beq.n	8003262 <Uart_isr+0xae>
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320e:	2b00      	cmp	r3, #0
 8003210:	d027      	beq.n	8003262 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8003212:	4b16      	ldr	r3, [pc, #88]	@ (800326c <Uart_isr+0xb8>)
 8003214:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003218:	4b14      	ldr	r3, [pc, #80]	@ (800326c <Uart_isr+0xb8>)
 800321a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800321e:	429a      	cmp	r2, r3
 8003220:	d108      	bne.n	8003234 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003230:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8003232:	e015      	b.n	8003260 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8003234:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <Uart_isr+0xb8>)
 8003236:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800323a:	4a0c      	ldr	r2, [pc, #48]	@ (800326c <Uart_isr+0xb8>)
 800323c:	5cd3      	ldrb	r3, [r2, r3]
 800323e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8003240:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <Uart_isr+0xb8>)
 8003242:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003246:	3301      	adds	r3, #1
 8003248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324c:	4a07      	ldr	r2, [pc, #28]	@ (800326c <Uart_isr+0xb8>)
 800324e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	7bba      	ldrb	r2, [r7, #14]
 800325e:	605a      	str	r2, [r3, #4]
    	return;
 8003260:	bf00      	nop
    }
}
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000a30 	.word	0x20000a30
 800326c:	20000828 	.word	0x20000828

08003270 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003270:	f7ff fdc0 	bl	8002df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003274:	480b      	ldr	r0, [pc, #44]	@ (80032a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003276:	490c      	ldr	r1, [pc, #48]	@ (80032a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003278:	4a0c      	ldr	r2, [pc, #48]	@ (80032ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800327a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800327c:	e002      	b.n	8003284 <LoopCopyDataInit>

0800327e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800327e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003282:	3304      	adds	r3, #4

08003284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003288:	d3f9      	bcc.n	800327e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328a:	4a09      	ldr	r2, [pc, #36]	@ (80032b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800328c:	4c09      	ldr	r4, [pc, #36]	@ (80032b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800328e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003290:	e001      	b.n	8003296 <LoopFillZerobss>

08003292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003294:	3204      	adds	r2, #4

08003296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003298:	d3fb      	bcc.n	8003292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800329a:	f003 ff39 	bl	8007110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800329e:	f7fe ff11 	bl	80020c4 <main>
  bx lr
 80032a2:	4770      	bx	lr
  ldr r0, =_sdata
 80032a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80032ac:	0800bb80 	.word	0x0800bb80
  ldr r2, =_sbss
 80032b0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80032b4:	20000b88 	.word	0x20000b88

080032b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032b8:	e7fe      	b.n	80032b8 <ADC1_2_IRQHandler>
	...

080032bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032c0:	4b08      	ldr	r3, [pc, #32]	@ (80032e4 <HAL_Init+0x28>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a07      	ldr	r2, [pc, #28]	@ (80032e4 <HAL_Init+0x28>)
 80032c6:	f043 0310 	orr.w	r3, r3, #16
 80032ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032cc:	2003      	movs	r0, #3
 80032ce:	f000 f947 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032d2:	200f      	movs	r0, #15
 80032d4:	f000 f808 	bl	80032e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d8:	f7ff fb54 	bl	8002984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40022000 	.word	0x40022000

080032e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032f0:	4b12      	ldr	r3, [pc, #72]	@ (800333c <HAL_InitTick+0x54>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b12      	ldr	r3, [pc, #72]	@ (8003340 <HAL_InitTick+0x58>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4619      	mov	r1, r3
 80032fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f95f 	bl	80035ca <HAL_SYSTICK_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e00e      	b.n	8003334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b0f      	cmp	r3, #15
 800331a:	d80a      	bhi.n	8003332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800331c:	2200      	movs	r2, #0
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	f000 f927 	bl	8003576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003328:	4a06      	ldr	r2, [pc, #24]	@ (8003344 <HAL_InitTick+0x5c>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	e000      	b.n	8003334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000008 	.word	0x20000008
 8003340:	20000010 	.word	0x20000010
 8003344:	2000000c 	.word	0x2000000c

08003348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <HAL_IncTick+0x1c>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <HAL_IncTick+0x20>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4413      	add	r3, r2
 8003358:	4a03      	ldr	r2, [pc, #12]	@ (8003368 <HAL_IncTick+0x20>)
 800335a:	6013      	str	r3, [r2, #0]
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	20000010 	.word	0x20000010
 8003368:	20000a38 	.word	0x20000a38

0800336c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return uwTick;
 8003370:	4b02      	ldr	r3, [pc, #8]	@ (800337c <HAL_GetTick+0x10>)
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	20000a38 	.word	0x20000a38

08003380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff fff0 	bl	800336c <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d005      	beq.n	80033a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800339a:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <HAL_Delay+0x44>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033a6:	bf00      	nop
 80033a8:	f7ff ffe0 	bl	800336c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8f7      	bhi.n	80033a8 <HAL_Delay+0x28>
  {
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000010 	.word	0x20000010

080033c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d8:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033e4:	4013      	ands	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fa:	4a04      	ldr	r2, [pc, #16]	@ (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	60d3      	str	r3, [r2, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <__NVIC_GetPriorityGrouping+0x18>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f003 0307 	and.w	r3, r3, #7
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	2b00      	cmp	r3, #0
 800343c:	db0b      	blt.n	8003456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4906      	ldr	r1, [pc, #24]	@ (8003460 <__NVIC_EnableIRQ+0x34>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2001      	movs	r0, #1
 800344e:	fa00 f202 	lsl.w	r2, r0, r2
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100

08003464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	490c      	ldr	r1, [pc, #48]	@ (80034b0 <__NVIC_SetPriority+0x4c>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800348c:	e00a      	b.n	80034a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4908      	ldr	r1, [pc, #32]	@ (80034b4 <__NVIC_SetPriority+0x50>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3b04      	subs	r3, #4
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	440b      	add	r3, r1
 80034a2:	761a      	strb	r2, [r3, #24]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000e100 	.word	0xe000e100
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	@ 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f1c3 0307 	rsb	r3, r3, #7
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	bf28      	it	cs
 80034d6:	2304      	movcs	r3, #4
 80034d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3304      	adds	r3, #4
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d902      	bls.n	80034e8 <NVIC_EncodePriority+0x30>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3b03      	subs	r3, #3
 80034e6:	e000      	b.n	80034ea <NVIC_EncodePriority+0x32>
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003500:	f04f 31ff 	mov.w	r1, #4294967295
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43d9      	mvns	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	4313      	orrs	r3, r2
         );
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	@ 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800352c:	d301      	bcc.n	8003532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003532:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <SysTick_Config+0x40>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353a:	210f      	movs	r1, #15
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f7ff ff90 	bl	8003464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <SysTick_Config+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	@ (800355c <SysTick_Config+0x40>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff2d 	bl	80033c8 <__NVIC_SetPriorityGrouping>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003588:	f7ff ff42 	bl	8003410 <__NVIC_GetPriorityGrouping>
 800358c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff90 	bl	80034b8 <NVIC_EncodePriority>
 8003598:	4602      	mov	r2, r0
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff5f 	bl	8003464 <__NVIC_SetPriority>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4603      	mov	r3, r0
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff35 	bl	800342c <__NVIC_EnableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ffa2 	bl	800351c <SysTick_Config>
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d008      	beq.n	800360c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2204      	movs	r2, #4
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e020      	b.n	800364e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 020e 	bic.w	r2, r2, #14
 800361a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	2101      	movs	r1, #1
 8003636:	fa01 f202 	lsl.w	r2, r1, r2
 800363a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800364c:	7bfb      	ldrb	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d005      	beq.n	800367c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2204      	movs	r2, #4
 8003674:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	e051      	b.n	8003720 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 020e 	bic.w	r2, r2, #14
 800368a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a22      	ldr	r2, [pc, #136]	@ (800372c <HAL_DMA_Abort_IT+0xd4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d029      	beq.n	80036fa <HAL_DMA_Abort_IT+0xa2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a21      	ldr	r2, [pc, #132]	@ (8003730 <HAL_DMA_Abort_IT+0xd8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x9e>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003734 <HAL_DMA_Abort_IT+0xdc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01a      	beq.n	80036f0 <HAL_DMA_Abort_IT+0x98>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1e      	ldr	r2, [pc, #120]	@ (8003738 <HAL_DMA_Abort_IT+0xe0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d012      	beq.n	80036ea <HAL_DMA_Abort_IT+0x92>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1c      	ldr	r2, [pc, #112]	@ (800373c <HAL_DMA_Abort_IT+0xe4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00a      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x8c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003740 <HAL_DMA_Abort_IT+0xe8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d102      	bne.n	80036de <HAL_DMA_Abort_IT+0x86>
 80036d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80036dc:	e00e      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036e2:	e00b      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036e8:	e008      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036ee:	e005      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036f4:	e002      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036f6:	2310      	movs	r3, #16
 80036f8:	e000      	b.n	80036fc <HAL_DMA_Abort_IT+0xa4>
 80036fa:	2301      	movs	r3, #1
 80036fc:	4a11      	ldr	r2, [pc, #68]	@ (8003744 <HAL_DMA_Abort_IT+0xec>)
 80036fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
    } 
  }
  return status;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40020008 	.word	0x40020008
 8003730:	4002001c 	.word	0x4002001c
 8003734:	40020030 	.word	0x40020030
 8003738:	40020044 	.word	0x40020044
 800373c:	40020058 	.word	0x40020058
 8003740:	4002006c 	.word	0x4002006c
 8003744:	40020000 	.word	0x40020000

08003748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003748:	b480      	push	{r7}
 800374a:	b08b      	sub	sp, #44	@ 0x2c
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003752:	2300      	movs	r3, #0
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003756:	2300      	movs	r3, #0
 8003758:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375a:	e169      	b.n	8003a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800375c:	2201      	movs	r2, #1
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	429a      	cmp	r2, r3
 8003776:	f040 8158 	bne.w	8003a2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4a9a      	ldr	r2, [pc, #616]	@ (80039e8 <HAL_GPIO_Init+0x2a0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d05e      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 8003784:	4a98      	ldr	r2, [pc, #608]	@ (80039e8 <HAL_GPIO_Init+0x2a0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d875      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 800378a:	4a98      	ldr	r2, [pc, #608]	@ (80039ec <HAL_GPIO_Init+0x2a4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d058      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 8003790:	4a96      	ldr	r2, [pc, #600]	@ (80039ec <HAL_GPIO_Init+0x2a4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d86f      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 8003796:	4a96      	ldr	r2, [pc, #600]	@ (80039f0 <HAL_GPIO_Init+0x2a8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d052      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 800379c:	4a94      	ldr	r2, [pc, #592]	@ (80039f0 <HAL_GPIO_Init+0x2a8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d869      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037a2:	4a94      	ldr	r2, [pc, #592]	@ (80039f4 <HAL_GPIO_Init+0x2ac>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d04c      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 80037a8:	4a92      	ldr	r2, [pc, #584]	@ (80039f4 <HAL_GPIO_Init+0x2ac>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d863      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037ae:	4a92      	ldr	r2, [pc, #584]	@ (80039f8 <HAL_GPIO_Init+0x2b0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d046      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
 80037b4:	4a90      	ldr	r2, [pc, #576]	@ (80039f8 <HAL_GPIO_Init+0x2b0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d85d      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037ba:	2b12      	cmp	r3, #18
 80037bc:	d82a      	bhi.n	8003814 <HAL_GPIO_Init+0xcc>
 80037be:	2b12      	cmp	r3, #18
 80037c0:	d859      	bhi.n	8003876 <HAL_GPIO_Init+0x12e>
 80037c2:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <HAL_GPIO_Init+0x80>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	08003843 	.word	0x08003843
 80037cc:	0800381d 	.word	0x0800381d
 80037d0:	0800382f 	.word	0x0800382f
 80037d4:	08003871 	.word	0x08003871
 80037d8:	08003877 	.word	0x08003877
 80037dc:	08003877 	.word	0x08003877
 80037e0:	08003877 	.word	0x08003877
 80037e4:	08003877 	.word	0x08003877
 80037e8:	08003877 	.word	0x08003877
 80037ec:	08003877 	.word	0x08003877
 80037f0:	08003877 	.word	0x08003877
 80037f4:	08003877 	.word	0x08003877
 80037f8:	08003877 	.word	0x08003877
 80037fc:	08003877 	.word	0x08003877
 8003800:	08003877 	.word	0x08003877
 8003804:	08003877 	.word	0x08003877
 8003808:	08003877 	.word	0x08003877
 800380c:	08003825 	.word	0x08003825
 8003810:	08003839 	.word	0x08003839
 8003814:	4a79      	ldr	r2, [pc, #484]	@ (80039fc <HAL_GPIO_Init+0x2b4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800381a:	e02c      	b.n	8003876 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	623b      	str	r3, [r7, #32]
          break;
 8003822:	e029      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	3304      	adds	r3, #4
 800382a:	623b      	str	r3, [r7, #32]
          break;
 800382c:	e024      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	3308      	adds	r3, #8
 8003834:	623b      	str	r3, [r7, #32]
          break;
 8003836:	e01f      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	330c      	adds	r3, #12
 800383e:	623b      	str	r3, [r7, #32]
          break;
 8003840:	e01a      	b.n	8003878 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800384a:	2304      	movs	r3, #4
 800384c:	623b      	str	r3, [r7, #32]
          break;
 800384e:	e013      	b.n	8003878 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003858:	2308      	movs	r3, #8
 800385a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	611a      	str	r2, [r3, #16]
          break;
 8003862:	e009      	b.n	8003878 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003864:	2308      	movs	r3, #8
 8003866:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	615a      	str	r2, [r3, #20]
          break;
 800386e:	e003      	b.n	8003878 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003870:	2300      	movs	r3, #0
 8003872:	623b      	str	r3, [r7, #32]
          break;
 8003874:	e000      	b.n	8003878 <HAL_GPIO_Init+0x130>
          break;
 8003876:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2bff      	cmp	r3, #255	@ 0xff
 800387c:	d801      	bhi.n	8003882 <HAL_GPIO_Init+0x13a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	e001      	b.n	8003886 <HAL_GPIO_Init+0x13e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2bff      	cmp	r3, #255	@ 0xff
 800388c:	d802      	bhi.n	8003894 <HAL_GPIO_Init+0x14c>
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	e002      	b.n	800389a <HAL_GPIO_Init+0x152>
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	3b08      	subs	r3, #8
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	210f      	movs	r1, #15
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	401a      	ands	r2, r3
 80038ac:	6a39      	ldr	r1, [r7, #32]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	431a      	orrs	r2, r3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80b1 	beq.w	8003a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a00 <HAL_GPIO_Init+0x2b8>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003a00 <HAL_GPIO_Init+0x2b8>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6193      	str	r3, [r2, #24]
 80038d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003a00 <HAL_GPIO_Init+0x2b8>)
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038e0:	4a48      	ldr	r2, [pc, #288]	@ (8003a04 <HAL_GPIO_Init+0x2bc>)
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	3302      	adds	r3, #2
 80038e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	220f      	movs	r2, #15
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4013      	ands	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a40      	ldr	r2, [pc, #256]	@ (8003a08 <HAL_GPIO_Init+0x2c0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <HAL_GPIO_Init+0x1ec>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a3f      	ldr	r2, [pc, #252]	@ (8003a0c <HAL_GPIO_Init+0x2c4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00d      	beq.n	8003930 <HAL_GPIO_Init+0x1e8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a3e      	ldr	r2, [pc, #248]	@ (8003a10 <HAL_GPIO_Init+0x2c8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <HAL_GPIO_Init+0x1e4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a14 <HAL_GPIO_Init+0x2cc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_GPIO_Init+0x1e0>
 8003924:	2303      	movs	r3, #3
 8003926:	e006      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 8003928:	2304      	movs	r3, #4
 800392a:	e004      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 800392c:	2302      	movs	r3, #2
 800392e:	e002      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <HAL_GPIO_Init+0x1ee>
 8003934:	2300      	movs	r3, #0
 8003936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003938:	f002 0203 	and.w	r2, r2, #3
 800393c:	0092      	lsls	r2, r2, #2
 800393e:	4093      	lsls	r3, r2
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003946:	492f      	ldr	r1, [pc, #188]	@ (8003a04 <HAL_GPIO_Init+0x2bc>)
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	3302      	adds	r3, #2
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003960:	4b2d      	ldr	r3, [pc, #180]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	492c      	ldr	r1, [pc, #176]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]
 800396c:	e006      	b.n	800397c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800396e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	43db      	mvns	r3, r3
 8003976:	4928      	ldr	r1, [pc, #160]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003978:	4013      	ands	r3, r2
 800397a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003988:	4b23      	ldr	r3, [pc, #140]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	4922      	ldr	r1, [pc, #136]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	60cb      	str	r3, [r1, #12]
 8003994:	e006      	b.n	80039a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	43db      	mvns	r3, r3
 800399e:	491e      	ldr	r1, [pc, #120]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039b0:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4918      	ldr	r1, [pc, #96]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
 80039bc:	e006      	b.n	80039cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039be:	4b16      	ldr	r3, [pc, #88]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	4914      	ldr	r1, [pc, #80]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d021      	beq.n	8003a1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	490e      	ldr	r1, [pc, #56]	@ (8003a18 <HAL_GPIO_Init+0x2d0>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
 80039e4:	e021      	b.n	8003a2a <HAL_GPIO_Init+0x2e2>
 80039e6:	bf00      	nop
 80039e8:	10320000 	.word	0x10320000
 80039ec:	10310000 	.word	0x10310000
 80039f0:	10220000 	.word	0x10220000
 80039f4:	10210000 	.word	0x10210000
 80039f8:	10120000 	.word	0x10120000
 80039fc:	10110000 	.word	0x10110000
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40010000 	.word	0x40010000
 8003a08:	40010800 	.word	0x40010800
 8003a0c:	40010c00 	.word	0x40010c00
 8003a10:	40011000 	.word	0x40011000
 8003a14:	40011400 	.word	0x40011400
 8003a18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <HAL_GPIO_Init+0x304>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	4909      	ldr	r1, [pc, #36]	@ (8003a4c <HAL_GPIO_Init+0x304>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f47f ae8e 	bne.w	800375c <HAL_GPIO_Init+0x14>
  }
}
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	372c      	adds	r7, #44	@ 0x2c
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40010400 	.word	0x40010400

08003a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	887b      	ldrh	r3, [r7, #2]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
 8003a6c:	e001      	b.n	8003a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	460b      	mov	r3, r1
 8003a88:	807b      	strh	r3, [r7, #2]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a8e:	787b      	ldrb	r3, [r7, #1]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a94:	887a      	ldrh	r2, [r7, #2]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a9a:	e003      	b.n	8003aa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	041a      	lsls	r2, r3, #16
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	611a      	str	r2, [r3, #16]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
	...

08003ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003aba:	4b08      	ldr	r3, [pc, #32]	@ (8003adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d006      	beq.n	8003ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ac6:	4a05      	ldr	r2, [pc, #20]	@ (8003adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f806 	bl	8003ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40010400 	.word	0x40010400

08003ae0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e272      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8087 	beq.w	8003c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b14:	4b92      	ldr	r3, [pc, #584]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d00c      	beq.n	8003b3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b20:	4b8f      	ldr	r3, [pc, #572]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d112      	bne.n	8003b52 <HAL_RCC_OscConfig+0x5e>
 8003b2c:	4b8c      	ldr	r3, [pc, #560]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b38:	d10b      	bne.n	8003b52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3a:	4b89      	ldr	r3, [pc, #548]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d06c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x12c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d168      	bne.n	8003c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e24c      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x76>
 8003b5c:	4b80      	ldr	r3, [pc, #512]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a7f      	ldr	r2, [pc, #508]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	e02e      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd4>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x98>
 8003b72:	4b7b      	ldr	r3, [pc, #492]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7a      	ldr	r2, [pc, #488]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b78      	ldr	r3, [pc, #480]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a77      	ldr	r2, [pc, #476]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e01d      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd4>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0xbc>
 8003b96:	4b72      	ldr	r3, [pc, #456]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a71      	ldr	r2, [pc, #452]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6e      	ldr	r2, [pc, #440]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd4>
 8003bb0:	4b6b      	ldr	r3, [pc, #428]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6a      	ldr	r2, [pc, #424]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b68      	ldr	r3, [pc, #416]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a67      	ldr	r2, [pc, #412]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d013      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7ff fbcc 	bl	800336c <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7ff fbc8 	bl	800336c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	@ 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e200      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b5d      	ldr	r3, [pc, #372]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xe4>
 8003bf6:	e014      	b.n	8003c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7ff fbb8 	bl	800336c <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7ff fbb4 	bl	800336c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	@ 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e1ec      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	4b53      	ldr	r3, [pc, #332]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x10c>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d063      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c3a:	4b49      	ldr	r3, [pc, #292]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d11c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x18c>
 8003c46:	4b46      	ldr	r3, [pc, #280]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	4b43      	ldr	r3, [pc, #268]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_RCC_OscConfig+0x176>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d001      	beq.n	8003c6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e1c0      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4939      	ldr	r1, [pc, #228]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	e03a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d020      	beq.n	8003cca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c88:	4b36      	ldr	r3, [pc, #216]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7ff fb6d 	bl	800336c <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c96:	f7ff fb69 	bl	800336c <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e1a1      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4927      	ldr	r1, [pc, #156]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cca:	4b26      	ldr	r3, [pc, #152]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7ff fb4c 	bl	800336c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd8:	f7ff fb48 	bl	800336c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e180      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cea:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d03a      	beq.n	8003d78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d019      	beq.n	8003d3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0a:	4b17      	ldr	r3, [pc, #92]	@ (8003d68 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d10:	f7ff fb2c 	bl	800336c <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d18:	f7ff fb28 	bl	800336c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e160      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d60 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d36:	2001      	movs	r0, #1
 8003d38:	f000 face 	bl	80042d8 <RCC_Delay>
 8003d3c:	e01c      	b.n	8003d78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <HAL_RCC_OscConfig+0x274>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d44:	f7ff fb12 	bl	800336c <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4a:	e00f      	b.n	8003d6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4c:	f7ff fb0e 	bl	800336c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d908      	bls.n	8003d6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e146      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	42420000 	.word	0x42420000
 8003d68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	4b92      	ldr	r3, [pc, #584]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e9      	bne.n	8003d4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80a6 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8a:	4b8b      	ldr	r3, [pc, #556]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10d      	bne.n	8003db2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	4b88      	ldr	r3, [pc, #544]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	4a87      	ldr	r2, [pc, #540]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da0:	61d3      	str	r3, [r2, #28]
 8003da2:	4b85      	ldr	r3, [pc, #532]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dae:	2301      	movs	r3, #1
 8003db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db2:	4b82      	ldr	r3, [pc, #520]	@ (8003fbc <HAL_RCC_OscConfig+0x4c8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d118      	bne.n	8003df0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8003fbc <HAL_RCC_OscConfig+0x4c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fbc <HAL_RCC_OscConfig+0x4c8>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dca:	f7ff facf 	bl	800336c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd2:	f7ff facb 	bl	800336c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b64      	cmp	r3, #100	@ 0x64
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e103      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	4b75      	ldr	r3, [pc, #468]	@ (8003fbc <HAL_RCC_OscConfig+0x4c8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x312>
 8003df8:	4b6f      	ldr	r3, [pc, #444]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4a6e      	ldr	r2, [pc, #440]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6213      	str	r3, [r2, #32]
 8003e04:	e02d      	b.n	8003e62 <HAL_RCC_OscConfig+0x36e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x334>
 8003e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	4a69      	ldr	r2, [pc, #420]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6213      	str	r3, [r2, #32]
 8003e1a:	4b67      	ldr	r3, [pc, #412]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4a66      	ldr	r2, [pc, #408]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	6213      	str	r3, [r2, #32]
 8003e26:	e01c      	b.n	8003e62 <HAL_RCC_OscConfig+0x36e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b05      	cmp	r3, #5
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCC_OscConfig+0x356>
 8003e30:	4b61      	ldr	r3, [pc, #388]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4a60      	ldr	r2, [pc, #384]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	f043 0304 	orr.w	r3, r3, #4
 8003e3a:	6213      	str	r3, [r2, #32]
 8003e3c:	4b5e      	ldr	r3, [pc, #376]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4a5d      	ldr	r2, [pc, #372]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6213      	str	r3, [r2, #32]
 8003e48:	e00b      	b.n	8003e62 <HAL_RCC_OscConfig+0x36e>
 8003e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4a5a      	ldr	r2, [pc, #360]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	6213      	str	r3, [r2, #32]
 8003e56:	4b58      	ldr	r3, [pc, #352]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	4a57      	ldr	r2, [pc, #348]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e5c:	f023 0304 	bic.w	r3, r3, #4
 8003e60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d015      	beq.n	8003e96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6a:	f7ff fa7f 	bl	800336c <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7ff fa7b 	bl	800336c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e0b1      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e88:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ee      	beq.n	8003e72 <HAL_RCC_OscConfig+0x37e>
 8003e94:	e014      	b.n	8003ec0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e96:	f7ff fa69 	bl	800336c <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9c:	e00a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9e:	f7ff fa65 	bl	800336c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e09b      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb4:	4b40      	ldr	r3, [pc, #256]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ee      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	4a3b      	ldr	r2, [pc, #236]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8087 	beq.w	8003fea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003edc:	4b36      	ldr	r3, [pc, #216]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d061      	beq.n	8003fac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d146      	bne.n	8003f7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef0:	4b33      	ldr	r3, [pc, #204]	@ (8003fc0 <HAL_RCC_OscConfig+0x4cc>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef6:	f7ff fa39 	bl	800336c <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efe:	f7ff fa35 	bl	800336c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e06d      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f10:	4b29      	ldr	r3, [pc, #164]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f0      	bne.n	8003efe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f24:	d108      	bne.n	8003f38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f26:	4b24      	ldr	r3, [pc, #144]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4921      	ldr	r1, [pc, #132]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f38:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a19      	ldr	r1, [r3, #32]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	491b      	ldr	r1, [pc, #108]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f50:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc0 <HAL_RCC_OscConfig+0x4cc>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7ff fa09 	bl	800336c <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7ff fa05 	bl	800336c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e03d      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f70:	4b11      	ldr	r3, [pc, #68]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x46a>
 8003f7c:	e035      	b.n	8003fea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7e:	4b10      	ldr	r3, [pc, #64]	@ (8003fc0 <HAL_RCC_OscConfig+0x4cc>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7ff f9f2 	bl	800336c <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7ff f9ee 	bl	800336c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e026      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f9e:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <HAL_RCC_OscConfig+0x4c4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x498>
 8003faa:	e01e      	b.n	8003fea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e019      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_RCC_OscConfig+0x500>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d001      	beq.n	8003fea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000

08003ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0d0      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800400c:	4b6a      	ldr	r3, [pc, #424]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d910      	bls.n	800403c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b67      	ldr	r3, [pc, #412]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 0207 	bic.w	r2, r3, #7
 8004022:	4965      	ldr	r1, [pc, #404]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b63      	ldr	r3, [pc, #396]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0b8      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004054:	4b59      	ldr	r3, [pc, #356]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a58      	ldr	r2, [pc, #352]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 800405a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800405e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800406c:	4b53      	ldr	r3, [pc, #332]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4a52      	ldr	r2, [pc, #328]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004072:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004076:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b50      	ldr	r3, [pc, #320]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	494d      	ldr	r1, [pc, #308]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d040      	beq.n	8004118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b47      	ldr	r3, [pc, #284]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d115      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	4b41      	ldr	r3, [pc, #260]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e073      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c6:	4b3d      	ldr	r3, [pc, #244]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e06b      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d6:	4b39      	ldr	r3, [pc, #228]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f023 0203 	bic.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4936      	ldr	r1, [pc, #216]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e8:	f7ff f940 	bl	800336c <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f0:	f7ff f93c 	bl	800336c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e053      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	4b2d      	ldr	r3, [pc, #180]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 020c 	and.w	r2, r3, #12
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	429a      	cmp	r2, r3
 8004116:	d1eb      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004118:	4b27      	ldr	r3, [pc, #156]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d210      	bcs.n	8004148 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 0207 	bic.w	r2, r3, #7
 800412e:	4922      	ldr	r1, [pc, #136]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b20      	ldr	r3, [pc, #128]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e032      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004154:	4b19      	ldr	r3, [pc, #100]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4916      	ldr	r1, [pc, #88]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	4313      	orrs	r3, r2
 8004164:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004172:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	490e      	ldr	r1, [pc, #56]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004186:	f000 f821 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800418a:	4602      	mov	r2, r0
 800418c:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	490a      	ldr	r1, [pc, #40]	@ (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004198:	5ccb      	ldrb	r3, [r1, r3]
 800419a:	fa22 f303 	lsr.w	r3, r2, r3
 800419e:	4a09      	ldr	r2, [pc, #36]	@ (80041c4 <HAL_RCC_ClockConfig+0x1cc>)
 80041a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041a2:	4b09      	ldr	r3, [pc, #36]	@ (80041c8 <HAL_RCC_ClockConfig+0x1d0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff f89e 	bl	80032e8 <HAL_InitTick>

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40022000 	.word	0x40022000
 80041bc:	40021000 	.word	0x40021000
 80041c0:	0800b6e4 	.word	0x0800b6e4
 80041c4:	20000008 	.word	0x20000008
 80041c8:	2000000c 	.word	0x2000000c

080041cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x94>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d002      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0x30>
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d003      	beq.n	8004202 <HAL_RCC_GetSysClockFreq+0x36>
 80041fa:	e027      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041fc:	4b19      	ldr	r3, [pc, #100]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x98>)
 80041fe:	613b      	str	r3, [r7, #16]
      break;
 8004200:	e027      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	0c9b      	lsrs	r3, r3, #18
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	4a17      	ldr	r2, [pc, #92]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x9c>)
 800420c:	5cd3      	ldrb	r3, [r2, r3]
 800420e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d010      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800421a:	4b11      	ldr	r3, [pc, #68]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x94>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	0c5b      	lsrs	r3, r3, #17
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	4a11      	ldr	r2, [pc, #68]	@ (800426c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004226:	5cd3      	ldrb	r3, [r2, r3]
 8004228:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a0d      	ldr	r2, [pc, #52]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x98>)
 800422e:	fb03 f202 	mul.w	r2, r3, r2
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e004      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a0c      	ldr	r2, [pc, #48]	@ (8004270 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	613b      	str	r3, [r7, #16]
      break;
 800424a:	e002      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x98>)
 800424e:	613b      	str	r3, [r7, #16]
      break;
 8004250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004252:	693b      	ldr	r3, [r7, #16]
}
 8004254:	4618      	mov	r0, r3
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000
 8004264:	007a1200 	.word	0x007a1200
 8004268:	0800b6fc 	.word	0x0800b6fc
 800426c:	0800b70c 	.word	0x0800b70c
 8004270:	003d0900 	.word	0x003d0900

08004274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004278:	4b02      	ldr	r3, [pc, #8]	@ (8004284 <HAL_RCC_GetHCLKFreq+0x10>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	20000008 	.word	0x20000008

08004288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800428c:	f7ff fff2 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	4903      	ldr	r1, [pc, #12]	@ (80042ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40021000 	.word	0x40021000
 80042ac:	0800b6f4 	.word	0x0800b6f4

080042b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042b4:	f7ff ffde 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	0adb      	lsrs	r3, r3, #11
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4903      	ldr	r1, [pc, #12]	@ (80042d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000
 80042d4:	0800b6f4 	.word	0x0800b6f4

080042d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042e0:	4b0a      	ldr	r3, [pc, #40]	@ (800430c <RCC_Delay+0x34>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004310 <RCC_Delay+0x38>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	0a5b      	lsrs	r3, r3, #9
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	fb02 f303 	mul.w	r3, r2, r3
 80042f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042f4:	bf00      	nop
  }
  while (Delay --);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1e5a      	subs	r2, r3, #1
 80042fa:	60fa      	str	r2, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f9      	bne.n	80042f4 <RCC_Delay+0x1c>
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	20000008 	.word	0x20000008
 8004310:	10624dd3 	.word	0x10624dd3

08004314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e076      	b.n	8004414 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	2b00      	cmp	r3, #0
 800432c:	d108      	bne.n	8004340 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004336:	d009      	beq.n	800434c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	61da      	str	r2, [r3, #28]
 800433e:	e005      	b.n	800434c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fe fb3e 	bl	80029e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004382:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d0:	ea42 0103 	orr.w	r1, r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	0c1a      	lsrs	r2, r3, #16
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f002 0204 	and.w	r2, r2, #4
 80043f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004402:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800442c:	f7fe ff9e 	bl	800336c <HAL_GetTick>
 8004430:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d001      	beq.n	8004446 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
 8004444:	e12a      	b.n	800469c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_SPI_Transmit+0x36>
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e122      	b.n	800469c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_SPI_Transmit+0x48>
 8004460:	2302      	movs	r3, #2
 8004462:	e11b      	b.n	800469c <HAL_SPI_Transmit+0x280>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2203      	movs	r2, #3
 8004470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b2:	d10f      	bne.n	80044d4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044de:	2b40      	cmp	r3, #64	@ 0x40
 80044e0:	d007      	beq.n	80044f2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044fa:	d152      	bne.n	80045a2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_SPI_Transmit+0xee>
 8004504:	8b7b      	ldrh	r3, [r7, #26]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d145      	bne.n	8004596 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	881a      	ldrh	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	1c9a      	adds	r2, r3, #2
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800452e:	e032      	b.n	8004596 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d112      	bne.n	8004564 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004542:	881a      	ldrh	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	1c9a      	adds	r2, r3, #2
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004562:	e018      	b.n	8004596 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004564:	f7fe ff02 	bl	800336c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d803      	bhi.n	800457c <HAL_SPI_Transmit+0x160>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d102      	bne.n	8004582 <HAL_SPI_Transmit+0x166>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e082      	b.n	800469c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1c7      	bne.n	8004530 <HAL_SPI_Transmit+0x114>
 80045a0:	e053      	b.n	800464a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_SPI_Transmit+0x194>
 80045aa:	8b7b      	ldrh	r3, [r7, #26]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d147      	bne.n	8004640 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	330c      	adds	r3, #12
 80045ba:	7812      	ldrb	r2, [r2, #0]
 80045bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045d6:	e033      	b.n	8004640 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d113      	bne.n	800460e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	330c      	adds	r3, #12
 80045f0:	7812      	ldrb	r2, [r2, #0]
 80045f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800460c:	e018      	b.n	8004640 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800460e:	f7fe fead 	bl	800336c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d803      	bhi.n	8004626 <HAL_SPI_Transmit+0x20a>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d102      	bne.n	800462c <HAL_SPI_Transmit+0x210>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e02d      	b.n	800469c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1c6      	bne.n	80045d8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	6839      	ldr	r1, [r7, #0]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 fbd2 	bl	8004df8 <SPI_EndRxTxTransaction>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800469a:	2300      	movs	r3, #0
  }
}
 800469c:	4618      	mov	r0, r3
 800469e:	3720      	adds	r7, #32
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d001      	beq.n	80046c4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80046c0:	2302      	movs	r3, #2
 80046c2:	e104      	b.n	80048ce <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046cc:	d112      	bne.n	80046f4 <HAL_SPI_Receive+0x50>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10e      	bne.n	80046f4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2204      	movs	r2, #4
 80046da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046de:	88fa      	ldrh	r2, [r7, #6]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	4613      	mov	r3, r2
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f8f3 	bl	80048d6 <HAL_SPI_TransmitReceive>
 80046f0:	4603      	mov	r3, r0
 80046f2:	e0ec      	b.n	80048ce <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046f4:	f7fe fe3a 	bl	800336c <HAL_GetTick>
 80046f8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_SPI_Receive+0x62>
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e0e1      	b.n	80048ce <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_SPI_Receive+0x74>
 8004714:	2302      	movs	r3, #2
 8004716:	e0da      	b.n	80048ce <HAL_SPI_Receive+0x22a>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2204      	movs	r2, #4
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	88fa      	ldrh	r2, [r7, #6]
 800473e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004766:	d10f      	bne.n	8004788 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004776:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004786:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004792:	2b40      	cmp	r3, #64	@ 0x40
 8004794:	d007      	beq.n	80047a6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d170      	bne.n	8004890 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80047ae:	e035      	b.n	800481c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d115      	bne.n	80047ea <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f103 020c 	add.w	r2, r3, #12
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ca:	7812      	ldrb	r2, [r2, #0]
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047e8:	e018      	b.n	800481c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ea:	f7fe fdbf 	bl	800336c <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d803      	bhi.n	8004802 <HAL_SPI_Receive+0x15e>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d102      	bne.n	8004808 <HAL_SPI_Receive+0x164>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e058      	b.n	80048ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1c4      	bne.n	80047b0 <HAL_SPI_Receive+0x10c>
 8004826:	e038      	b.n	800489a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b01      	cmp	r3, #1
 8004834:	d113      	bne.n	800485e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004840:	b292      	uxth	r2, r2
 8004842:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	1c9a      	adds	r2, r3, #2
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800485c:	e018      	b.n	8004890 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800485e:	f7fe fd85 	bl	800336c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d803      	bhi.n	8004876 <HAL_SPI_Receive+0x1d2>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d102      	bne.n	800487c <HAL_SPI_Receive+0x1d8>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e01e      	b.n	80048ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1c6      	bne.n	8004828 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fa58 	bl	8004d54 <SPI_EndRxTransaction>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
  }
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b08a      	sub	sp, #40	@ 0x28
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048e4:	2301      	movs	r3, #1
 80048e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048e8:	f7fe fd40 	bl	800336c <HAL_GetTick>
 80048ec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048f4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004900:	7ffb      	ldrb	r3, [r7, #31]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d00c      	beq.n	8004920 <HAL_SPI_TransmitReceive+0x4a>
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800490c:	d106      	bne.n	800491c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <HAL_SPI_TransmitReceive+0x46>
 8004916:	7ffb      	ldrb	r3, [r7, #31]
 8004918:	2b04      	cmp	r3, #4
 800491a:	d001      	beq.n	8004920 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800491c:	2302      	movs	r3, #2
 800491e:	e17f      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_SPI_TransmitReceive+0x5c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_SPI_TransmitReceive+0x5c>
 800492c:	887b      	ldrh	r3, [r7, #2]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e174      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_SPI_TransmitReceive+0x6e>
 8004940:	2302      	movs	r3, #2
 8004942:	e16d      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x34a>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b04      	cmp	r3, #4
 8004956:	d003      	beq.n	8004960 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2205      	movs	r2, #5
 800495c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	887a      	ldrh	r2, [r7, #2]
 8004976:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	887a      	ldrh	r2, [r7, #2]
 8004982:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	887a      	ldrh	r2, [r7, #2]
 8004988:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d007      	beq.n	80049b4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049bc:	d17e      	bne.n	8004abc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_SPI_TransmitReceive+0xf6>
 80049c6:	8afb      	ldrh	r3, [r7, #22]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d16c      	bne.n	8004aa6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d0:	881a      	ldrh	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049dc:	1c9a      	adds	r2, r3, #2
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049f0:	e059      	b.n	8004aa6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d11b      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x162>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x162>
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d113      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a14:	881a      	ldrh	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a20:	1c9a      	adds	r2, r3, #2
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d119      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x1a4>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d014      	beq.n	8004a7a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5a:	b292      	uxth	r2, r2
 8004a5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	1c9a      	adds	r2, r3, #2
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a76:	2301      	movs	r3, #1
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a7a:	f7fe fc77 	bl	800336c <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d80d      	bhi.n	8004aa6 <HAL_SPI_TransmitReceive+0x1d0>
 8004a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d009      	beq.n	8004aa6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e0bc      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1a0      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x11c>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d19b      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x11c>
 8004aba:	e082      	b.n	8004bc2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_SPI_TransmitReceive+0x1f4>
 8004ac4:	8afb      	ldrh	r3, [r7, #22]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d171      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004af0:	e05d      	b.n	8004bae <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d11c      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x264>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d017      	beq.n	8004b3a <HAL_SPI_TransmitReceive+0x264>
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d114      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d119      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x2a6>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d014      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b7c:	f7fe fbf6 	bl	800336c <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d803      	bhi.n	8004b94 <HAL_SPI_TransmitReceive+0x2be>
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d102      	bne.n	8004b9a <HAL_SPI_TransmitReceive+0x2c4>
 8004b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e038      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d19c      	bne.n	8004af2 <HAL_SPI_TransmitReceive+0x21c>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d197      	bne.n	8004af2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bc2:	6a3a      	ldr	r2, [r7, #32]
 8004bc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f916 	bl	8004df8 <SPI_EndRxTxTransaction>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e01d      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3728      	adds	r7, #40	@ 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c36:	b2db      	uxtb	r3, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr
	...

08004c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c54:	f7fe fb8a 	bl	800336c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	4413      	add	r3, r2
 8004c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c64:	f7fe fb82 	bl	800336c <HAL_GetTick>
 8004c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c6a:	4b39      	ldr	r3, [pc, #228]	@ (8004d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	015b      	lsls	r3, r3, #5
 8004c70:	0d1b      	lsrs	r3, r3, #20
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	fb02 f303 	mul.w	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c7a:	e054      	b.n	8004d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d050      	beq.n	8004d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c84:	f7fe fb72 	bl	800336c <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d902      	bls.n	8004c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d13d      	bne.n	8004d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cb2:	d111      	bne.n	8004cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cbc:	d004      	beq.n	8004cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc6:	d107      	bne.n	8004cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce0:	d10f      	bne.n	8004d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e017      	b.n	8004d46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d19b      	bne.n	8004c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000008 	.word	0x20000008

08004d54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d68:	d111      	bne.n	8004d8e <SPI_EndRxTransaction+0x3a>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d72:	d004      	beq.n	8004d7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d7c:	d107      	bne.n	8004d8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d8c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d96:	d117      	bne.n	8004dc8 <SPI_EndRxTransaction+0x74>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004da0:	d112      	bne.n	8004dc8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2200      	movs	r2, #0
 8004daa:	2101      	movs	r1, #1
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff ff49 	bl	8004c44 <SPI_WaitFlagStateUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01a      	beq.n	8004dee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e013      	b.n	8004df0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2180      	movs	r1, #128	@ 0x80
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff ff36 	bl	8004c44 <SPI_WaitFlagStateUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e000      	b.n	8004df0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff ff18 	bl	8004c44 <SPI_WaitFlagStateUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e013      	b.n	8004e52 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2200      	movs	r2, #0
 8004e32:	2180      	movs	r1, #128	@ 0x80
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff ff05 	bl	8004c44 <SPI_WaitFlagStateUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e44:	f043 0220 	orr.w	r2, r3, #32
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e000      	b.n	8004e52 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e041      	b.n	8004ef0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fd fdfb 	bl	8002a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3304      	adds	r3, #4
 8004e96:	4619      	mov	r1, r3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	f000 f93f 	bl	800511c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d001      	beq.n	8004f10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e032      	b.n	8004f76 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a18      	ldr	r2, [pc, #96]	@ (8004f80 <HAL_TIM_Base_Start+0x88>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00e      	beq.n	8004f40 <HAL_TIM_Base_Start+0x48>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2a:	d009      	beq.n	8004f40 <HAL_TIM_Base_Start+0x48>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a14      	ldr	r2, [pc, #80]	@ (8004f84 <HAL_TIM_Base_Start+0x8c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <HAL_TIM_Base_Start+0x48>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a13      	ldr	r2, [pc, #76]	@ (8004f88 <HAL_TIM_Base_Start+0x90>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d111      	bne.n	8004f64 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d010      	beq.n	8004f74 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f62:	e007      	b.n	8004f74 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800

08004f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e0b4      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x186>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe0:	d03e      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0xd4>
 8004fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe6:	f200 8087 	bhi.w	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fee:	f000 8086 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x172>
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff6:	d87f      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b70      	cmp	r3, #112	@ 0x70
 8004ffa:	d01a      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0xa6>
 8004ffc:	2b70      	cmp	r3, #112	@ 0x70
 8004ffe:	d87b      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b60      	cmp	r3, #96	@ 0x60
 8005002:	d050      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005004:	2b60      	cmp	r3, #96	@ 0x60
 8005006:	d877      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b50      	cmp	r3, #80	@ 0x50
 800500a:	d03c      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0xfa>
 800500c:	2b50      	cmp	r3, #80	@ 0x50
 800500e:	d873      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b40      	cmp	r3, #64	@ 0x40
 8005012:	d058      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005014:	2b40      	cmp	r3, #64	@ 0x40
 8005016:	d86f      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b30      	cmp	r3, #48	@ 0x30
 800501a:	d064      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 800501c:	2b30      	cmp	r3, #48	@ 0x30
 800501e:	d86b      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b20      	cmp	r3, #32
 8005022:	d060      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005024:	2b20      	cmp	r3, #32
 8005026:	d867      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d05c      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 800502c:	2b10      	cmp	r3, #16
 800502e:	d05a      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005030:	e062      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005042:	f000 f950 	bl	80052e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	609a      	str	r2, [r3, #8]
      break;
 800505e:	e04f      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005070:	f000 f939 	bl	80052e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005082:	609a      	str	r2, [r3, #8]
      break;
 8005084:	e03c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005092:	461a      	mov	r2, r3
 8005094:	f000 f8b0 	bl	80051f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2150      	movs	r1, #80	@ 0x50
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f907 	bl	80052b2 <TIM_ITRx_SetConfig>
      break;
 80050a4:	e02c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050b2:	461a      	mov	r2, r3
 80050b4:	f000 f8ce 	bl	8005254 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2160      	movs	r1, #96	@ 0x60
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f8f7 	bl	80052b2 <TIM_ITRx_SetConfig>
      break;
 80050c4:	e01c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d2:	461a      	mov	r2, r3
 80050d4:	f000 f890 	bl	80051f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2140      	movs	r1, #64	@ 0x40
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f8e7 	bl	80052b2 <TIM_ITRx_SetConfig>
      break;
 80050e4:	e00c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f000 f8de 	bl	80052b2 <TIM_ITRx_SetConfig>
      break;
 80050f6:	e003      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
      break;
 80050fc:	e000      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a2f      	ldr	r2, [pc, #188]	@ (80051ec <TIM_Base_SetConfig+0xd0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00b      	beq.n	800514c <TIM_Base_SetConfig+0x30>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800513a:	d007      	beq.n	800514c <TIM_Base_SetConfig+0x30>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a2c      	ldr	r2, [pc, #176]	@ (80051f0 <TIM_Base_SetConfig+0xd4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_Base_SetConfig+0x30>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a2b      	ldr	r2, [pc, #172]	@ (80051f4 <TIM_Base_SetConfig+0xd8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a22      	ldr	r2, [pc, #136]	@ (80051ec <TIM_Base_SetConfig+0xd0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_Base_SetConfig+0x62>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800516c:	d007      	beq.n	800517e <TIM_Base_SetConfig+0x62>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1f      	ldr	r2, [pc, #124]	@ (80051f0 <TIM_Base_SetConfig+0xd4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_Base_SetConfig+0x62>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a1e      	ldr	r2, [pc, #120]	@ (80051f4 <TIM_Base_SetConfig+0xd8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d108      	bne.n	8005190 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a0d      	ldr	r2, [pc, #52]	@ (80051ec <TIM_Base_SetConfig+0xd0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d103      	bne.n	80051c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f023 0201 	bic.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	611a      	str	r2, [r3, #16]
  }
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40000800 	.word	0x40000800

080051f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f023 0201 	bic.w	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f023 030a 	bic.w	r3, r3, #10
 8005234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f023 0210 	bic.w	r2, r3, #16
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800527e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	031b      	lsls	r3, r3, #12
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005290:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	621a      	str	r2, [r3, #32]
}
 80052a8:	bf00      	nop
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f043 0307 	orr.w	r3, r3, #7
 80052d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	609a      	str	r2, [r3, #8]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr

080052e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b087      	sub	sp, #28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
 80052f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005300:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	021a      	lsls	r2, r3, #8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	431a      	orrs	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4313      	orrs	r3, r2
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	609a      	str	r2, [r3, #8]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005338:	2302      	movs	r3, #2
 800533a:	e046      	b.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a16      	ldr	r2, [pc, #88]	@ (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005388:	d009      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a12      	ldr	r2, [pc, #72]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a10      	ldr	r2, [pc, #64]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d10c      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40000400 	.word	0x40000400
 80053dc:	40000800 	.word	0x40000800

080053e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e042      	b.n	8005478 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fd fb56 	bl	8002ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2224      	movs	r2, #36	@ 0x24
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fd63 	bl	8005ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	@ 0x28
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b20      	cmp	r3, #32
 800549e:	d175      	bne.n	800558c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_UART_Transmit+0x2c>
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e06e      	b.n	800558e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2221      	movs	r2, #33	@ 0x21
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054be:	f7fd ff55 	bl	800336c <HAL_GetTick>
 80054c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	88fa      	ldrh	r2, [r7, #6]
 80054ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d8:	d108      	bne.n	80054ec <HAL_UART_Transmit+0x6c>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	e003      	b.n	80054f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054f4:	e02e      	b.n	8005554 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2180      	movs	r1, #128	@ 0x80
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 fb01 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e03a      	b.n	800558e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800552c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	3302      	adds	r3, #2
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	e007      	b.n	8005546 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	781a      	ldrb	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	3301      	adds	r3, #1
 8005544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1cb      	bne.n	80054f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2200      	movs	r2, #0
 8005566:	2140      	movs	r1, #64	@ 0x40
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 facd 	bl	8005b08 <UART_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e006      	b.n	800558e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	e000      	b.n	800558e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800558c:	2302      	movs	r3, #2
  }
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b0ba      	sub	sp, #232	@ 0xe8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80055be:	2300      	movs	r3, #0
 80055c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80055d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10f      	bne.n	80055fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d009      	beq.n	80055fe <HAL_UART_IRQHandler+0x66>
 80055ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fbbc 	bl	8005d74 <UART_Receive_IT>
      return;
 80055fc:	e25b      	b.n	8005ab6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80de 	beq.w	80057c4 <HAL_UART_IRQHandler+0x22c>
 8005608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d106      	bne.n	8005622 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005618:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80d1 	beq.w	80057c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <HAL_UART_IRQHandler+0xae>
 800562e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563e:	f043 0201 	orr.w	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_UART_IRQHandler+0xd2>
 8005652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005662:	f043 0202 	orr.w	r2, r3, #2
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800566a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <HAL_UART_IRQHandler+0xf6>
 8005676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005686:	f043 0204 	orr.w	r2, r3, #4
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800568e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d011      	beq.n	80056be <HAL_UART_IRQHandler+0x126>
 800569a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d105      	bne.n	80056b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b6:	f043 0208 	orr.w	r2, r3, #8
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 81f2 	beq.w	8005aac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_UART_IRQHandler+0x14e>
 80056d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fb47 	bl	8005d74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d103      	bne.n	8005712 <HAL_UART_IRQHandler+0x17a>
 800570a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800570e:	2b00      	cmp	r3, #0
 8005710:	d04f      	beq.n	80057b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa51 	bl	8005bba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d041      	beq.n	80057aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3314      	adds	r3, #20
 800572c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800573c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3314      	adds	r3, #20
 800574e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005752:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800575e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800576a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1d9      	bne.n	8005726 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d013      	beq.n	80057a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577e:	4a7e      	ldr	r2, [pc, #504]	@ (8005978 <HAL_UART_IRQHandler+0x3e0>)
 8005780:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005786:	4618      	mov	r0, r3
 8005788:	f7fd ff66 	bl	8003658 <HAL_DMA_Abort_IT>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d016      	beq.n	80057c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800579c:	4610      	mov	r0, r2
 800579e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	e00e      	b.n	80057c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f99c 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	e00a      	b.n	80057c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f998 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b0:	e006      	b.n	80057c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f994 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80057be:	e175      	b.n	8005aac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c0:	bf00      	nop
    return;
 80057c2:	e173      	b.n	8005aac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	f040 814f 	bne.w	8005a6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 8148 	beq.w	8005a6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8141 	beq.w	8005a6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057ea:	2300      	movs	r3, #0
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60bb      	str	r3, [r7, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	60bb      	str	r3, [r7, #8]
 80057fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80b6 	beq.w	800597c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800581c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8145 	beq.w	8005ab0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800582a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800582e:	429a      	cmp	r2, r3
 8005830:	f080 813e 	bcs.w	8005ab0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800583a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b20      	cmp	r3, #32
 8005844:	f000 8088 	beq.w	8005958 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800585e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005862:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005866:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005874:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005878:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005880:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800588c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1d9      	bne.n	8005848 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3314      	adds	r3, #20
 80058b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e1      	bne.n	8005894 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80058f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80058f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e3      	bne.n	80058d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	330c      	adds	r3, #12
 800591c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005928:	f023 0310 	bic.w	r3, r3, #16
 800592c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800593a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800593c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005940:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e3      	bne.n	8005916 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005952:	4618      	mov	r0, r3
 8005954:	f7fd fe45 	bl	80035e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005966:	b29b      	uxth	r3, r3
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f8bf 	bl	8005af2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005974:	e09c      	b.n	8005ab0 <HAL_UART_IRQHandler+0x518>
 8005976:	bf00      	nop
 8005978:	08005c7f 	.word	0x08005c7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005984:	b29b      	uxth	r3, r3
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 808e 	beq.w	8005ab4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8089 	beq.w	8005ab4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80059c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80059c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e3      	bne.n	80059a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3314      	adds	r3, #20
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	623b      	str	r3, [r7, #32]
   return(result);
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3314      	adds	r3, #20
 80059fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80059fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e3      	bne.n	80059da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0310 	bic.w	r3, r3, #16
 8005a36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a44:	61fa      	str	r2, [r7, #28]
 8005a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	69b9      	ldr	r1, [r7, #24]
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	617b      	str	r3, [r7, #20]
   return(result);
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e3      	bne.n	8005a20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f844 	bl	8005af2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a6a:	e023      	b.n	8005ab4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d009      	beq.n	8005a8c <HAL_UART_IRQHandler+0x4f4>
 8005a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f90e 	bl	8005ca6 <UART_Transmit_IT>
    return;
 8005a8a:	e014      	b.n	8005ab6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00e      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x51e>
 8005a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f94d 	bl	8005d44 <UART_EndTransmit_IT>
    return;
 8005aaa:	e004      	b.n	8005ab6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005aac:	bf00      	nop
 8005aae:	e002      	b.n	8005ab6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ab0:	bf00      	nop
 8005ab2:	e000      	b.n	8005ab6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ab4:	bf00      	nop
  }
}
 8005ab6:	37e8      	adds	r7, #232	@ 0xe8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr

08005ace <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	4613      	mov	r3, r2
 8005b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b18:	e03b      	b.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b20:	d037      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b22:	f7fd fc23 	bl	800336c <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	6a3a      	ldr	r2, [r7, #32]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d302      	bcc.n	8005b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e03a      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d023      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b80      	cmp	r3, #128	@ 0x80
 8005b4e:	d020      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b40      	cmp	r3, #64	@ 0x40
 8005b54:	d01d      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d116      	bne.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f81d 	bl	8005bba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2208      	movs	r2, #8
 8005b84:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e00f      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	bf0c      	ite	eq
 8005ba2:	2301      	moveq	r3, #1
 8005ba4:	2300      	movne	r3, #0
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d0b4      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b095      	sub	sp, #84	@ 0x54
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005be2:	643a      	str	r2, [r7, #64]	@ 0x40
 8005be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005be8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3314      	adds	r3, #20
 8005bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d119      	bne.n	8005c66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f023 0310 	bic.w	r3, r3, #16
 8005c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c52:	61ba      	str	r2, [r7, #24]
 8005c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e5      	bne.n	8005c32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c74:	bf00      	nop
 8005c76:	3754      	adds	r7, #84	@ 0x54
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr

08005c7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7ff ff21 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b21      	cmp	r3, #33	@ 0x21
 8005cb8:	d13e      	bne.n	8005d38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc2:	d114      	bne.n	8005cee <UART_Transmit_IT+0x48>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d110      	bne.n	8005cee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	1c9a      	adds	r2, r3, #2
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	621a      	str	r2, [r3, #32]
 8005cec:	e008      	b.n	8005d00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	1c59      	adds	r1, r3, #1
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6211      	str	r1, [r2, #32]
 8005cf8:	781a      	ldrb	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10f      	bne.n	8005d34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	e000      	b.n	8005d3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
  }
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff fea9 	bl	8005abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08c      	sub	sp, #48	@ 0x30
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b22      	cmp	r3, #34	@ 0x22
 8005d86:	f040 80ae 	bne.w	8005ee6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d92:	d117      	bne.n	8005dc4 <UART_Receive_IT+0x50>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d113      	bne.n	8005dc4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbc:	1c9a      	adds	r2, r3, #2
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8005dc2:	e026      	b.n	8005e12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dd6:	d007      	beq.n	8005de8 <UART_Receive_IT+0x74>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <UART_Receive_IT+0x82>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	e008      	b.n	8005e08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d15d      	bne.n	8005ee2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0220 	bic.w	r2, r2, #32
 8005e34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695a      	ldr	r2, [r3, #20]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0201 	bic.w	r2, r2, #1
 8005e54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d135      	bne.n	8005ed8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	330c      	adds	r3, #12
 8005e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	613b      	str	r3, [r7, #16]
   return(result);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f023 0310 	bic.w	r3, r3, #16
 8005e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	330c      	adds	r3, #12
 8005e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e92:	623a      	str	r2, [r7, #32]
 8005e94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	69f9      	ldr	r1, [r7, #28]
 8005e98:	6a3a      	ldr	r2, [r7, #32]
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e5      	bne.n	8005e72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d10a      	bne.n	8005eca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff fe0e 	bl	8005af2 <HAL_UARTEx_RxEventCallback>
 8005ed6:	e002      	b.n	8005ede <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff fdf8 	bl	8005ace <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e002      	b.n	8005ee8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e000      	b.n	8005ee8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ee6:	2302      	movs	r3, #2
  }
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3730      	adds	r7, #48	@ 0x30
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005f2a:	f023 030c 	bic.w	r3, r3, #12
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	430b      	orrs	r3, r1
 8005f36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a2c      	ldr	r2, [pc, #176]	@ (8006004 <UART_SetConfig+0x114>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d103      	bne.n	8005f60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f58:	f7fe f9aa 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	e002      	b.n	8005f66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f60:	f7fe f992 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8005f64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009a      	lsls	r2, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	4a22      	ldr	r2, [pc, #136]	@ (8006008 <UART_SetConfig+0x118>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	0119      	lsls	r1, r3, #4
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009a      	lsls	r2, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006008 <UART_SetConfig+0x118>)
 8005f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	2064      	movs	r0, #100	@ 0x64
 8005fa6:	fb00 f303 	mul.w	r3, r0, r3
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	3332      	adds	r3, #50	@ 0x32
 8005fb0:	4a15      	ldr	r2, [pc, #84]	@ (8006008 <UART_SetConfig+0x118>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fbc:	4419      	add	r1, r3
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009a      	lsls	r2, r3, #2
 8005fc8:	441a      	add	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006008 <UART_SetConfig+0x118>)
 8005fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	2064      	movs	r0, #100	@ 0x64
 8005fde:	fb00 f303 	mul.w	r3, r0, r3
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	3332      	adds	r3, #50	@ 0x32
 8005fe8:	4a07      	ldr	r2, [pc, #28]	@ (8006008 <UART_SetConfig+0x118>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	f003 020f 	and.w	r2, r3, #15
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40013800 	.word	0x40013800
 8006008:	51eb851f 	.word	0x51eb851f

0800600c <atoi>:
 800600c:	220a      	movs	r2, #10
 800600e:	2100      	movs	r1, #0
 8006010:	f000 b87c 	b.w	800610c <strtol>

08006014 <_strtol_l.constprop.0>:
 8006014:	2b24      	cmp	r3, #36	@ 0x24
 8006016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800601a:	4686      	mov	lr, r0
 800601c:	4690      	mov	r8, r2
 800601e:	d801      	bhi.n	8006024 <_strtol_l.constprop.0+0x10>
 8006020:	2b01      	cmp	r3, #1
 8006022:	d106      	bne.n	8006032 <_strtol_l.constprop.0+0x1e>
 8006024:	f001 f86e 	bl	8007104 <__errno>
 8006028:	2316      	movs	r3, #22
 800602a:	6003      	str	r3, [r0, #0]
 800602c:	2000      	movs	r0, #0
 800602e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006032:	460d      	mov	r5, r1
 8006034:	4833      	ldr	r0, [pc, #204]	@ (8006104 <_strtol_l.constprop.0+0xf0>)
 8006036:	462a      	mov	r2, r5
 8006038:	f815 4b01 	ldrb.w	r4, [r5], #1
 800603c:	5d06      	ldrb	r6, [r0, r4]
 800603e:	f016 0608 	ands.w	r6, r6, #8
 8006042:	d1f8      	bne.n	8006036 <_strtol_l.constprop.0+0x22>
 8006044:	2c2d      	cmp	r4, #45	@ 0x2d
 8006046:	d12d      	bne.n	80060a4 <_strtol_l.constprop.0+0x90>
 8006048:	2601      	movs	r6, #1
 800604a:	782c      	ldrb	r4, [r5, #0]
 800604c:	1c95      	adds	r5, r2, #2
 800604e:	f033 0210 	bics.w	r2, r3, #16
 8006052:	d109      	bne.n	8006068 <_strtol_l.constprop.0+0x54>
 8006054:	2c30      	cmp	r4, #48	@ 0x30
 8006056:	d12a      	bne.n	80060ae <_strtol_l.constprop.0+0x9a>
 8006058:	782a      	ldrb	r2, [r5, #0]
 800605a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800605e:	2a58      	cmp	r2, #88	@ 0x58
 8006060:	d125      	bne.n	80060ae <_strtol_l.constprop.0+0x9a>
 8006062:	2310      	movs	r3, #16
 8006064:	786c      	ldrb	r4, [r5, #1]
 8006066:	3502      	adds	r5, #2
 8006068:	2200      	movs	r2, #0
 800606a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800606e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006072:	fbbc f9f3 	udiv	r9, ip, r3
 8006076:	4610      	mov	r0, r2
 8006078:	fb03 ca19 	mls	sl, r3, r9, ip
 800607c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006080:	2f09      	cmp	r7, #9
 8006082:	d81b      	bhi.n	80060bc <_strtol_l.constprop.0+0xa8>
 8006084:	463c      	mov	r4, r7
 8006086:	42a3      	cmp	r3, r4
 8006088:	dd27      	ble.n	80060da <_strtol_l.constprop.0+0xc6>
 800608a:	1c57      	adds	r7, r2, #1
 800608c:	d007      	beq.n	800609e <_strtol_l.constprop.0+0x8a>
 800608e:	4581      	cmp	r9, r0
 8006090:	d320      	bcc.n	80060d4 <_strtol_l.constprop.0+0xc0>
 8006092:	d101      	bne.n	8006098 <_strtol_l.constprop.0+0x84>
 8006094:	45a2      	cmp	sl, r4
 8006096:	db1d      	blt.n	80060d4 <_strtol_l.constprop.0+0xc0>
 8006098:	2201      	movs	r2, #1
 800609a:	fb00 4003 	mla	r0, r0, r3, r4
 800609e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060a2:	e7eb      	b.n	800607c <_strtol_l.constprop.0+0x68>
 80060a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80060a6:	bf04      	itt	eq
 80060a8:	782c      	ldrbeq	r4, [r5, #0]
 80060aa:	1c95      	addeq	r5, r2, #2
 80060ac:	e7cf      	b.n	800604e <_strtol_l.constprop.0+0x3a>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1da      	bne.n	8006068 <_strtol_l.constprop.0+0x54>
 80060b2:	2c30      	cmp	r4, #48	@ 0x30
 80060b4:	bf0c      	ite	eq
 80060b6:	2308      	moveq	r3, #8
 80060b8:	230a      	movne	r3, #10
 80060ba:	e7d5      	b.n	8006068 <_strtol_l.constprop.0+0x54>
 80060bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80060c0:	2f19      	cmp	r7, #25
 80060c2:	d801      	bhi.n	80060c8 <_strtol_l.constprop.0+0xb4>
 80060c4:	3c37      	subs	r4, #55	@ 0x37
 80060c6:	e7de      	b.n	8006086 <_strtol_l.constprop.0+0x72>
 80060c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80060cc:	2f19      	cmp	r7, #25
 80060ce:	d804      	bhi.n	80060da <_strtol_l.constprop.0+0xc6>
 80060d0:	3c57      	subs	r4, #87	@ 0x57
 80060d2:	e7d8      	b.n	8006086 <_strtol_l.constprop.0+0x72>
 80060d4:	f04f 32ff 	mov.w	r2, #4294967295
 80060d8:	e7e1      	b.n	800609e <_strtol_l.constprop.0+0x8a>
 80060da:	1c53      	adds	r3, r2, #1
 80060dc:	d108      	bne.n	80060f0 <_strtol_l.constprop.0+0xdc>
 80060de:	2322      	movs	r3, #34	@ 0x22
 80060e0:	4660      	mov	r0, ip
 80060e2:	f8ce 3000 	str.w	r3, [lr]
 80060e6:	f1b8 0f00 	cmp.w	r8, #0
 80060ea:	d0a0      	beq.n	800602e <_strtol_l.constprop.0+0x1a>
 80060ec:	1e69      	subs	r1, r5, #1
 80060ee:	e006      	b.n	80060fe <_strtol_l.constprop.0+0xea>
 80060f0:	b106      	cbz	r6, 80060f4 <_strtol_l.constprop.0+0xe0>
 80060f2:	4240      	negs	r0, r0
 80060f4:	f1b8 0f00 	cmp.w	r8, #0
 80060f8:	d099      	beq.n	800602e <_strtol_l.constprop.0+0x1a>
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	d1f6      	bne.n	80060ec <_strtol_l.constprop.0+0xd8>
 80060fe:	f8c8 1000 	str.w	r1, [r8]
 8006102:	e794      	b.n	800602e <_strtol_l.constprop.0+0x1a>
 8006104:	0800b70f 	.word	0x0800b70f

08006108 <_strtol_r>:
 8006108:	f7ff bf84 	b.w	8006014 <_strtol_l.constprop.0>

0800610c <strtol>:
 800610c:	4613      	mov	r3, r2
 800610e:	460a      	mov	r2, r1
 8006110:	4601      	mov	r1, r0
 8006112:	4802      	ldr	r0, [pc, #8]	@ (800611c <strtol+0x10>)
 8006114:	6800      	ldr	r0, [r0, #0]
 8006116:	f7ff bf7d 	b.w	8006014 <_strtol_l.constprop.0>
 800611a:	bf00      	nop
 800611c:	20000020 	.word	0x20000020

08006120 <__cvt>:
 8006120:	2b00      	cmp	r3, #0
 8006122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006126:	461d      	mov	r5, r3
 8006128:	bfbb      	ittet	lt
 800612a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800612e:	461d      	movlt	r5, r3
 8006130:	2300      	movge	r3, #0
 8006132:	232d      	movlt	r3, #45	@ 0x2d
 8006134:	b088      	sub	sp, #32
 8006136:	4614      	mov	r4, r2
 8006138:	bfb8      	it	lt
 800613a:	4614      	movlt	r4, r2
 800613c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800613e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006140:	7013      	strb	r3, [r2, #0]
 8006142:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006144:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006148:	f023 0820 	bic.w	r8, r3, #32
 800614c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006150:	d005      	beq.n	800615e <__cvt+0x3e>
 8006152:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006156:	d100      	bne.n	800615a <__cvt+0x3a>
 8006158:	3601      	adds	r6, #1
 800615a:	2302      	movs	r3, #2
 800615c:	e000      	b.n	8006160 <__cvt+0x40>
 800615e:	2303      	movs	r3, #3
 8006160:	aa07      	add	r2, sp, #28
 8006162:	9204      	str	r2, [sp, #16]
 8006164:	aa06      	add	r2, sp, #24
 8006166:	e9cd a202 	strd	sl, r2, [sp, #8]
 800616a:	e9cd 3600 	strd	r3, r6, [sp]
 800616e:	4622      	mov	r2, r4
 8006170:	462b      	mov	r3, r5
 8006172:	f001 f8a5 	bl	80072c0 <_dtoa_r>
 8006176:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800617a:	4607      	mov	r7, r0
 800617c:	d119      	bne.n	80061b2 <__cvt+0x92>
 800617e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006180:	07db      	lsls	r3, r3, #31
 8006182:	d50e      	bpl.n	80061a2 <__cvt+0x82>
 8006184:	eb00 0906 	add.w	r9, r0, r6
 8006188:	2200      	movs	r2, #0
 800618a:	2300      	movs	r3, #0
 800618c:	4620      	mov	r0, r4
 800618e:	4629      	mov	r1, r5
 8006190:	f7fa fc0a 	bl	80009a8 <__aeabi_dcmpeq>
 8006194:	b108      	cbz	r0, 800619a <__cvt+0x7a>
 8006196:	f8cd 901c 	str.w	r9, [sp, #28]
 800619a:	2230      	movs	r2, #48	@ 0x30
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	454b      	cmp	r3, r9
 80061a0:	d31e      	bcc.n	80061e0 <__cvt+0xc0>
 80061a2:	4638      	mov	r0, r7
 80061a4:	9b07      	ldr	r3, [sp, #28]
 80061a6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80061a8:	1bdb      	subs	r3, r3, r7
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	b008      	add	sp, #32
 80061ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061b6:	eb00 0906 	add.w	r9, r0, r6
 80061ba:	d1e5      	bne.n	8006188 <__cvt+0x68>
 80061bc:	7803      	ldrb	r3, [r0, #0]
 80061be:	2b30      	cmp	r3, #48	@ 0x30
 80061c0:	d10a      	bne.n	80061d8 <__cvt+0xb8>
 80061c2:	2200      	movs	r2, #0
 80061c4:	2300      	movs	r3, #0
 80061c6:	4620      	mov	r0, r4
 80061c8:	4629      	mov	r1, r5
 80061ca:	f7fa fbed 	bl	80009a8 <__aeabi_dcmpeq>
 80061ce:	b918      	cbnz	r0, 80061d8 <__cvt+0xb8>
 80061d0:	f1c6 0601 	rsb	r6, r6, #1
 80061d4:	f8ca 6000 	str.w	r6, [sl]
 80061d8:	f8da 3000 	ldr.w	r3, [sl]
 80061dc:	4499      	add	r9, r3
 80061de:	e7d3      	b.n	8006188 <__cvt+0x68>
 80061e0:	1c59      	adds	r1, r3, #1
 80061e2:	9107      	str	r1, [sp, #28]
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	e7d9      	b.n	800619c <__cvt+0x7c>

080061e8 <__exponent>:
 80061e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ea:	2900      	cmp	r1, #0
 80061ec:	bfb6      	itet	lt
 80061ee:	232d      	movlt	r3, #45	@ 0x2d
 80061f0:	232b      	movge	r3, #43	@ 0x2b
 80061f2:	4249      	neglt	r1, r1
 80061f4:	2909      	cmp	r1, #9
 80061f6:	7002      	strb	r2, [r0, #0]
 80061f8:	7043      	strb	r3, [r0, #1]
 80061fa:	dd29      	ble.n	8006250 <__exponent+0x68>
 80061fc:	f10d 0307 	add.w	r3, sp, #7
 8006200:	461d      	mov	r5, r3
 8006202:	270a      	movs	r7, #10
 8006204:	fbb1 f6f7 	udiv	r6, r1, r7
 8006208:	461a      	mov	r2, r3
 800620a:	fb07 1416 	mls	r4, r7, r6, r1
 800620e:	3430      	adds	r4, #48	@ 0x30
 8006210:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006214:	460c      	mov	r4, r1
 8006216:	2c63      	cmp	r4, #99	@ 0x63
 8006218:	4631      	mov	r1, r6
 800621a:	f103 33ff 	add.w	r3, r3, #4294967295
 800621e:	dcf1      	bgt.n	8006204 <__exponent+0x1c>
 8006220:	3130      	adds	r1, #48	@ 0x30
 8006222:	1e94      	subs	r4, r2, #2
 8006224:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006228:	4623      	mov	r3, r4
 800622a:	1c41      	adds	r1, r0, #1
 800622c:	42ab      	cmp	r3, r5
 800622e:	d30a      	bcc.n	8006246 <__exponent+0x5e>
 8006230:	f10d 0309 	add.w	r3, sp, #9
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	42ac      	cmp	r4, r5
 8006238:	bf88      	it	hi
 800623a:	2300      	movhi	r3, #0
 800623c:	3302      	adds	r3, #2
 800623e:	4403      	add	r3, r0
 8006240:	1a18      	subs	r0, r3, r0
 8006242:	b003      	add	sp, #12
 8006244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006246:	f813 6b01 	ldrb.w	r6, [r3], #1
 800624a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800624e:	e7ed      	b.n	800622c <__exponent+0x44>
 8006250:	2330      	movs	r3, #48	@ 0x30
 8006252:	3130      	adds	r1, #48	@ 0x30
 8006254:	7083      	strb	r3, [r0, #2]
 8006256:	70c1      	strb	r1, [r0, #3]
 8006258:	1d03      	adds	r3, r0, #4
 800625a:	e7f1      	b.n	8006240 <__exponent+0x58>

0800625c <_printf_float>:
 800625c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006260:	b091      	sub	sp, #68	@ 0x44
 8006262:	460c      	mov	r4, r1
 8006264:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006268:	4616      	mov	r6, r2
 800626a:	461f      	mov	r7, r3
 800626c:	4605      	mov	r5, r0
 800626e:	f000 feff 	bl	8007070 <_localeconv_r>
 8006272:	6803      	ldr	r3, [r0, #0]
 8006274:	4618      	mov	r0, r3
 8006276:	9308      	str	r3, [sp, #32]
 8006278:	f7f9 ff6a 	bl	8000150 <strlen>
 800627c:	2300      	movs	r3, #0
 800627e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006280:	f8d8 3000 	ldr.w	r3, [r8]
 8006284:	9009      	str	r0, [sp, #36]	@ 0x24
 8006286:	3307      	adds	r3, #7
 8006288:	f023 0307 	bic.w	r3, r3, #7
 800628c:	f103 0208 	add.w	r2, r3, #8
 8006290:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006294:	f8d4 b000 	ldr.w	fp, [r4]
 8006298:	f8c8 2000 	str.w	r2, [r8]
 800629c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062a6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80062aa:	f04f 32ff 	mov.w	r2, #4294967295
 80062ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062b6:	4b9c      	ldr	r3, [pc, #624]	@ (8006528 <_printf_float+0x2cc>)
 80062b8:	f7fa fba8 	bl	8000a0c <__aeabi_dcmpun>
 80062bc:	bb70      	cbnz	r0, 800631c <_printf_float+0xc0>
 80062be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062c2:	f04f 32ff 	mov.w	r2, #4294967295
 80062c6:	4b98      	ldr	r3, [pc, #608]	@ (8006528 <_printf_float+0x2cc>)
 80062c8:	f7fa fb82 	bl	80009d0 <__aeabi_dcmple>
 80062cc:	bb30      	cbnz	r0, 800631c <_printf_float+0xc0>
 80062ce:	2200      	movs	r2, #0
 80062d0:	2300      	movs	r3, #0
 80062d2:	4640      	mov	r0, r8
 80062d4:	4649      	mov	r1, r9
 80062d6:	f7fa fb71 	bl	80009bc <__aeabi_dcmplt>
 80062da:	b110      	cbz	r0, 80062e2 <_printf_float+0x86>
 80062dc:	232d      	movs	r3, #45	@ 0x2d
 80062de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062e2:	4a92      	ldr	r2, [pc, #584]	@ (800652c <_printf_float+0x2d0>)
 80062e4:	4b92      	ldr	r3, [pc, #584]	@ (8006530 <_printf_float+0x2d4>)
 80062e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80062ea:	bf94      	ite	ls
 80062ec:	4690      	movls	r8, r2
 80062ee:	4698      	movhi	r8, r3
 80062f0:	2303      	movs	r3, #3
 80062f2:	f04f 0900 	mov.w	r9, #0
 80062f6:	6123      	str	r3, [r4, #16]
 80062f8:	f02b 0304 	bic.w	r3, fp, #4
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	4633      	mov	r3, r6
 8006300:	4621      	mov	r1, r4
 8006302:	4628      	mov	r0, r5
 8006304:	9700      	str	r7, [sp, #0]
 8006306:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006308:	f000 f9d4 	bl	80066b4 <_printf_common>
 800630c:	3001      	adds	r0, #1
 800630e:	f040 8090 	bne.w	8006432 <_printf_float+0x1d6>
 8006312:	f04f 30ff 	mov.w	r0, #4294967295
 8006316:	b011      	add	sp, #68	@ 0x44
 8006318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631c:	4642      	mov	r2, r8
 800631e:	464b      	mov	r3, r9
 8006320:	4640      	mov	r0, r8
 8006322:	4649      	mov	r1, r9
 8006324:	f7fa fb72 	bl	8000a0c <__aeabi_dcmpun>
 8006328:	b148      	cbz	r0, 800633e <_printf_float+0xe2>
 800632a:	464b      	mov	r3, r9
 800632c:	2b00      	cmp	r3, #0
 800632e:	bfb8      	it	lt
 8006330:	232d      	movlt	r3, #45	@ 0x2d
 8006332:	4a80      	ldr	r2, [pc, #512]	@ (8006534 <_printf_float+0x2d8>)
 8006334:	bfb8      	it	lt
 8006336:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800633a:	4b7f      	ldr	r3, [pc, #508]	@ (8006538 <_printf_float+0x2dc>)
 800633c:	e7d3      	b.n	80062e6 <_printf_float+0x8a>
 800633e:	6863      	ldr	r3, [r4, #4]
 8006340:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	d13f      	bne.n	80063c8 <_printf_float+0x16c>
 8006348:	2306      	movs	r3, #6
 800634a:	6063      	str	r3, [r4, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	9206      	str	r2, [sp, #24]
 8006356:	aa0e      	add	r2, sp, #56	@ 0x38
 8006358:	e9cd a204 	strd	sl, r2, [sp, #16]
 800635c:	aa0d      	add	r2, sp, #52	@ 0x34
 800635e:	9203      	str	r2, [sp, #12]
 8006360:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006364:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	4642      	mov	r2, r8
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	4628      	mov	r0, r5
 8006370:	464b      	mov	r3, r9
 8006372:	910a      	str	r1, [sp, #40]	@ 0x28
 8006374:	f7ff fed4 	bl	8006120 <__cvt>
 8006378:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800637a:	4680      	mov	r8, r0
 800637c:	2947      	cmp	r1, #71	@ 0x47
 800637e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006380:	d128      	bne.n	80063d4 <_printf_float+0x178>
 8006382:	1cc8      	adds	r0, r1, #3
 8006384:	db02      	blt.n	800638c <_printf_float+0x130>
 8006386:	6863      	ldr	r3, [r4, #4]
 8006388:	4299      	cmp	r1, r3
 800638a:	dd40      	ble.n	800640e <_printf_float+0x1b2>
 800638c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006390:	fa5f fa8a 	uxtb.w	sl, sl
 8006394:	4652      	mov	r2, sl
 8006396:	3901      	subs	r1, #1
 8006398:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800639c:	910d      	str	r1, [sp, #52]	@ 0x34
 800639e:	f7ff ff23 	bl	80061e8 <__exponent>
 80063a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063a4:	4681      	mov	r9, r0
 80063a6:	1813      	adds	r3, r2, r0
 80063a8:	2a01      	cmp	r2, #1
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	dc02      	bgt.n	80063b4 <_printf_float+0x158>
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	07d2      	lsls	r2, r2, #31
 80063b2:	d501      	bpl.n	80063b8 <_printf_float+0x15c>
 80063b4:	3301      	adds	r3, #1
 80063b6:	6123      	str	r3, [r4, #16]
 80063b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d09e      	beq.n	80062fe <_printf_float+0xa2>
 80063c0:	232d      	movs	r3, #45	@ 0x2d
 80063c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063c6:	e79a      	b.n	80062fe <_printf_float+0xa2>
 80063c8:	2947      	cmp	r1, #71	@ 0x47
 80063ca:	d1bf      	bne.n	800634c <_printf_float+0xf0>
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1bd      	bne.n	800634c <_printf_float+0xf0>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e7ba      	b.n	800634a <_printf_float+0xee>
 80063d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063d8:	d9dc      	bls.n	8006394 <_printf_float+0x138>
 80063da:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80063de:	d118      	bne.n	8006412 <_printf_float+0x1b6>
 80063e0:	2900      	cmp	r1, #0
 80063e2:	6863      	ldr	r3, [r4, #4]
 80063e4:	dd0b      	ble.n	80063fe <_printf_float+0x1a2>
 80063e6:	6121      	str	r1, [r4, #16]
 80063e8:	b913      	cbnz	r3, 80063f0 <_printf_float+0x194>
 80063ea:	6822      	ldr	r2, [r4, #0]
 80063ec:	07d0      	lsls	r0, r2, #31
 80063ee:	d502      	bpl.n	80063f6 <_printf_float+0x19a>
 80063f0:	3301      	adds	r3, #1
 80063f2:	440b      	add	r3, r1
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	f04f 0900 	mov.w	r9, #0
 80063fa:	65a1      	str	r1, [r4, #88]	@ 0x58
 80063fc:	e7dc      	b.n	80063b8 <_printf_float+0x15c>
 80063fe:	b913      	cbnz	r3, 8006406 <_printf_float+0x1aa>
 8006400:	6822      	ldr	r2, [r4, #0]
 8006402:	07d2      	lsls	r2, r2, #31
 8006404:	d501      	bpl.n	800640a <_printf_float+0x1ae>
 8006406:	3302      	adds	r3, #2
 8006408:	e7f4      	b.n	80063f4 <_printf_float+0x198>
 800640a:	2301      	movs	r3, #1
 800640c:	e7f2      	b.n	80063f4 <_printf_float+0x198>
 800640e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006414:	4299      	cmp	r1, r3
 8006416:	db05      	blt.n	8006424 <_printf_float+0x1c8>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	6121      	str	r1, [r4, #16]
 800641c:	07d8      	lsls	r0, r3, #31
 800641e:	d5ea      	bpl.n	80063f6 <_printf_float+0x19a>
 8006420:	1c4b      	adds	r3, r1, #1
 8006422:	e7e7      	b.n	80063f4 <_printf_float+0x198>
 8006424:	2900      	cmp	r1, #0
 8006426:	bfcc      	ite	gt
 8006428:	2201      	movgt	r2, #1
 800642a:	f1c1 0202 	rsble	r2, r1, #2
 800642e:	4413      	add	r3, r2
 8006430:	e7e0      	b.n	80063f4 <_printf_float+0x198>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	055a      	lsls	r2, r3, #21
 8006436:	d407      	bmi.n	8006448 <_printf_float+0x1ec>
 8006438:	6923      	ldr	r3, [r4, #16]
 800643a:	4642      	mov	r2, r8
 800643c:	4631      	mov	r1, r6
 800643e:	4628      	mov	r0, r5
 8006440:	47b8      	blx	r7
 8006442:	3001      	adds	r0, #1
 8006444:	d12b      	bne.n	800649e <_printf_float+0x242>
 8006446:	e764      	b.n	8006312 <_printf_float+0xb6>
 8006448:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800644c:	f240 80dc 	bls.w	8006608 <_printf_float+0x3ac>
 8006450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006454:	2200      	movs	r2, #0
 8006456:	2300      	movs	r3, #0
 8006458:	f7fa faa6 	bl	80009a8 <__aeabi_dcmpeq>
 800645c:	2800      	cmp	r0, #0
 800645e:	d033      	beq.n	80064c8 <_printf_float+0x26c>
 8006460:	2301      	movs	r3, #1
 8006462:	4631      	mov	r1, r6
 8006464:	4628      	mov	r0, r5
 8006466:	4a35      	ldr	r2, [pc, #212]	@ (800653c <_printf_float+0x2e0>)
 8006468:	47b8      	blx	r7
 800646a:	3001      	adds	r0, #1
 800646c:	f43f af51 	beq.w	8006312 <_printf_float+0xb6>
 8006470:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006474:	4543      	cmp	r3, r8
 8006476:	db02      	blt.n	800647e <_printf_float+0x222>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	07d8      	lsls	r0, r3, #31
 800647c:	d50f      	bpl.n	800649e <_printf_float+0x242>
 800647e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006482:	4631      	mov	r1, r6
 8006484:	4628      	mov	r0, r5
 8006486:	47b8      	blx	r7
 8006488:	3001      	adds	r0, #1
 800648a:	f43f af42 	beq.w	8006312 <_printf_float+0xb6>
 800648e:	f04f 0900 	mov.w	r9, #0
 8006492:	f108 38ff 	add.w	r8, r8, #4294967295
 8006496:	f104 0a1a 	add.w	sl, r4, #26
 800649a:	45c8      	cmp	r8, r9
 800649c:	dc09      	bgt.n	80064b2 <_printf_float+0x256>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	079b      	lsls	r3, r3, #30
 80064a2:	f100 8102 	bmi.w	80066aa <_printf_float+0x44e>
 80064a6:	68e0      	ldr	r0, [r4, #12]
 80064a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064aa:	4298      	cmp	r0, r3
 80064ac:	bfb8      	it	lt
 80064ae:	4618      	movlt	r0, r3
 80064b0:	e731      	b.n	8006316 <_printf_float+0xba>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4652      	mov	r2, sl
 80064b6:	4631      	mov	r1, r6
 80064b8:	4628      	mov	r0, r5
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	f43f af28 	beq.w	8006312 <_printf_float+0xb6>
 80064c2:	f109 0901 	add.w	r9, r9, #1
 80064c6:	e7e8      	b.n	800649a <_printf_float+0x23e>
 80064c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dc38      	bgt.n	8006540 <_printf_float+0x2e4>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4631      	mov	r1, r6
 80064d2:	4628      	mov	r0, r5
 80064d4:	4a19      	ldr	r2, [pc, #100]	@ (800653c <_printf_float+0x2e0>)
 80064d6:	47b8      	blx	r7
 80064d8:	3001      	adds	r0, #1
 80064da:	f43f af1a 	beq.w	8006312 <_printf_float+0xb6>
 80064de:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80064e2:	ea59 0303 	orrs.w	r3, r9, r3
 80064e6:	d102      	bne.n	80064ee <_printf_float+0x292>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	07d9      	lsls	r1, r3, #31
 80064ec:	d5d7      	bpl.n	800649e <_printf_float+0x242>
 80064ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064f2:	4631      	mov	r1, r6
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b8      	blx	r7
 80064f8:	3001      	adds	r0, #1
 80064fa:	f43f af0a 	beq.w	8006312 <_printf_float+0xb6>
 80064fe:	f04f 0a00 	mov.w	sl, #0
 8006502:	f104 0b1a 	add.w	fp, r4, #26
 8006506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006508:	425b      	negs	r3, r3
 800650a:	4553      	cmp	r3, sl
 800650c:	dc01      	bgt.n	8006512 <_printf_float+0x2b6>
 800650e:	464b      	mov	r3, r9
 8006510:	e793      	b.n	800643a <_printf_float+0x1de>
 8006512:	2301      	movs	r3, #1
 8006514:	465a      	mov	r2, fp
 8006516:	4631      	mov	r1, r6
 8006518:	4628      	mov	r0, r5
 800651a:	47b8      	blx	r7
 800651c:	3001      	adds	r0, #1
 800651e:	f43f aef8 	beq.w	8006312 <_printf_float+0xb6>
 8006522:	f10a 0a01 	add.w	sl, sl, #1
 8006526:	e7ee      	b.n	8006506 <_printf_float+0x2aa>
 8006528:	7fefffff 	.word	0x7fefffff
 800652c:	0800b80f 	.word	0x0800b80f
 8006530:	0800b813 	.word	0x0800b813
 8006534:	0800b817 	.word	0x0800b817
 8006538:	0800b81b 	.word	0x0800b81b
 800653c:	0800b81f 	.word	0x0800b81f
 8006540:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006542:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006546:	4553      	cmp	r3, sl
 8006548:	bfa8      	it	ge
 800654a:	4653      	movge	r3, sl
 800654c:	2b00      	cmp	r3, #0
 800654e:	4699      	mov	r9, r3
 8006550:	dc36      	bgt.n	80065c0 <_printf_float+0x364>
 8006552:	f04f 0b00 	mov.w	fp, #0
 8006556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800655a:	f104 021a 	add.w	r2, r4, #26
 800655e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006560:	930a      	str	r3, [sp, #40]	@ 0x28
 8006562:	eba3 0309 	sub.w	r3, r3, r9
 8006566:	455b      	cmp	r3, fp
 8006568:	dc31      	bgt.n	80065ce <_printf_float+0x372>
 800656a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800656c:	459a      	cmp	sl, r3
 800656e:	dc3a      	bgt.n	80065e6 <_printf_float+0x38a>
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	07da      	lsls	r2, r3, #31
 8006574:	d437      	bmi.n	80065e6 <_printf_float+0x38a>
 8006576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006578:	ebaa 0903 	sub.w	r9, sl, r3
 800657c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800657e:	ebaa 0303 	sub.w	r3, sl, r3
 8006582:	4599      	cmp	r9, r3
 8006584:	bfa8      	it	ge
 8006586:	4699      	movge	r9, r3
 8006588:	f1b9 0f00 	cmp.w	r9, #0
 800658c:	dc33      	bgt.n	80065f6 <_printf_float+0x39a>
 800658e:	f04f 0800 	mov.w	r8, #0
 8006592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006596:	f104 0b1a 	add.w	fp, r4, #26
 800659a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800659c:	ebaa 0303 	sub.w	r3, sl, r3
 80065a0:	eba3 0309 	sub.w	r3, r3, r9
 80065a4:	4543      	cmp	r3, r8
 80065a6:	f77f af7a 	ble.w	800649e <_printf_float+0x242>
 80065aa:	2301      	movs	r3, #1
 80065ac:	465a      	mov	r2, fp
 80065ae:	4631      	mov	r1, r6
 80065b0:	4628      	mov	r0, r5
 80065b2:	47b8      	blx	r7
 80065b4:	3001      	adds	r0, #1
 80065b6:	f43f aeac 	beq.w	8006312 <_printf_float+0xb6>
 80065ba:	f108 0801 	add.w	r8, r8, #1
 80065be:	e7ec      	b.n	800659a <_printf_float+0x33e>
 80065c0:	4642      	mov	r2, r8
 80065c2:	4631      	mov	r1, r6
 80065c4:	4628      	mov	r0, r5
 80065c6:	47b8      	blx	r7
 80065c8:	3001      	adds	r0, #1
 80065ca:	d1c2      	bne.n	8006552 <_printf_float+0x2f6>
 80065cc:	e6a1      	b.n	8006312 <_printf_float+0xb6>
 80065ce:	2301      	movs	r3, #1
 80065d0:	4631      	mov	r1, r6
 80065d2:	4628      	mov	r0, r5
 80065d4:	920a      	str	r2, [sp, #40]	@ 0x28
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	f43f ae9a 	beq.w	8006312 <_printf_float+0xb6>
 80065de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065e0:	f10b 0b01 	add.w	fp, fp, #1
 80065e4:	e7bb      	b.n	800655e <_printf_float+0x302>
 80065e6:	4631      	mov	r1, r6
 80065e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065ec:	4628      	mov	r0, r5
 80065ee:	47b8      	blx	r7
 80065f0:	3001      	adds	r0, #1
 80065f2:	d1c0      	bne.n	8006576 <_printf_float+0x31a>
 80065f4:	e68d      	b.n	8006312 <_printf_float+0xb6>
 80065f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065f8:	464b      	mov	r3, r9
 80065fa:	4631      	mov	r1, r6
 80065fc:	4628      	mov	r0, r5
 80065fe:	4442      	add	r2, r8
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	d1c3      	bne.n	800658e <_printf_float+0x332>
 8006606:	e684      	b.n	8006312 <_printf_float+0xb6>
 8006608:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800660c:	f1ba 0f01 	cmp.w	sl, #1
 8006610:	dc01      	bgt.n	8006616 <_printf_float+0x3ba>
 8006612:	07db      	lsls	r3, r3, #31
 8006614:	d536      	bpl.n	8006684 <_printf_float+0x428>
 8006616:	2301      	movs	r3, #1
 8006618:	4642      	mov	r2, r8
 800661a:	4631      	mov	r1, r6
 800661c:	4628      	mov	r0, r5
 800661e:	47b8      	blx	r7
 8006620:	3001      	adds	r0, #1
 8006622:	f43f ae76 	beq.w	8006312 <_printf_float+0xb6>
 8006626:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	f43f ae6e 	beq.w	8006312 <_printf_float+0xb6>
 8006636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800663a:	2200      	movs	r2, #0
 800663c:	2300      	movs	r3, #0
 800663e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006642:	f7fa f9b1 	bl	80009a8 <__aeabi_dcmpeq>
 8006646:	b9c0      	cbnz	r0, 800667a <_printf_float+0x41e>
 8006648:	4653      	mov	r3, sl
 800664a:	f108 0201 	add.w	r2, r8, #1
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	47b8      	blx	r7
 8006654:	3001      	adds	r0, #1
 8006656:	d10c      	bne.n	8006672 <_printf_float+0x416>
 8006658:	e65b      	b.n	8006312 <_printf_float+0xb6>
 800665a:	2301      	movs	r3, #1
 800665c:	465a      	mov	r2, fp
 800665e:	4631      	mov	r1, r6
 8006660:	4628      	mov	r0, r5
 8006662:	47b8      	blx	r7
 8006664:	3001      	adds	r0, #1
 8006666:	f43f ae54 	beq.w	8006312 <_printf_float+0xb6>
 800666a:	f108 0801 	add.w	r8, r8, #1
 800666e:	45d0      	cmp	r8, sl
 8006670:	dbf3      	blt.n	800665a <_printf_float+0x3fe>
 8006672:	464b      	mov	r3, r9
 8006674:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006678:	e6e0      	b.n	800643c <_printf_float+0x1e0>
 800667a:	f04f 0800 	mov.w	r8, #0
 800667e:	f104 0b1a 	add.w	fp, r4, #26
 8006682:	e7f4      	b.n	800666e <_printf_float+0x412>
 8006684:	2301      	movs	r3, #1
 8006686:	4642      	mov	r2, r8
 8006688:	e7e1      	b.n	800664e <_printf_float+0x3f2>
 800668a:	2301      	movs	r3, #1
 800668c:	464a      	mov	r2, r9
 800668e:	4631      	mov	r1, r6
 8006690:	4628      	mov	r0, r5
 8006692:	47b8      	blx	r7
 8006694:	3001      	adds	r0, #1
 8006696:	f43f ae3c 	beq.w	8006312 <_printf_float+0xb6>
 800669a:	f108 0801 	add.w	r8, r8, #1
 800669e:	68e3      	ldr	r3, [r4, #12]
 80066a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80066a2:	1a5b      	subs	r3, r3, r1
 80066a4:	4543      	cmp	r3, r8
 80066a6:	dcf0      	bgt.n	800668a <_printf_float+0x42e>
 80066a8:	e6fd      	b.n	80064a6 <_printf_float+0x24a>
 80066aa:	f04f 0800 	mov.w	r8, #0
 80066ae:	f104 0919 	add.w	r9, r4, #25
 80066b2:	e7f4      	b.n	800669e <_printf_float+0x442>

080066b4 <_printf_common>:
 80066b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b8:	4616      	mov	r6, r2
 80066ba:	4698      	mov	r8, r3
 80066bc:	688a      	ldr	r2, [r1, #8]
 80066be:	690b      	ldr	r3, [r1, #16]
 80066c0:	4607      	mov	r7, r0
 80066c2:	4293      	cmp	r3, r2
 80066c4:	bfb8      	it	lt
 80066c6:	4613      	movlt	r3, r2
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066ce:	460c      	mov	r4, r1
 80066d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066d4:	b10a      	cbz	r2, 80066da <_printf_common+0x26>
 80066d6:	3301      	adds	r3, #1
 80066d8:	6033      	str	r3, [r6, #0]
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	0699      	lsls	r1, r3, #26
 80066de:	bf42      	ittt	mi
 80066e0:	6833      	ldrmi	r3, [r6, #0]
 80066e2:	3302      	addmi	r3, #2
 80066e4:	6033      	strmi	r3, [r6, #0]
 80066e6:	6825      	ldr	r5, [r4, #0]
 80066e8:	f015 0506 	ands.w	r5, r5, #6
 80066ec:	d106      	bne.n	80066fc <_printf_common+0x48>
 80066ee:	f104 0a19 	add.w	sl, r4, #25
 80066f2:	68e3      	ldr	r3, [r4, #12]
 80066f4:	6832      	ldr	r2, [r6, #0]
 80066f6:	1a9b      	subs	r3, r3, r2
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	dc2b      	bgt.n	8006754 <_printf_common+0xa0>
 80066fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006700:	6822      	ldr	r2, [r4, #0]
 8006702:	3b00      	subs	r3, #0
 8006704:	bf18      	it	ne
 8006706:	2301      	movne	r3, #1
 8006708:	0692      	lsls	r2, r2, #26
 800670a:	d430      	bmi.n	800676e <_printf_common+0xba>
 800670c:	4641      	mov	r1, r8
 800670e:	4638      	mov	r0, r7
 8006710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006714:	47c8      	blx	r9
 8006716:	3001      	adds	r0, #1
 8006718:	d023      	beq.n	8006762 <_printf_common+0xae>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	6922      	ldr	r2, [r4, #16]
 800671e:	f003 0306 	and.w	r3, r3, #6
 8006722:	2b04      	cmp	r3, #4
 8006724:	bf14      	ite	ne
 8006726:	2500      	movne	r5, #0
 8006728:	6833      	ldreq	r3, [r6, #0]
 800672a:	f04f 0600 	mov.w	r6, #0
 800672e:	bf08      	it	eq
 8006730:	68e5      	ldreq	r5, [r4, #12]
 8006732:	f104 041a 	add.w	r4, r4, #26
 8006736:	bf08      	it	eq
 8006738:	1aed      	subeq	r5, r5, r3
 800673a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800673e:	bf08      	it	eq
 8006740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006744:	4293      	cmp	r3, r2
 8006746:	bfc4      	itt	gt
 8006748:	1a9b      	subgt	r3, r3, r2
 800674a:	18ed      	addgt	r5, r5, r3
 800674c:	42b5      	cmp	r5, r6
 800674e:	d11a      	bne.n	8006786 <_printf_common+0xd2>
 8006750:	2000      	movs	r0, #0
 8006752:	e008      	b.n	8006766 <_printf_common+0xb2>
 8006754:	2301      	movs	r3, #1
 8006756:	4652      	mov	r2, sl
 8006758:	4641      	mov	r1, r8
 800675a:	4638      	mov	r0, r7
 800675c:	47c8      	blx	r9
 800675e:	3001      	adds	r0, #1
 8006760:	d103      	bne.n	800676a <_printf_common+0xb6>
 8006762:	f04f 30ff 	mov.w	r0, #4294967295
 8006766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676a:	3501      	adds	r5, #1
 800676c:	e7c1      	b.n	80066f2 <_printf_common+0x3e>
 800676e:	2030      	movs	r0, #48	@ 0x30
 8006770:	18e1      	adds	r1, r4, r3
 8006772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800677c:	4422      	add	r2, r4
 800677e:	3302      	adds	r3, #2
 8006780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006784:	e7c2      	b.n	800670c <_printf_common+0x58>
 8006786:	2301      	movs	r3, #1
 8006788:	4622      	mov	r2, r4
 800678a:	4641      	mov	r1, r8
 800678c:	4638      	mov	r0, r7
 800678e:	47c8      	blx	r9
 8006790:	3001      	adds	r0, #1
 8006792:	d0e6      	beq.n	8006762 <_printf_common+0xae>
 8006794:	3601      	adds	r6, #1
 8006796:	e7d9      	b.n	800674c <_printf_common+0x98>

08006798 <_printf_i>:
 8006798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800679c:	7e0f      	ldrb	r7, [r1, #24]
 800679e:	4691      	mov	r9, r2
 80067a0:	2f78      	cmp	r7, #120	@ 0x78
 80067a2:	4680      	mov	r8, r0
 80067a4:	460c      	mov	r4, r1
 80067a6:	469a      	mov	sl, r3
 80067a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067ae:	d807      	bhi.n	80067c0 <_printf_i+0x28>
 80067b0:	2f62      	cmp	r7, #98	@ 0x62
 80067b2:	d80a      	bhi.n	80067ca <_printf_i+0x32>
 80067b4:	2f00      	cmp	r7, #0
 80067b6:	f000 80d3 	beq.w	8006960 <_printf_i+0x1c8>
 80067ba:	2f58      	cmp	r7, #88	@ 0x58
 80067bc:	f000 80ba 	beq.w	8006934 <_printf_i+0x19c>
 80067c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067c8:	e03a      	b.n	8006840 <_printf_i+0xa8>
 80067ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067ce:	2b15      	cmp	r3, #21
 80067d0:	d8f6      	bhi.n	80067c0 <_printf_i+0x28>
 80067d2:	a101      	add	r1, pc, #4	@ (adr r1, 80067d8 <_printf_i+0x40>)
 80067d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067d8:	08006831 	.word	0x08006831
 80067dc:	08006845 	.word	0x08006845
 80067e0:	080067c1 	.word	0x080067c1
 80067e4:	080067c1 	.word	0x080067c1
 80067e8:	080067c1 	.word	0x080067c1
 80067ec:	080067c1 	.word	0x080067c1
 80067f0:	08006845 	.word	0x08006845
 80067f4:	080067c1 	.word	0x080067c1
 80067f8:	080067c1 	.word	0x080067c1
 80067fc:	080067c1 	.word	0x080067c1
 8006800:	080067c1 	.word	0x080067c1
 8006804:	08006947 	.word	0x08006947
 8006808:	0800686f 	.word	0x0800686f
 800680c:	08006901 	.word	0x08006901
 8006810:	080067c1 	.word	0x080067c1
 8006814:	080067c1 	.word	0x080067c1
 8006818:	08006969 	.word	0x08006969
 800681c:	080067c1 	.word	0x080067c1
 8006820:	0800686f 	.word	0x0800686f
 8006824:	080067c1 	.word	0x080067c1
 8006828:	080067c1 	.word	0x080067c1
 800682c:	08006909 	.word	0x08006909
 8006830:	6833      	ldr	r3, [r6, #0]
 8006832:	1d1a      	adds	r2, r3, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6032      	str	r2, [r6, #0]
 8006838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800683c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006840:	2301      	movs	r3, #1
 8006842:	e09e      	b.n	8006982 <_printf_i+0x1ea>
 8006844:	6833      	ldr	r3, [r6, #0]
 8006846:	6820      	ldr	r0, [r4, #0]
 8006848:	1d19      	adds	r1, r3, #4
 800684a:	6031      	str	r1, [r6, #0]
 800684c:	0606      	lsls	r6, r0, #24
 800684e:	d501      	bpl.n	8006854 <_printf_i+0xbc>
 8006850:	681d      	ldr	r5, [r3, #0]
 8006852:	e003      	b.n	800685c <_printf_i+0xc4>
 8006854:	0645      	lsls	r5, r0, #25
 8006856:	d5fb      	bpl.n	8006850 <_printf_i+0xb8>
 8006858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800685c:	2d00      	cmp	r5, #0
 800685e:	da03      	bge.n	8006868 <_printf_i+0xd0>
 8006860:	232d      	movs	r3, #45	@ 0x2d
 8006862:	426d      	negs	r5, r5
 8006864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006868:	230a      	movs	r3, #10
 800686a:	4859      	ldr	r0, [pc, #356]	@ (80069d0 <_printf_i+0x238>)
 800686c:	e011      	b.n	8006892 <_printf_i+0xfa>
 800686e:	6821      	ldr	r1, [r4, #0]
 8006870:	6833      	ldr	r3, [r6, #0]
 8006872:	0608      	lsls	r0, r1, #24
 8006874:	f853 5b04 	ldr.w	r5, [r3], #4
 8006878:	d402      	bmi.n	8006880 <_printf_i+0xe8>
 800687a:	0649      	lsls	r1, r1, #25
 800687c:	bf48      	it	mi
 800687e:	b2ad      	uxthmi	r5, r5
 8006880:	2f6f      	cmp	r7, #111	@ 0x6f
 8006882:	6033      	str	r3, [r6, #0]
 8006884:	bf14      	ite	ne
 8006886:	230a      	movne	r3, #10
 8006888:	2308      	moveq	r3, #8
 800688a:	4851      	ldr	r0, [pc, #324]	@ (80069d0 <_printf_i+0x238>)
 800688c:	2100      	movs	r1, #0
 800688e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006892:	6866      	ldr	r6, [r4, #4]
 8006894:	2e00      	cmp	r6, #0
 8006896:	bfa8      	it	ge
 8006898:	6821      	ldrge	r1, [r4, #0]
 800689a:	60a6      	str	r6, [r4, #8]
 800689c:	bfa4      	itt	ge
 800689e:	f021 0104 	bicge.w	r1, r1, #4
 80068a2:	6021      	strge	r1, [r4, #0]
 80068a4:	b90d      	cbnz	r5, 80068aa <_printf_i+0x112>
 80068a6:	2e00      	cmp	r6, #0
 80068a8:	d04b      	beq.n	8006942 <_printf_i+0x1aa>
 80068aa:	4616      	mov	r6, r2
 80068ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80068b0:	fb03 5711 	mls	r7, r3, r1, r5
 80068b4:	5dc7      	ldrb	r7, [r0, r7]
 80068b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068ba:	462f      	mov	r7, r5
 80068bc:	42bb      	cmp	r3, r7
 80068be:	460d      	mov	r5, r1
 80068c0:	d9f4      	bls.n	80068ac <_printf_i+0x114>
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d10b      	bne.n	80068de <_printf_i+0x146>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	07df      	lsls	r7, r3, #31
 80068ca:	d508      	bpl.n	80068de <_printf_i+0x146>
 80068cc:	6923      	ldr	r3, [r4, #16]
 80068ce:	6861      	ldr	r1, [r4, #4]
 80068d0:	4299      	cmp	r1, r3
 80068d2:	bfde      	ittt	le
 80068d4:	2330      	movle	r3, #48	@ 0x30
 80068d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068de:	1b92      	subs	r2, r2, r6
 80068e0:	6122      	str	r2, [r4, #16]
 80068e2:	464b      	mov	r3, r9
 80068e4:	4621      	mov	r1, r4
 80068e6:	4640      	mov	r0, r8
 80068e8:	f8cd a000 	str.w	sl, [sp]
 80068ec:	aa03      	add	r2, sp, #12
 80068ee:	f7ff fee1 	bl	80066b4 <_printf_common>
 80068f2:	3001      	adds	r0, #1
 80068f4:	d14a      	bne.n	800698c <_printf_i+0x1f4>
 80068f6:	f04f 30ff 	mov.w	r0, #4294967295
 80068fa:	b004      	add	sp, #16
 80068fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	f043 0320 	orr.w	r3, r3, #32
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	2778      	movs	r7, #120	@ 0x78
 800690a:	4832      	ldr	r0, [pc, #200]	@ (80069d4 <_printf_i+0x23c>)
 800690c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	6831      	ldr	r1, [r6, #0]
 8006914:	061f      	lsls	r7, r3, #24
 8006916:	f851 5b04 	ldr.w	r5, [r1], #4
 800691a:	d402      	bmi.n	8006922 <_printf_i+0x18a>
 800691c:	065f      	lsls	r7, r3, #25
 800691e:	bf48      	it	mi
 8006920:	b2ad      	uxthmi	r5, r5
 8006922:	6031      	str	r1, [r6, #0]
 8006924:	07d9      	lsls	r1, r3, #31
 8006926:	bf44      	itt	mi
 8006928:	f043 0320 	orrmi.w	r3, r3, #32
 800692c:	6023      	strmi	r3, [r4, #0]
 800692e:	b11d      	cbz	r5, 8006938 <_printf_i+0x1a0>
 8006930:	2310      	movs	r3, #16
 8006932:	e7ab      	b.n	800688c <_printf_i+0xf4>
 8006934:	4826      	ldr	r0, [pc, #152]	@ (80069d0 <_printf_i+0x238>)
 8006936:	e7e9      	b.n	800690c <_printf_i+0x174>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	f023 0320 	bic.w	r3, r3, #32
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	e7f6      	b.n	8006930 <_printf_i+0x198>
 8006942:	4616      	mov	r6, r2
 8006944:	e7bd      	b.n	80068c2 <_printf_i+0x12a>
 8006946:	6833      	ldr	r3, [r6, #0]
 8006948:	6825      	ldr	r5, [r4, #0]
 800694a:	1d18      	adds	r0, r3, #4
 800694c:	6961      	ldr	r1, [r4, #20]
 800694e:	6030      	str	r0, [r6, #0]
 8006950:	062e      	lsls	r6, r5, #24
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	d501      	bpl.n	800695a <_printf_i+0x1c2>
 8006956:	6019      	str	r1, [r3, #0]
 8006958:	e002      	b.n	8006960 <_printf_i+0x1c8>
 800695a:	0668      	lsls	r0, r5, #25
 800695c:	d5fb      	bpl.n	8006956 <_printf_i+0x1be>
 800695e:	8019      	strh	r1, [r3, #0]
 8006960:	2300      	movs	r3, #0
 8006962:	4616      	mov	r6, r2
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	e7bc      	b.n	80068e2 <_printf_i+0x14a>
 8006968:	6833      	ldr	r3, [r6, #0]
 800696a:	2100      	movs	r1, #0
 800696c:	1d1a      	adds	r2, r3, #4
 800696e:	6032      	str	r2, [r6, #0]
 8006970:	681e      	ldr	r6, [r3, #0]
 8006972:	6862      	ldr	r2, [r4, #4]
 8006974:	4630      	mov	r0, r6
 8006976:	f000 fbfa 	bl	800716e <memchr>
 800697a:	b108      	cbz	r0, 8006980 <_printf_i+0x1e8>
 800697c:	1b80      	subs	r0, r0, r6
 800697e:	6060      	str	r0, [r4, #4]
 8006980:	6863      	ldr	r3, [r4, #4]
 8006982:	6123      	str	r3, [r4, #16]
 8006984:	2300      	movs	r3, #0
 8006986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800698a:	e7aa      	b.n	80068e2 <_printf_i+0x14a>
 800698c:	4632      	mov	r2, r6
 800698e:	4649      	mov	r1, r9
 8006990:	4640      	mov	r0, r8
 8006992:	6923      	ldr	r3, [r4, #16]
 8006994:	47d0      	blx	sl
 8006996:	3001      	adds	r0, #1
 8006998:	d0ad      	beq.n	80068f6 <_printf_i+0x15e>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	079b      	lsls	r3, r3, #30
 800699e:	d413      	bmi.n	80069c8 <_printf_i+0x230>
 80069a0:	68e0      	ldr	r0, [r4, #12]
 80069a2:	9b03      	ldr	r3, [sp, #12]
 80069a4:	4298      	cmp	r0, r3
 80069a6:	bfb8      	it	lt
 80069a8:	4618      	movlt	r0, r3
 80069aa:	e7a6      	b.n	80068fa <_printf_i+0x162>
 80069ac:	2301      	movs	r3, #1
 80069ae:	4632      	mov	r2, r6
 80069b0:	4649      	mov	r1, r9
 80069b2:	4640      	mov	r0, r8
 80069b4:	47d0      	blx	sl
 80069b6:	3001      	adds	r0, #1
 80069b8:	d09d      	beq.n	80068f6 <_printf_i+0x15e>
 80069ba:	3501      	adds	r5, #1
 80069bc:	68e3      	ldr	r3, [r4, #12]
 80069be:	9903      	ldr	r1, [sp, #12]
 80069c0:	1a5b      	subs	r3, r3, r1
 80069c2:	42ab      	cmp	r3, r5
 80069c4:	dcf2      	bgt.n	80069ac <_printf_i+0x214>
 80069c6:	e7eb      	b.n	80069a0 <_printf_i+0x208>
 80069c8:	2500      	movs	r5, #0
 80069ca:	f104 0619 	add.w	r6, r4, #25
 80069ce:	e7f5      	b.n	80069bc <_printf_i+0x224>
 80069d0:	0800b821 	.word	0x0800b821
 80069d4:	0800b832 	.word	0x0800b832

080069d8 <_scanf_float>:
 80069d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	b087      	sub	sp, #28
 80069de:	9303      	str	r3, [sp, #12]
 80069e0:	688b      	ldr	r3, [r1, #8]
 80069e2:	4617      	mov	r7, r2
 80069e4:	1e5a      	subs	r2, r3, #1
 80069e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80069ea:	bf82      	ittt	hi
 80069ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80069f0:	eb03 0b05 	addhi.w	fp, r3, r5
 80069f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80069f8:	460a      	mov	r2, r1
 80069fa:	f04f 0500 	mov.w	r5, #0
 80069fe:	bf88      	it	hi
 8006a00:	608b      	strhi	r3, [r1, #8]
 8006a02:	680b      	ldr	r3, [r1, #0]
 8006a04:	4680      	mov	r8, r0
 8006a06:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006a0a:	f842 3b1c 	str.w	r3, [r2], #28
 8006a0e:	460c      	mov	r4, r1
 8006a10:	bf98      	it	ls
 8006a12:	f04f 0b00 	movls.w	fp, #0
 8006a16:	4616      	mov	r6, r2
 8006a18:	46aa      	mov	sl, r5
 8006a1a:	46a9      	mov	r9, r5
 8006a1c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a20:	9201      	str	r2, [sp, #4]
 8006a22:	9502      	str	r5, [sp, #8]
 8006a24:	68a2      	ldr	r2, [r4, #8]
 8006a26:	b152      	cbz	r2, 8006a3e <_scanf_float+0x66>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b4e      	cmp	r3, #78	@ 0x4e
 8006a2e:	d865      	bhi.n	8006afc <_scanf_float+0x124>
 8006a30:	2b40      	cmp	r3, #64	@ 0x40
 8006a32:	d83d      	bhi.n	8006ab0 <_scanf_float+0xd8>
 8006a34:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006a38:	b2c8      	uxtb	r0, r1
 8006a3a:	280e      	cmp	r0, #14
 8006a3c:	d93b      	bls.n	8006ab6 <_scanf_float+0xde>
 8006a3e:	f1b9 0f00 	cmp.w	r9, #0
 8006a42:	d003      	beq.n	8006a4c <_scanf_float+0x74>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a50:	f1ba 0f01 	cmp.w	sl, #1
 8006a54:	f200 8118 	bhi.w	8006c88 <_scanf_float+0x2b0>
 8006a58:	9b01      	ldr	r3, [sp, #4]
 8006a5a:	429e      	cmp	r6, r3
 8006a5c:	f200 8109 	bhi.w	8006c72 <_scanf_float+0x29a>
 8006a60:	2001      	movs	r0, #1
 8006a62:	b007      	add	sp, #28
 8006a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a68:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006a6c:	2a0d      	cmp	r2, #13
 8006a6e:	d8e6      	bhi.n	8006a3e <_scanf_float+0x66>
 8006a70:	a101      	add	r1, pc, #4	@ (adr r1, 8006a78 <_scanf_float+0xa0>)
 8006a72:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006bbf 	.word	0x08006bbf
 8006a7c:	08006a3f 	.word	0x08006a3f
 8006a80:	08006a3f 	.word	0x08006a3f
 8006a84:	08006a3f 	.word	0x08006a3f
 8006a88:	08006c1f 	.word	0x08006c1f
 8006a8c:	08006bf7 	.word	0x08006bf7
 8006a90:	08006a3f 	.word	0x08006a3f
 8006a94:	08006a3f 	.word	0x08006a3f
 8006a98:	08006bcd 	.word	0x08006bcd
 8006a9c:	08006a3f 	.word	0x08006a3f
 8006aa0:	08006a3f 	.word	0x08006a3f
 8006aa4:	08006a3f 	.word	0x08006a3f
 8006aa8:	08006a3f 	.word	0x08006a3f
 8006aac:	08006b85 	.word	0x08006b85
 8006ab0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006ab4:	e7da      	b.n	8006a6c <_scanf_float+0x94>
 8006ab6:	290e      	cmp	r1, #14
 8006ab8:	d8c1      	bhi.n	8006a3e <_scanf_float+0x66>
 8006aba:	a001      	add	r0, pc, #4	@ (adr r0, 8006ac0 <_scanf_float+0xe8>)
 8006abc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ac0:	08006b75 	.word	0x08006b75
 8006ac4:	08006a3f 	.word	0x08006a3f
 8006ac8:	08006b75 	.word	0x08006b75
 8006acc:	08006c0b 	.word	0x08006c0b
 8006ad0:	08006a3f 	.word	0x08006a3f
 8006ad4:	08006b1d 	.word	0x08006b1d
 8006ad8:	08006b5b 	.word	0x08006b5b
 8006adc:	08006b5b 	.word	0x08006b5b
 8006ae0:	08006b5b 	.word	0x08006b5b
 8006ae4:	08006b5b 	.word	0x08006b5b
 8006ae8:	08006b5b 	.word	0x08006b5b
 8006aec:	08006b5b 	.word	0x08006b5b
 8006af0:	08006b5b 	.word	0x08006b5b
 8006af4:	08006b5b 	.word	0x08006b5b
 8006af8:	08006b5b 	.word	0x08006b5b
 8006afc:	2b6e      	cmp	r3, #110	@ 0x6e
 8006afe:	d809      	bhi.n	8006b14 <_scanf_float+0x13c>
 8006b00:	2b60      	cmp	r3, #96	@ 0x60
 8006b02:	d8b1      	bhi.n	8006a68 <_scanf_float+0x90>
 8006b04:	2b54      	cmp	r3, #84	@ 0x54
 8006b06:	d07b      	beq.n	8006c00 <_scanf_float+0x228>
 8006b08:	2b59      	cmp	r3, #89	@ 0x59
 8006b0a:	d198      	bne.n	8006a3e <_scanf_float+0x66>
 8006b0c:	2d07      	cmp	r5, #7
 8006b0e:	d196      	bne.n	8006a3e <_scanf_float+0x66>
 8006b10:	2508      	movs	r5, #8
 8006b12:	e02c      	b.n	8006b6e <_scanf_float+0x196>
 8006b14:	2b74      	cmp	r3, #116	@ 0x74
 8006b16:	d073      	beq.n	8006c00 <_scanf_float+0x228>
 8006b18:	2b79      	cmp	r3, #121	@ 0x79
 8006b1a:	e7f6      	b.n	8006b0a <_scanf_float+0x132>
 8006b1c:	6821      	ldr	r1, [r4, #0]
 8006b1e:	05c8      	lsls	r0, r1, #23
 8006b20:	d51b      	bpl.n	8006b5a <_scanf_float+0x182>
 8006b22:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006b26:	6021      	str	r1, [r4, #0]
 8006b28:	f109 0901 	add.w	r9, r9, #1
 8006b2c:	f1bb 0f00 	cmp.w	fp, #0
 8006b30:	d003      	beq.n	8006b3a <_scanf_float+0x162>
 8006b32:	3201      	adds	r2, #1
 8006b34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b38:	60a2      	str	r2, [r4, #8]
 8006b3a:	68a3      	ldr	r3, [r4, #8]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	60a3      	str	r3, [r4, #8]
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	3301      	adds	r3, #1
 8006b44:	6123      	str	r3, [r4, #16]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	607b      	str	r3, [r7, #4]
 8006b4e:	f340 8087 	ble.w	8006c60 <_scanf_float+0x288>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	e764      	b.n	8006a24 <_scanf_float+0x4c>
 8006b5a:	eb1a 0105 	adds.w	r1, sl, r5
 8006b5e:	f47f af6e 	bne.w	8006a3e <_scanf_float+0x66>
 8006b62:	460d      	mov	r5, r1
 8006b64:	468a      	mov	sl, r1
 8006b66:	6822      	ldr	r2, [r4, #0]
 8006b68:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006b6c:	6022      	str	r2, [r4, #0]
 8006b6e:	f806 3b01 	strb.w	r3, [r6], #1
 8006b72:	e7e2      	b.n	8006b3a <_scanf_float+0x162>
 8006b74:	6822      	ldr	r2, [r4, #0]
 8006b76:	0610      	lsls	r0, r2, #24
 8006b78:	f57f af61 	bpl.w	8006a3e <_scanf_float+0x66>
 8006b7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b80:	6022      	str	r2, [r4, #0]
 8006b82:	e7f4      	b.n	8006b6e <_scanf_float+0x196>
 8006b84:	f1ba 0f00 	cmp.w	sl, #0
 8006b88:	d10e      	bne.n	8006ba8 <_scanf_float+0x1d0>
 8006b8a:	f1b9 0f00 	cmp.w	r9, #0
 8006b8e:	d10e      	bne.n	8006bae <_scanf_float+0x1d6>
 8006b90:	6822      	ldr	r2, [r4, #0]
 8006b92:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006b96:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006b9a:	d108      	bne.n	8006bae <_scanf_float+0x1d6>
 8006b9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ba0:	f04f 0a01 	mov.w	sl, #1
 8006ba4:	6022      	str	r2, [r4, #0]
 8006ba6:	e7e2      	b.n	8006b6e <_scanf_float+0x196>
 8006ba8:	f1ba 0f02 	cmp.w	sl, #2
 8006bac:	d055      	beq.n	8006c5a <_scanf_float+0x282>
 8006bae:	2d01      	cmp	r5, #1
 8006bb0:	d002      	beq.n	8006bb8 <_scanf_float+0x1e0>
 8006bb2:	2d04      	cmp	r5, #4
 8006bb4:	f47f af43 	bne.w	8006a3e <_scanf_float+0x66>
 8006bb8:	3501      	adds	r5, #1
 8006bba:	b2ed      	uxtb	r5, r5
 8006bbc:	e7d7      	b.n	8006b6e <_scanf_float+0x196>
 8006bbe:	f1ba 0f01 	cmp.w	sl, #1
 8006bc2:	f47f af3c 	bne.w	8006a3e <_scanf_float+0x66>
 8006bc6:	f04f 0a02 	mov.w	sl, #2
 8006bca:	e7d0      	b.n	8006b6e <_scanf_float+0x196>
 8006bcc:	b97d      	cbnz	r5, 8006bee <_scanf_float+0x216>
 8006bce:	f1b9 0f00 	cmp.w	r9, #0
 8006bd2:	f47f af37 	bne.w	8006a44 <_scanf_float+0x6c>
 8006bd6:	6822      	ldr	r2, [r4, #0]
 8006bd8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006bdc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006be0:	f040 8103 	bne.w	8006dea <_scanf_float+0x412>
 8006be4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006be8:	2501      	movs	r5, #1
 8006bea:	6022      	str	r2, [r4, #0]
 8006bec:	e7bf      	b.n	8006b6e <_scanf_float+0x196>
 8006bee:	2d03      	cmp	r5, #3
 8006bf0:	d0e2      	beq.n	8006bb8 <_scanf_float+0x1e0>
 8006bf2:	2d05      	cmp	r5, #5
 8006bf4:	e7de      	b.n	8006bb4 <_scanf_float+0x1dc>
 8006bf6:	2d02      	cmp	r5, #2
 8006bf8:	f47f af21 	bne.w	8006a3e <_scanf_float+0x66>
 8006bfc:	2503      	movs	r5, #3
 8006bfe:	e7b6      	b.n	8006b6e <_scanf_float+0x196>
 8006c00:	2d06      	cmp	r5, #6
 8006c02:	f47f af1c 	bne.w	8006a3e <_scanf_float+0x66>
 8006c06:	2507      	movs	r5, #7
 8006c08:	e7b1      	b.n	8006b6e <_scanf_float+0x196>
 8006c0a:	6822      	ldr	r2, [r4, #0]
 8006c0c:	0591      	lsls	r1, r2, #22
 8006c0e:	f57f af16 	bpl.w	8006a3e <_scanf_float+0x66>
 8006c12:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006c16:	6022      	str	r2, [r4, #0]
 8006c18:	f8cd 9008 	str.w	r9, [sp, #8]
 8006c1c:	e7a7      	b.n	8006b6e <_scanf_float+0x196>
 8006c1e:	6822      	ldr	r2, [r4, #0]
 8006c20:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006c24:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006c28:	d006      	beq.n	8006c38 <_scanf_float+0x260>
 8006c2a:	0550      	lsls	r0, r2, #21
 8006c2c:	f57f af07 	bpl.w	8006a3e <_scanf_float+0x66>
 8006c30:	f1b9 0f00 	cmp.w	r9, #0
 8006c34:	f000 80d9 	beq.w	8006dea <_scanf_float+0x412>
 8006c38:	0591      	lsls	r1, r2, #22
 8006c3a:	bf58      	it	pl
 8006c3c:	9902      	ldrpl	r1, [sp, #8]
 8006c3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c42:	bf58      	it	pl
 8006c44:	eba9 0101 	subpl.w	r1, r9, r1
 8006c48:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006c4c:	f04f 0900 	mov.w	r9, #0
 8006c50:	bf58      	it	pl
 8006c52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c56:	6022      	str	r2, [r4, #0]
 8006c58:	e789      	b.n	8006b6e <_scanf_float+0x196>
 8006c5a:	f04f 0a03 	mov.w	sl, #3
 8006c5e:	e786      	b.n	8006b6e <_scanf_float+0x196>
 8006c60:	4639      	mov	r1, r7
 8006c62:	4640      	mov	r0, r8
 8006c64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006c68:	4798      	blx	r3
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	f43f aeda 	beq.w	8006a24 <_scanf_float+0x4c>
 8006c70:	e6e5      	b.n	8006a3e <_scanf_float+0x66>
 8006c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c76:	463a      	mov	r2, r7
 8006c78:	4640      	mov	r0, r8
 8006c7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c7e:	4798      	blx	r3
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	6123      	str	r3, [r4, #16]
 8006c86:	e6e7      	b.n	8006a58 <_scanf_float+0x80>
 8006c88:	1e6b      	subs	r3, r5, #1
 8006c8a:	2b06      	cmp	r3, #6
 8006c8c:	d824      	bhi.n	8006cd8 <_scanf_float+0x300>
 8006c8e:	2d02      	cmp	r5, #2
 8006c90:	d836      	bhi.n	8006d00 <_scanf_float+0x328>
 8006c92:	9b01      	ldr	r3, [sp, #4]
 8006c94:	429e      	cmp	r6, r3
 8006c96:	f67f aee3 	bls.w	8006a60 <_scanf_float+0x88>
 8006c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c9e:	463a      	mov	r2, r7
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ca6:	4798      	blx	r3
 8006ca8:	6923      	ldr	r3, [r4, #16]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	6123      	str	r3, [r4, #16]
 8006cae:	e7f0      	b.n	8006c92 <_scanf_float+0x2ba>
 8006cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cb4:	463a      	mov	r2, r7
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006cbc:	4798      	blx	r3
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	6123      	str	r3, [r4, #16]
 8006cc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cc8:	fa5f fa8a 	uxtb.w	sl, sl
 8006ccc:	f1ba 0f02 	cmp.w	sl, #2
 8006cd0:	d1ee      	bne.n	8006cb0 <_scanf_float+0x2d8>
 8006cd2:	3d03      	subs	r5, #3
 8006cd4:	b2ed      	uxtb	r5, r5
 8006cd6:	1b76      	subs	r6, r6, r5
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	05da      	lsls	r2, r3, #23
 8006cdc:	d530      	bpl.n	8006d40 <_scanf_float+0x368>
 8006cde:	055b      	lsls	r3, r3, #21
 8006ce0:	d511      	bpl.n	8006d06 <_scanf_float+0x32e>
 8006ce2:	9b01      	ldr	r3, [sp, #4]
 8006ce4:	429e      	cmp	r6, r3
 8006ce6:	f67f aebb 	bls.w	8006a60 <_scanf_float+0x88>
 8006cea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cee:	463a      	mov	r2, r7
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cf6:	4798      	blx	r3
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	6123      	str	r3, [r4, #16]
 8006cfe:	e7f0      	b.n	8006ce2 <_scanf_float+0x30a>
 8006d00:	46aa      	mov	sl, r5
 8006d02:	46b3      	mov	fp, r6
 8006d04:	e7de      	b.n	8006cc4 <_scanf_float+0x2ec>
 8006d06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	2965      	cmp	r1, #101	@ 0x65
 8006d0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d12:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d16:	6123      	str	r3, [r4, #16]
 8006d18:	d00c      	beq.n	8006d34 <_scanf_float+0x35c>
 8006d1a:	2945      	cmp	r1, #69	@ 0x45
 8006d1c:	d00a      	beq.n	8006d34 <_scanf_float+0x35c>
 8006d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d22:	463a      	mov	r2, r7
 8006d24:	4640      	mov	r0, r8
 8006d26:	4798      	blx	r3
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	1eb5      	subs	r5, r6, #2
 8006d32:	6123      	str	r3, [r4, #16]
 8006d34:	463a      	mov	r2, r7
 8006d36:	4640      	mov	r0, r8
 8006d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d3c:	4798      	blx	r3
 8006d3e:	462e      	mov	r6, r5
 8006d40:	6822      	ldr	r2, [r4, #0]
 8006d42:	f012 0210 	ands.w	r2, r2, #16
 8006d46:	d001      	beq.n	8006d4c <_scanf_float+0x374>
 8006d48:	2000      	movs	r0, #0
 8006d4a:	e68a      	b.n	8006a62 <_scanf_float+0x8a>
 8006d4c:	7032      	strb	r2, [r6, #0]
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d58:	d11c      	bne.n	8006d94 <_scanf_float+0x3bc>
 8006d5a:	9b02      	ldr	r3, [sp, #8]
 8006d5c:	454b      	cmp	r3, r9
 8006d5e:	eba3 0209 	sub.w	r2, r3, r9
 8006d62:	d123      	bne.n	8006dac <_scanf_float+0x3d4>
 8006d64:	2200      	movs	r2, #0
 8006d66:	4640      	mov	r0, r8
 8006d68:	9901      	ldr	r1, [sp, #4]
 8006d6a:	f002 fc11 	bl	8009590 <_strtod_r>
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	6825      	ldr	r5, [r4, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f015 0f02 	tst.w	r5, #2
 8006d78:	4606      	mov	r6, r0
 8006d7a:	460f      	mov	r7, r1
 8006d7c:	f103 0204 	add.w	r2, r3, #4
 8006d80:	d01f      	beq.n	8006dc2 <_scanf_float+0x3ea>
 8006d82:	9903      	ldr	r1, [sp, #12]
 8006d84:	600a      	str	r2, [r1, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	e9c3 6700 	strd	r6, r7, [r3]
 8006d8c:	68e3      	ldr	r3, [r4, #12]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	60e3      	str	r3, [r4, #12]
 8006d92:	e7d9      	b.n	8006d48 <_scanf_float+0x370>
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0e4      	beq.n	8006d64 <_scanf_float+0x38c>
 8006d9a:	9905      	ldr	r1, [sp, #20]
 8006d9c:	230a      	movs	r3, #10
 8006d9e:	4640      	mov	r0, r8
 8006da0:	3101      	adds	r1, #1
 8006da2:	f7ff f9b1 	bl	8006108 <_strtol_r>
 8006da6:	9b04      	ldr	r3, [sp, #16]
 8006da8:	9e05      	ldr	r6, [sp, #20]
 8006daa:	1ac2      	subs	r2, r0, r3
 8006dac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006db0:	429e      	cmp	r6, r3
 8006db2:	bf28      	it	cs
 8006db4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006db8:	4630      	mov	r0, r6
 8006dba:	490d      	ldr	r1, [pc, #52]	@ (8006df0 <_scanf_float+0x418>)
 8006dbc:	f000 f8de 	bl	8006f7c <siprintf>
 8006dc0:	e7d0      	b.n	8006d64 <_scanf_float+0x38c>
 8006dc2:	076d      	lsls	r5, r5, #29
 8006dc4:	d4dd      	bmi.n	8006d82 <_scanf_float+0x3aa>
 8006dc6:	9d03      	ldr	r5, [sp, #12]
 8006dc8:	602a      	str	r2, [r5, #0]
 8006dca:	681d      	ldr	r5, [r3, #0]
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	f7f9 fe1c 	bl	8000a0c <__aeabi_dcmpun>
 8006dd4:	b120      	cbz	r0, 8006de0 <_scanf_float+0x408>
 8006dd6:	4807      	ldr	r0, [pc, #28]	@ (8006df4 <_scanf_float+0x41c>)
 8006dd8:	f000 f9e6 	bl	80071a8 <nanf>
 8006ddc:	6028      	str	r0, [r5, #0]
 8006dde:	e7d5      	b.n	8006d8c <_scanf_float+0x3b4>
 8006de0:	4630      	mov	r0, r6
 8006de2:	4639      	mov	r1, r7
 8006de4:	f7f9 fe70 	bl	8000ac8 <__aeabi_d2f>
 8006de8:	e7f8      	b.n	8006ddc <_scanf_float+0x404>
 8006dea:	f04f 0900 	mov.w	r9, #0
 8006dee:	e62d      	b.n	8006a4c <_scanf_float+0x74>
 8006df0:	0800b843 	.word	0x0800b843
 8006df4:	0800badc 	.word	0x0800badc

08006df8 <std>:
 8006df8:	2300      	movs	r3, #0
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e06:	6083      	str	r3, [r0, #8]
 8006e08:	8181      	strh	r1, [r0, #12]
 8006e0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e0c:	81c2      	strh	r2, [r0, #14]
 8006e0e:	6183      	str	r3, [r0, #24]
 8006e10:	4619      	mov	r1, r3
 8006e12:	2208      	movs	r2, #8
 8006e14:	305c      	adds	r0, #92	@ 0x5c
 8006e16:	f000 f914 	bl	8007042 <memset>
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <std+0x58>)
 8006e1c:	6224      	str	r4, [r4, #32]
 8006e1e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e20:	4b0c      	ldr	r3, [pc, #48]	@ (8006e54 <std+0x5c>)
 8006e22:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e24:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <std+0x60>)
 8006e26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e28:	4b0c      	ldr	r3, [pc, #48]	@ (8006e5c <std+0x64>)
 8006e2a:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e60 <std+0x68>)
 8006e2e:	429c      	cmp	r4, r3
 8006e30:	d006      	beq.n	8006e40 <std+0x48>
 8006e32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e36:	4294      	cmp	r4, r2
 8006e38:	d002      	beq.n	8006e40 <std+0x48>
 8006e3a:	33d0      	adds	r3, #208	@ 0xd0
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	d105      	bne.n	8006e4c <std+0x54>
 8006e40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e48:	f000 b986 	b.w	8007158 <__retarget_lock_init_recursive>
 8006e4c:	bd10      	pop	{r4, pc}
 8006e4e:	bf00      	nop
 8006e50:	08006fbd 	.word	0x08006fbd
 8006e54:	08006fdf 	.word	0x08006fdf
 8006e58:	08007017 	.word	0x08007017
 8006e5c:	0800703b 	.word	0x0800703b
 8006e60:	20000a3c 	.word	0x20000a3c

08006e64 <stdio_exit_handler>:
 8006e64:	4a02      	ldr	r2, [pc, #8]	@ (8006e70 <stdio_exit_handler+0xc>)
 8006e66:	4903      	ldr	r1, [pc, #12]	@ (8006e74 <stdio_exit_handler+0x10>)
 8006e68:	4803      	ldr	r0, [pc, #12]	@ (8006e78 <stdio_exit_handler+0x14>)
 8006e6a:	f000 b869 	b.w	8006f40 <_fwalk_sglue>
 8006e6e:	bf00      	nop
 8006e70:	20000014 	.word	0x20000014
 8006e74:	0800994d 	.word	0x0800994d
 8006e78:	20000024 	.word	0x20000024

08006e7c <cleanup_stdio>:
 8006e7c:	6841      	ldr	r1, [r0, #4]
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb0 <cleanup_stdio+0x34>)
 8006e80:	b510      	push	{r4, lr}
 8006e82:	4299      	cmp	r1, r3
 8006e84:	4604      	mov	r4, r0
 8006e86:	d001      	beq.n	8006e8c <cleanup_stdio+0x10>
 8006e88:	f002 fd60 	bl	800994c <_fflush_r>
 8006e8c:	68a1      	ldr	r1, [r4, #8]
 8006e8e:	4b09      	ldr	r3, [pc, #36]	@ (8006eb4 <cleanup_stdio+0x38>)
 8006e90:	4299      	cmp	r1, r3
 8006e92:	d002      	beq.n	8006e9a <cleanup_stdio+0x1e>
 8006e94:	4620      	mov	r0, r4
 8006e96:	f002 fd59 	bl	800994c <_fflush_r>
 8006e9a:	68e1      	ldr	r1, [r4, #12]
 8006e9c:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <cleanup_stdio+0x3c>)
 8006e9e:	4299      	cmp	r1, r3
 8006ea0:	d004      	beq.n	8006eac <cleanup_stdio+0x30>
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea8:	f002 bd50 	b.w	800994c <_fflush_r>
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	bf00      	nop
 8006eb0:	20000a3c 	.word	0x20000a3c
 8006eb4:	20000aa4 	.word	0x20000aa4
 8006eb8:	20000b0c 	.word	0x20000b0c

08006ebc <global_stdio_init.part.0>:
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8006eec <global_stdio_init.part.0+0x30>)
 8006ec0:	4c0b      	ldr	r4, [pc, #44]	@ (8006ef0 <global_stdio_init.part.0+0x34>)
 8006ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef4 <global_stdio_init.part.0+0x38>)
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	2104      	movs	r1, #4
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f7ff ff94 	bl	8006df8 <std>
 8006ed0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	2109      	movs	r1, #9
 8006ed8:	f7ff ff8e 	bl	8006df8 <std>
 8006edc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee6:	2112      	movs	r1, #18
 8006ee8:	f7ff bf86 	b.w	8006df8 <std>
 8006eec:	20000b74 	.word	0x20000b74
 8006ef0:	20000a3c 	.word	0x20000a3c
 8006ef4:	08006e65 	.word	0x08006e65

08006ef8 <__sfp_lock_acquire>:
 8006ef8:	4801      	ldr	r0, [pc, #4]	@ (8006f00 <__sfp_lock_acquire+0x8>)
 8006efa:	f000 b92e 	b.w	800715a <__retarget_lock_acquire_recursive>
 8006efe:	bf00      	nop
 8006f00:	20000b7d 	.word	0x20000b7d

08006f04 <__sfp_lock_release>:
 8006f04:	4801      	ldr	r0, [pc, #4]	@ (8006f0c <__sfp_lock_release+0x8>)
 8006f06:	f000 b929 	b.w	800715c <__retarget_lock_release_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	20000b7d 	.word	0x20000b7d

08006f10 <__sinit>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4604      	mov	r4, r0
 8006f14:	f7ff fff0 	bl	8006ef8 <__sfp_lock_acquire>
 8006f18:	6a23      	ldr	r3, [r4, #32]
 8006f1a:	b11b      	cbz	r3, 8006f24 <__sinit+0x14>
 8006f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f20:	f7ff bff0 	b.w	8006f04 <__sfp_lock_release>
 8006f24:	4b04      	ldr	r3, [pc, #16]	@ (8006f38 <__sinit+0x28>)
 8006f26:	6223      	str	r3, [r4, #32]
 8006f28:	4b04      	ldr	r3, [pc, #16]	@ (8006f3c <__sinit+0x2c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f5      	bne.n	8006f1c <__sinit+0xc>
 8006f30:	f7ff ffc4 	bl	8006ebc <global_stdio_init.part.0>
 8006f34:	e7f2      	b.n	8006f1c <__sinit+0xc>
 8006f36:	bf00      	nop
 8006f38:	08006e7d 	.word	0x08006e7d
 8006f3c:	20000b74 	.word	0x20000b74

08006f40 <_fwalk_sglue>:
 8006f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	4607      	mov	r7, r0
 8006f46:	4688      	mov	r8, r1
 8006f48:	4614      	mov	r4, r2
 8006f4a:	2600      	movs	r6, #0
 8006f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f50:	f1b9 0901 	subs.w	r9, r9, #1
 8006f54:	d505      	bpl.n	8006f62 <_fwalk_sglue+0x22>
 8006f56:	6824      	ldr	r4, [r4, #0]
 8006f58:	2c00      	cmp	r4, #0
 8006f5a:	d1f7      	bne.n	8006f4c <_fwalk_sglue+0xc>
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f62:	89ab      	ldrh	r3, [r5, #12]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d907      	bls.n	8006f78 <_fwalk_sglue+0x38>
 8006f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	d003      	beq.n	8006f78 <_fwalk_sglue+0x38>
 8006f70:	4629      	mov	r1, r5
 8006f72:	4638      	mov	r0, r7
 8006f74:	47c0      	blx	r8
 8006f76:	4306      	orrs	r6, r0
 8006f78:	3568      	adds	r5, #104	@ 0x68
 8006f7a:	e7e9      	b.n	8006f50 <_fwalk_sglue+0x10>

08006f7c <siprintf>:
 8006f7c:	b40e      	push	{r1, r2, r3}
 8006f7e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f82:	b500      	push	{lr}
 8006f84:	b09c      	sub	sp, #112	@ 0x70
 8006f86:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f88:	9002      	str	r0, [sp, #8]
 8006f8a:	9006      	str	r0, [sp, #24]
 8006f8c:	9107      	str	r1, [sp, #28]
 8006f8e:	9104      	str	r1, [sp, #16]
 8006f90:	4808      	ldr	r0, [pc, #32]	@ (8006fb4 <siprintf+0x38>)
 8006f92:	4909      	ldr	r1, [pc, #36]	@ (8006fb8 <siprintf+0x3c>)
 8006f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f98:	9105      	str	r1, [sp, #20]
 8006f9a:	6800      	ldr	r0, [r0, #0]
 8006f9c:	a902      	add	r1, sp, #8
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	f002 fb58 	bl	8009654 <_svfiprintf_r>
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	9b02      	ldr	r3, [sp, #8]
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	b01c      	add	sp, #112	@ 0x70
 8006fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fb0:	b003      	add	sp, #12
 8006fb2:	4770      	bx	lr
 8006fb4:	20000020 	.word	0x20000020
 8006fb8:	ffff0208 	.word	0xffff0208

08006fbc <__sread>:
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc4:	f000 f87a 	bl	80070bc <_read_r>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	bfab      	itete	ge
 8006fcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fce:	89a3      	ldrhlt	r3, [r4, #12]
 8006fd0:	181b      	addge	r3, r3, r0
 8006fd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fd6:	bfac      	ite	ge
 8006fd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fda:	81a3      	strhlt	r3, [r4, #12]
 8006fdc:	bd10      	pop	{r4, pc}

08006fde <__swrite>:
 8006fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe2:	461f      	mov	r7, r3
 8006fe4:	898b      	ldrh	r3, [r1, #12]
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	05db      	lsls	r3, r3, #23
 8006fea:	460c      	mov	r4, r1
 8006fec:	4616      	mov	r6, r2
 8006fee:	d505      	bpl.n	8006ffc <__swrite+0x1e>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff8:	f000 f84e 	bl	8007098 <_lseek_r>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	4632      	mov	r2, r6
 8007000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	4628      	mov	r0, r5
 8007008:	463b      	mov	r3, r7
 800700a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800700e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007012:	f000 b865 	b.w	80070e0 <_write_r>

08007016 <__sseek>:
 8007016:	b510      	push	{r4, lr}
 8007018:	460c      	mov	r4, r1
 800701a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701e:	f000 f83b 	bl	8007098 <_lseek_r>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	bf15      	itete	ne
 8007028:	6560      	strne	r0, [r4, #84]	@ 0x54
 800702a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800702e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007032:	81a3      	strheq	r3, [r4, #12]
 8007034:	bf18      	it	ne
 8007036:	81a3      	strhne	r3, [r4, #12]
 8007038:	bd10      	pop	{r4, pc}

0800703a <__sclose>:
 800703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703e:	f000 b81b 	b.w	8007078 <_close_r>

08007042 <memset>:
 8007042:	4603      	mov	r3, r0
 8007044:	4402      	add	r2, r0
 8007046:	4293      	cmp	r3, r2
 8007048:	d100      	bne.n	800704c <memset+0xa>
 800704a:	4770      	bx	lr
 800704c:	f803 1b01 	strb.w	r1, [r3], #1
 8007050:	e7f9      	b.n	8007046 <memset+0x4>

08007052 <strcat>:
 8007052:	4602      	mov	r2, r0
 8007054:	b510      	push	{r4, lr}
 8007056:	7814      	ldrb	r4, [r2, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	3201      	adds	r2, #1
 800705c:	2c00      	cmp	r4, #0
 800705e:	d1fa      	bne.n	8007056 <strcat+0x4>
 8007060:	3b01      	subs	r3, #1
 8007062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800706a:	2a00      	cmp	r2, #0
 800706c:	d1f9      	bne.n	8007062 <strcat+0x10>
 800706e:	bd10      	pop	{r4, pc}

08007070 <_localeconv_r>:
 8007070:	4800      	ldr	r0, [pc, #0]	@ (8007074 <_localeconv_r+0x4>)
 8007072:	4770      	bx	lr
 8007074:	20000160 	.word	0x20000160

08007078 <_close_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	2300      	movs	r3, #0
 800707c:	4d05      	ldr	r5, [pc, #20]	@ (8007094 <_close_r+0x1c>)
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	f7fb fe4f 	bl	8002d26 <_close>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_close_r+0x1a>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_close_r+0x1a>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	20000b78 	.word	0x20000b78

08007098 <_lseek_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	2200      	movs	r2, #0
 80070a2:	4d05      	ldr	r5, [pc, #20]	@ (80070b8 <_lseek_r+0x20>)
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7fb fe61 	bl	8002d6e <_lseek>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_lseek_r+0x1e>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_lseek_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	20000b78 	.word	0x20000b78

080070bc <_read_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	4611      	mov	r1, r2
 80070c4:	2200      	movs	r2, #0
 80070c6:	4d05      	ldr	r5, [pc, #20]	@ (80070dc <_read_r+0x20>)
 80070c8:	602a      	str	r2, [r5, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f7fb fdf2 	bl	8002cb4 <_read>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d102      	bne.n	80070da <_read_r+0x1e>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	b103      	cbz	r3, 80070da <_read_r+0x1e>
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	20000b78 	.word	0x20000b78

080070e0 <_write_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	2200      	movs	r2, #0
 80070ea:	4d05      	ldr	r5, [pc, #20]	@ (8007100 <_write_r+0x20>)
 80070ec:	602a      	str	r2, [r5, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f7fb fdfd 	bl	8002cee <_write>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_write_r+0x1e>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_write_r+0x1e>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	20000b78 	.word	0x20000b78

08007104 <__errno>:
 8007104:	4b01      	ldr	r3, [pc, #4]	@ (800710c <__errno+0x8>)
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	20000020 	.word	0x20000020

08007110 <__libc_init_array>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	2600      	movs	r6, #0
 8007114:	4d0c      	ldr	r5, [pc, #48]	@ (8007148 <__libc_init_array+0x38>)
 8007116:	4c0d      	ldr	r4, [pc, #52]	@ (800714c <__libc_init_array+0x3c>)
 8007118:	1b64      	subs	r4, r4, r5
 800711a:	10a4      	asrs	r4, r4, #2
 800711c:	42a6      	cmp	r6, r4
 800711e:	d109      	bne.n	8007134 <__libc_init_array+0x24>
 8007120:	f004 fa02 	bl	800b528 <_init>
 8007124:	2600      	movs	r6, #0
 8007126:	4d0a      	ldr	r5, [pc, #40]	@ (8007150 <__libc_init_array+0x40>)
 8007128:	4c0a      	ldr	r4, [pc, #40]	@ (8007154 <__libc_init_array+0x44>)
 800712a:	1b64      	subs	r4, r4, r5
 800712c:	10a4      	asrs	r4, r4, #2
 800712e:	42a6      	cmp	r6, r4
 8007130:	d105      	bne.n	800713e <__libc_init_array+0x2e>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	f855 3b04 	ldr.w	r3, [r5], #4
 8007138:	4798      	blx	r3
 800713a:	3601      	adds	r6, #1
 800713c:	e7ee      	b.n	800711c <__libc_init_array+0xc>
 800713e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007142:	4798      	blx	r3
 8007144:	3601      	adds	r6, #1
 8007146:	e7f2      	b.n	800712e <__libc_init_array+0x1e>
 8007148:	0800bb78 	.word	0x0800bb78
 800714c:	0800bb78 	.word	0x0800bb78
 8007150:	0800bb78 	.word	0x0800bb78
 8007154:	0800bb7c 	.word	0x0800bb7c

08007158 <__retarget_lock_init_recursive>:
 8007158:	4770      	bx	lr

0800715a <__retarget_lock_acquire_recursive>:
 800715a:	4770      	bx	lr

0800715c <__retarget_lock_release_recursive>:
 800715c:	4770      	bx	lr

0800715e <strcpy>:
 800715e:	4603      	mov	r3, r0
 8007160:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007164:	f803 2b01 	strb.w	r2, [r3], #1
 8007168:	2a00      	cmp	r2, #0
 800716a:	d1f9      	bne.n	8007160 <strcpy+0x2>
 800716c:	4770      	bx	lr

0800716e <memchr>:
 800716e:	4603      	mov	r3, r0
 8007170:	b510      	push	{r4, lr}
 8007172:	b2c9      	uxtb	r1, r1
 8007174:	4402      	add	r2, r0
 8007176:	4293      	cmp	r3, r2
 8007178:	4618      	mov	r0, r3
 800717a:	d101      	bne.n	8007180 <memchr+0x12>
 800717c:	2000      	movs	r0, #0
 800717e:	e003      	b.n	8007188 <memchr+0x1a>
 8007180:	7804      	ldrb	r4, [r0, #0]
 8007182:	3301      	adds	r3, #1
 8007184:	428c      	cmp	r4, r1
 8007186:	d1f6      	bne.n	8007176 <memchr+0x8>
 8007188:	bd10      	pop	{r4, pc}

0800718a <memcpy>:
 800718a:	440a      	add	r2, r1
 800718c:	4291      	cmp	r1, r2
 800718e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007192:	d100      	bne.n	8007196 <memcpy+0xc>
 8007194:	4770      	bx	lr
 8007196:	b510      	push	{r4, lr}
 8007198:	f811 4b01 	ldrb.w	r4, [r1], #1
 800719c:	4291      	cmp	r1, r2
 800719e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071a2:	d1f9      	bne.n	8007198 <memcpy+0xe>
 80071a4:	bd10      	pop	{r4, pc}
	...

080071a8 <nanf>:
 80071a8:	4800      	ldr	r0, [pc, #0]	@ (80071ac <nanf+0x4>)
 80071aa:	4770      	bx	lr
 80071ac:	7fc00000 	.word	0x7fc00000

080071b0 <quorem>:
 80071b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	6903      	ldr	r3, [r0, #16]
 80071b6:	690c      	ldr	r4, [r1, #16]
 80071b8:	4607      	mov	r7, r0
 80071ba:	42a3      	cmp	r3, r4
 80071bc:	db7e      	blt.n	80072bc <quorem+0x10c>
 80071be:	3c01      	subs	r4, #1
 80071c0:	00a3      	lsls	r3, r4, #2
 80071c2:	f100 0514 	add.w	r5, r0, #20
 80071c6:	f101 0814 	add.w	r8, r1, #20
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071da:	3301      	adds	r3, #1
 80071dc:	429a      	cmp	r2, r3
 80071de:	fbb2 f6f3 	udiv	r6, r2, r3
 80071e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071e6:	d32e      	bcc.n	8007246 <quorem+0x96>
 80071e8:	f04f 0a00 	mov.w	sl, #0
 80071ec:	46c4      	mov	ip, r8
 80071ee:	46ae      	mov	lr, r5
 80071f0:	46d3      	mov	fp, sl
 80071f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071f6:	b298      	uxth	r0, r3
 80071f8:	fb06 a000 	mla	r0, r6, r0, sl
 80071fc:	0c1b      	lsrs	r3, r3, #16
 80071fe:	0c02      	lsrs	r2, r0, #16
 8007200:	fb06 2303 	mla	r3, r6, r3, r2
 8007204:	f8de 2000 	ldr.w	r2, [lr]
 8007208:	b280      	uxth	r0, r0
 800720a:	b292      	uxth	r2, r2
 800720c:	1a12      	subs	r2, r2, r0
 800720e:	445a      	add	r2, fp
 8007210:	f8de 0000 	ldr.w	r0, [lr]
 8007214:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007218:	b29b      	uxth	r3, r3
 800721a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800721e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007222:	b292      	uxth	r2, r2
 8007224:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007228:	45e1      	cmp	r9, ip
 800722a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800722e:	f84e 2b04 	str.w	r2, [lr], #4
 8007232:	d2de      	bcs.n	80071f2 <quorem+0x42>
 8007234:	9b00      	ldr	r3, [sp, #0]
 8007236:	58eb      	ldr	r3, [r5, r3]
 8007238:	b92b      	cbnz	r3, 8007246 <quorem+0x96>
 800723a:	9b01      	ldr	r3, [sp, #4]
 800723c:	3b04      	subs	r3, #4
 800723e:	429d      	cmp	r5, r3
 8007240:	461a      	mov	r2, r3
 8007242:	d32f      	bcc.n	80072a4 <quorem+0xf4>
 8007244:	613c      	str	r4, [r7, #16]
 8007246:	4638      	mov	r0, r7
 8007248:	f001 f9c2 	bl	80085d0 <__mcmp>
 800724c:	2800      	cmp	r0, #0
 800724e:	db25      	blt.n	800729c <quorem+0xec>
 8007250:	4629      	mov	r1, r5
 8007252:	2000      	movs	r0, #0
 8007254:	f858 2b04 	ldr.w	r2, [r8], #4
 8007258:	f8d1 c000 	ldr.w	ip, [r1]
 800725c:	fa1f fe82 	uxth.w	lr, r2
 8007260:	fa1f f38c 	uxth.w	r3, ip
 8007264:	eba3 030e 	sub.w	r3, r3, lr
 8007268:	4403      	add	r3, r0
 800726a:	0c12      	lsrs	r2, r2, #16
 800726c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007270:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007274:	b29b      	uxth	r3, r3
 8007276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800727a:	45c1      	cmp	r9, r8
 800727c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007280:	f841 3b04 	str.w	r3, [r1], #4
 8007284:	d2e6      	bcs.n	8007254 <quorem+0xa4>
 8007286:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800728a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800728e:	b922      	cbnz	r2, 800729a <quorem+0xea>
 8007290:	3b04      	subs	r3, #4
 8007292:	429d      	cmp	r5, r3
 8007294:	461a      	mov	r2, r3
 8007296:	d30b      	bcc.n	80072b0 <quorem+0x100>
 8007298:	613c      	str	r4, [r7, #16]
 800729a:	3601      	adds	r6, #1
 800729c:	4630      	mov	r0, r6
 800729e:	b003      	add	sp, #12
 80072a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a4:	6812      	ldr	r2, [r2, #0]
 80072a6:	3b04      	subs	r3, #4
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	d1cb      	bne.n	8007244 <quorem+0x94>
 80072ac:	3c01      	subs	r4, #1
 80072ae:	e7c6      	b.n	800723e <quorem+0x8e>
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	3b04      	subs	r3, #4
 80072b4:	2a00      	cmp	r2, #0
 80072b6:	d1ef      	bne.n	8007298 <quorem+0xe8>
 80072b8:	3c01      	subs	r4, #1
 80072ba:	e7ea      	b.n	8007292 <quorem+0xe2>
 80072bc:	2000      	movs	r0, #0
 80072be:	e7ee      	b.n	800729e <quorem+0xee>

080072c0 <_dtoa_r>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	4614      	mov	r4, r2
 80072c6:	461d      	mov	r5, r3
 80072c8:	69c7      	ldr	r7, [r0, #28]
 80072ca:	b097      	sub	sp, #92	@ 0x5c
 80072cc:	4683      	mov	fp, r0
 80072ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80072d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80072d4:	b97f      	cbnz	r7, 80072f6 <_dtoa_r+0x36>
 80072d6:	2010      	movs	r0, #16
 80072d8:	f000 fe02 	bl	8007ee0 <malloc>
 80072dc:	4602      	mov	r2, r0
 80072de:	f8cb 001c 	str.w	r0, [fp, #28]
 80072e2:	b920      	cbnz	r0, 80072ee <_dtoa_r+0x2e>
 80072e4:	21ef      	movs	r1, #239	@ 0xef
 80072e6:	4ba8      	ldr	r3, [pc, #672]	@ (8007588 <_dtoa_r+0x2c8>)
 80072e8:	48a8      	ldr	r0, [pc, #672]	@ (800758c <_dtoa_r+0x2cc>)
 80072ea:	f002 fb99 	bl	8009a20 <__assert_func>
 80072ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80072f2:	6007      	str	r7, [r0, #0]
 80072f4:	60c7      	str	r7, [r0, #12]
 80072f6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072fa:	6819      	ldr	r1, [r3, #0]
 80072fc:	b159      	cbz	r1, 8007316 <_dtoa_r+0x56>
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	2301      	movs	r3, #1
 8007302:	4093      	lsls	r3, r2
 8007304:	604a      	str	r2, [r1, #4]
 8007306:	608b      	str	r3, [r1, #8]
 8007308:	4658      	mov	r0, fp
 800730a:	f000 fedf 	bl	80080cc <_Bfree>
 800730e:	2200      	movs	r2, #0
 8007310:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	1e2b      	subs	r3, r5, #0
 8007318:	bfaf      	iteee	ge
 800731a:	2300      	movge	r3, #0
 800731c:	2201      	movlt	r2, #1
 800731e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007322:	9303      	strlt	r3, [sp, #12]
 8007324:	bfa8      	it	ge
 8007326:	6033      	strge	r3, [r6, #0]
 8007328:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800732c:	4b98      	ldr	r3, [pc, #608]	@ (8007590 <_dtoa_r+0x2d0>)
 800732e:	bfb8      	it	lt
 8007330:	6032      	strlt	r2, [r6, #0]
 8007332:	ea33 0308 	bics.w	r3, r3, r8
 8007336:	d112      	bne.n	800735e <_dtoa_r+0x9e>
 8007338:	f242 730f 	movw	r3, #9999	@ 0x270f
 800733c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007344:	4323      	orrs	r3, r4
 8007346:	f000 8550 	beq.w	8007dea <_dtoa_r+0xb2a>
 800734a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800734c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007594 <_dtoa_r+0x2d4>
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8552 	beq.w	8007dfa <_dtoa_r+0xb3a>
 8007356:	f10a 0303 	add.w	r3, sl, #3
 800735a:	f000 bd4c 	b.w	8007df6 <_dtoa_r+0xb36>
 800735e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007362:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800736a:	2200      	movs	r2, #0
 800736c:	2300      	movs	r3, #0
 800736e:	f7f9 fb1b 	bl	80009a8 <__aeabi_dcmpeq>
 8007372:	4607      	mov	r7, r0
 8007374:	b158      	cbz	r0, 800738e <_dtoa_r+0xce>
 8007376:	2301      	movs	r3, #1
 8007378:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800737e:	b113      	cbz	r3, 8007386 <_dtoa_r+0xc6>
 8007380:	4b85      	ldr	r3, [pc, #532]	@ (8007598 <_dtoa_r+0x2d8>)
 8007382:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800759c <_dtoa_r+0x2dc>
 800738a:	f000 bd36 	b.w	8007dfa <_dtoa_r+0xb3a>
 800738e:	ab14      	add	r3, sp, #80	@ 0x50
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	ab15      	add	r3, sp, #84	@ 0x54
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4658      	mov	r0, fp
 8007398:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800739c:	f001 fa30 	bl	8008800 <__d2b>
 80073a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80073a4:	4681      	mov	r9, r0
 80073a6:	2e00      	cmp	r6, #0
 80073a8:	d077      	beq.n	800749a <_dtoa_r+0x1da>
 80073aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80073c2:	4619      	mov	r1, r3
 80073c4:	2200      	movs	r2, #0
 80073c6:	4b76      	ldr	r3, [pc, #472]	@ (80075a0 <_dtoa_r+0x2e0>)
 80073c8:	f7f8 fece 	bl	8000168 <__aeabi_dsub>
 80073cc:	a368      	add	r3, pc, #416	@ (adr r3, 8007570 <_dtoa_r+0x2b0>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f7f9 f881 	bl	80004d8 <__aeabi_dmul>
 80073d6:	a368      	add	r3, pc, #416	@ (adr r3, 8007578 <_dtoa_r+0x2b8>)
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f7f8 fec6 	bl	800016c <__adddf3>
 80073e0:	4604      	mov	r4, r0
 80073e2:	4630      	mov	r0, r6
 80073e4:	460d      	mov	r5, r1
 80073e6:	f7f9 f80d 	bl	8000404 <__aeabi_i2d>
 80073ea:	a365      	add	r3, pc, #404	@ (adr r3, 8007580 <_dtoa_r+0x2c0>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f9 f872 	bl	80004d8 <__aeabi_dmul>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4620      	mov	r0, r4
 80073fa:	4629      	mov	r1, r5
 80073fc:	f7f8 feb6 	bl	800016c <__adddf3>
 8007400:	4604      	mov	r4, r0
 8007402:	460d      	mov	r5, r1
 8007404:	f7f9 fb18 	bl	8000a38 <__aeabi_d2iz>
 8007408:	2200      	movs	r2, #0
 800740a:	4607      	mov	r7, r0
 800740c:	2300      	movs	r3, #0
 800740e:	4620      	mov	r0, r4
 8007410:	4629      	mov	r1, r5
 8007412:	f7f9 fad3 	bl	80009bc <__aeabi_dcmplt>
 8007416:	b140      	cbz	r0, 800742a <_dtoa_r+0x16a>
 8007418:	4638      	mov	r0, r7
 800741a:	f7f8 fff3 	bl	8000404 <__aeabi_i2d>
 800741e:	4622      	mov	r2, r4
 8007420:	462b      	mov	r3, r5
 8007422:	f7f9 fac1 	bl	80009a8 <__aeabi_dcmpeq>
 8007426:	b900      	cbnz	r0, 800742a <_dtoa_r+0x16a>
 8007428:	3f01      	subs	r7, #1
 800742a:	2f16      	cmp	r7, #22
 800742c:	d853      	bhi.n	80074d6 <_dtoa_r+0x216>
 800742e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007432:	4b5c      	ldr	r3, [pc, #368]	@ (80075a4 <_dtoa_r+0x2e4>)
 8007434:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	f7f9 fabe 	bl	80009bc <__aeabi_dcmplt>
 8007440:	2800      	cmp	r0, #0
 8007442:	d04a      	beq.n	80074da <_dtoa_r+0x21a>
 8007444:	2300      	movs	r3, #0
 8007446:	3f01      	subs	r7, #1
 8007448:	930f      	str	r3, [sp, #60]	@ 0x3c
 800744a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800744c:	1b9b      	subs	r3, r3, r6
 800744e:	1e5a      	subs	r2, r3, #1
 8007450:	bf46      	itte	mi
 8007452:	f1c3 0801 	rsbmi	r8, r3, #1
 8007456:	2300      	movmi	r3, #0
 8007458:	f04f 0800 	movpl.w	r8, #0
 800745c:	9209      	str	r2, [sp, #36]	@ 0x24
 800745e:	bf48      	it	mi
 8007460:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007462:	2f00      	cmp	r7, #0
 8007464:	db3b      	blt.n	80074de <_dtoa_r+0x21e>
 8007466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007468:	970e      	str	r7, [sp, #56]	@ 0x38
 800746a:	443b      	add	r3, r7
 800746c:	9309      	str	r3, [sp, #36]	@ 0x24
 800746e:	2300      	movs	r3, #0
 8007470:	930a      	str	r3, [sp, #40]	@ 0x28
 8007472:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007474:	2b09      	cmp	r3, #9
 8007476:	d866      	bhi.n	8007546 <_dtoa_r+0x286>
 8007478:	2b05      	cmp	r3, #5
 800747a:	bfc4      	itt	gt
 800747c:	3b04      	subgt	r3, #4
 800747e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007480:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007482:	bfc8      	it	gt
 8007484:	2400      	movgt	r4, #0
 8007486:	f1a3 0302 	sub.w	r3, r3, #2
 800748a:	bfd8      	it	le
 800748c:	2401      	movle	r4, #1
 800748e:	2b03      	cmp	r3, #3
 8007490:	d864      	bhi.n	800755c <_dtoa_r+0x29c>
 8007492:	e8df f003 	tbb	[pc, r3]
 8007496:	382b      	.short	0x382b
 8007498:	5636      	.short	0x5636
 800749a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800749e:	441e      	add	r6, r3
 80074a0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	bfc1      	itttt	gt
 80074a8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80074b0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074b4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074b8:	bfd6      	itet	le
 80074ba:	f1c3 0320 	rsble	r3, r3, #32
 80074be:	ea48 0003 	orrgt.w	r0, r8, r3
 80074c2:	fa04 f003 	lslle.w	r0, r4, r3
 80074c6:	f7f8 ff8d 	bl	80003e4 <__aeabi_ui2d>
 80074ca:	2201      	movs	r2, #1
 80074cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074d0:	3e01      	subs	r6, #1
 80074d2:	9212      	str	r2, [sp, #72]	@ 0x48
 80074d4:	e775      	b.n	80073c2 <_dtoa_r+0x102>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e7b6      	b.n	8007448 <_dtoa_r+0x188>
 80074da:	900f      	str	r0, [sp, #60]	@ 0x3c
 80074dc:	e7b5      	b.n	800744a <_dtoa_r+0x18a>
 80074de:	427b      	negs	r3, r7
 80074e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80074e2:	2300      	movs	r3, #0
 80074e4:	eba8 0807 	sub.w	r8, r8, r7
 80074e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80074ea:	e7c2      	b.n	8007472 <_dtoa_r+0x1b2>
 80074ec:	2300      	movs	r3, #0
 80074ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dc35      	bgt.n	8007562 <_dtoa_r+0x2a2>
 80074f6:	2301      	movs	r3, #1
 80074f8:	461a      	mov	r2, r3
 80074fa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80074fe:	9221      	str	r2, [sp, #132]	@ 0x84
 8007500:	e00b      	b.n	800751a <_dtoa_r+0x25a>
 8007502:	2301      	movs	r3, #1
 8007504:	e7f3      	b.n	80074ee <_dtoa_r+0x22e>
 8007506:	2300      	movs	r3, #0
 8007508:	930b      	str	r3, [sp, #44]	@ 0x2c
 800750a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800750c:	18fb      	adds	r3, r7, r3
 800750e:	9308      	str	r3, [sp, #32]
 8007510:	3301      	adds	r3, #1
 8007512:	2b01      	cmp	r3, #1
 8007514:	9307      	str	r3, [sp, #28]
 8007516:	bfb8      	it	lt
 8007518:	2301      	movlt	r3, #1
 800751a:	2100      	movs	r1, #0
 800751c:	2204      	movs	r2, #4
 800751e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007522:	f102 0514 	add.w	r5, r2, #20
 8007526:	429d      	cmp	r5, r3
 8007528:	d91f      	bls.n	800756a <_dtoa_r+0x2aa>
 800752a:	6041      	str	r1, [r0, #4]
 800752c:	4658      	mov	r0, fp
 800752e:	f000 fd8d 	bl	800804c <_Balloc>
 8007532:	4682      	mov	sl, r0
 8007534:	2800      	cmp	r0, #0
 8007536:	d139      	bne.n	80075ac <_dtoa_r+0x2ec>
 8007538:	4602      	mov	r2, r0
 800753a:	f240 11af 	movw	r1, #431	@ 0x1af
 800753e:	4b1a      	ldr	r3, [pc, #104]	@ (80075a8 <_dtoa_r+0x2e8>)
 8007540:	e6d2      	b.n	80072e8 <_dtoa_r+0x28>
 8007542:	2301      	movs	r3, #1
 8007544:	e7e0      	b.n	8007508 <_dtoa_r+0x248>
 8007546:	2401      	movs	r4, #1
 8007548:	2300      	movs	r3, #0
 800754a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800754c:	9320      	str	r3, [sp, #128]	@ 0x80
 800754e:	f04f 33ff 	mov.w	r3, #4294967295
 8007552:	2200      	movs	r2, #0
 8007554:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007558:	2312      	movs	r3, #18
 800755a:	e7d0      	b.n	80074fe <_dtoa_r+0x23e>
 800755c:	2301      	movs	r3, #1
 800755e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007560:	e7f5      	b.n	800754e <_dtoa_r+0x28e>
 8007562:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007564:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007568:	e7d7      	b.n	800751a <_dtoa_r+0x25a>
 800756a:	3101      	adds	r1, #1
 800756c:	0052      	lsls	r2, r2, #1
 800756e:	e7d8      	b.n	8007522 <_dtoa_r+0x262>
 8007570:	636f4361 	.word	0x636f4361
 8007574:	3fd287a7 	.word	0x3fd287a7
 8007578:	8b60c8b3 	.word	0x8b60c8b3
 800757c:	3fc68a28 	.word	0x3fc68a28
 8007580:	509f79fb 	.word	0x509f79fb
 8007584:	3fd34413 	.word	0x3fd34413
 8007588:	0800b855 	.word	0x0800b855
 800758c:	0800b86c 	.word	0x0800b86c
 8007590:	7ff00000 	.word	0x7ff00000
 8007594:	0800b851 	.word	0x0800b851
 8007598:	0800b820 	.word	0x0800b820
 800759c:	0800b81f 	.word	0x0800b81f
 80075a0:	3ff80000 	.word	0x3ff80000
 80075a4:	0800b968 	.word	0x0800b968
 80075a8:	0800b8c4 	.word	0x0800b8c4
 80075ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075b0:	6018      	str	r0, [r3, #0]
 80075b2:	9b07      	ldr	r3, [sp, #28]
 80075b4:	2b0e      	cmp	r3, #14
 80075b6:	f200 80a4 	bhi.w	8007702 <_dtoa_r+0x442>
 80075ba:	2c00      	cmp	r4, #0
 80075bc:	f000 80a1 	beq.w	8007702 <_dtoa_r+0x442>
 80075c0:	2f00      	cmp	r7, #0
 80075c2:	dd33      	ble.n	800762c <_dtoa_r+0x36c>
 80075c4:	4b86      	ldr	r3, [pc, #536]	@ (80077e0 <_dtoa_r+0x520>)
 80075c6:	f007 020f 	and.w	r2, r7, #15
 80075ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ce:	05f8      	lsls	r0, r7, #23
 80075d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80075d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075dc:	d516      	bpl.n	800760c <_dtoa_r+0x34c>
 80075de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075e2:	4b80      	ldr	r3, [pc, #512]	@ (80077e4 <_dtoa_r+0x524>)
 80075e4:	2603      	movs	r6, #3
 80075e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075ea:	f7f9 f89f 	bl	800072c <__aeabi_ddiv>
 80075ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f2:	f004 040f 	and.w	r4, r4, #15
 80075f6:	4d7b      	ldr	r5, [pc, #492]	@ (80077e4 <_dtoa_r+0x524>)
 80075f8:	b954      	cbnz	r4, 8007610 <_dtoa_r+0x350>
 80075fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007602:	f7f9 f893 	bl	800072c <__aeabi_ddiv>
 8007606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800760a:	e028      	b.n	800765e <_dtoa_r+0x39e>
 800760c:	2602      	movs	r6, #2
 800760e:	e7f2      	b.n	80075f6 <_dtoa_r+0x336>
 8007610:	07e1      	lsls	r1, r4, #31
 8007612:	d508      	bpl.n	8007626 <_dtoa_r+0x366>
 8007614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007618:	e9d5 2300 	ldrd	r2, r3, [r5]
 800761c:	f7f8 ff5c 	bl	80004d8 <__aeabi_dmul>
 8007620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007624:	3601      	adds	r6, #1
 8007626:	1064      	asrs	r4, r4, #1
 8007628:	3508      	adds	r5, #8
 800762a:	e7e5      	b.n	80075f8 <_dtoa_r+0x338>
 800762c:	f000 80d2 	beq.w	80077d4 <_dtoa_r+0x514>
 8007630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007634:	427c      	negs	r4, r7
 8007636:	4b6a      	ldr	r3, [pc, #424]	@ (80077e0 <_dtoa_r+0x520>)
 8007638:	f004 020f 	and.w	r2, r4, #15
 800763c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f7f8 ff48 	bl	80004d8 <__aeabi_dmul>
 8007648:	2602      	movs	r6, #2
 800764a:	2300      	movs	r3, #0
 800764c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007650:	4d64      	ldr	r5, [pc, #400]	@ (80077e4 <_dtoa_r+0x524>)
 8007652:	1124      	asrs	r4, r4, #4
 8007654:	2c00      	cmp	r4, #0
 8007656:	f040 80b2 	bne.w	80077be <_dtoa_r+0x4fe>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1d3      	bne.n	8007606 <_dtoa_r+0x346>
 800765e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 80b7 	beq.w	80077d8 <_dtoa_r+0x518>
 800766a:	2200      	movs	r2, #0
 800766c:	4620      	mov	r0, r4
 800766e:	4629      	mov	r1, r5
 8007670:	4b5d      	ldr	r3, [pc, #372]	@ (80077e8 <_dtoa_r+0x528>)
 8007672:	f7f9 f9a3 	bl	80009bc <__aeabi_dcmplt>
 8007676:	2800      	cmp	r0, #0
 8007678:	f000 80ae 	beq.w	80077d8 <_dtoa_r+0x518>
 800767c:	9b07      	ldr	r3, [sp, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80aa 	beq.w	80077d8 <_dtoa_r+0x518>
 8007684:	9b08      	ldr	r3, [sp, #32]
 8007686:	2b00      	cmp	r3, #0
 8007688:	dd37      	ble.n	80076fa <_dtoa_r+0x43a>
 800768a:	1e7b      	subs	r3, r7, #1
 800768c:	4620      	mov	r0, r4
 800768e:	9304      	str	r3, [sp, #16]
 8007690:	2200      	movs	r2, #0
 8007692:	4629      	mov	r1, r5
 8007694:	4b55      	ldr	r3, [pc, #340]	@ (80077ec <_dtoa_r+0x52c>)
 8007696:	f7f8 ff1f 	bl	80004d8 <__aeabi_dmul>
 800769a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800769e:	9c08      	ldr	r4, [sp, #32]
 80076a0:	3601      	adds	r6, #1
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7f8 feae 	bl	8000404 <__aeabi_i2d>
 80076a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076ac:	f7f8 ff14 	bl	80004d8 <__aeabi_dmul>
 80076b0:	2200      	movs	r2, #0
 80076b2:	4b4f      	ldr	r3, [pc, #316]	@ (80077f0 <_dtoa_r+0x530>)
 80076b4:	f7f8 fd5a 	bl	800016c <__adddf3>
 80076b8:	4605      	mov	r5, r0
 80076ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076be:	2c00      	cmp	r4, #0
 80076c0:	f040 809a 	bne.w	80077f8 <_dtoa_r+0x538>
 80076c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076c8:	2200      	movs	r2, #0
 80076ca:	4b4a      	ldr	r3, [pc, #296]	@ (80077f4 <_dtoa_r+0x534>)
 80076cc:	f7f8 fd4c 	bl	8000168 <__aeabi_dsub>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076d8:	462a      	mov	r2, r5
 80076da:	4633      	mov	r3, r6
 80076dc:	f7f9 f98c 	bl	80009f8 <__aeabi_dcmpgt>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	f040 828e 	bne.w	8007c02 <_dtoa_r+0x942>
 80076e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ea:	462a      	mov	r2, r5
 80076ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076f0:	f7f9 f964 	bl	80009bc <__aeabi_dcmplt>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	f040 8127 	bne.w	8007948 <_dtoa_r+0x688>
 80076fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80076fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007702:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007704:	2b00      	cmp	r3, #0
 8007706:	f2c0 8163 	blt.w	80079d0 <_dtoa_r+0x710>
 800770a:	2f0e      	cmp	r7, #14
 800770c:	f300 8160 	bgt.w	80079d0 <_dtoa_r+0x710>
 8007710:	4b33      	ldr	r3, [pc, #204]	@ (80077e0 <_dtoa_r+0x520>)
 8007712:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007716:	e9d3 3400 	ldrd	r3, r4, [r3]
 800771a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800771e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007720:	2b00      	cmp	r3, #0
 8007722:	da03      	bge.n	800772c <_dtoa_r+0x46c>
 8007724:	9b07      	ldr	r3, [sp, #28]
 8007726:	2b00      	cmp	r3, #0
 8007728:	f340 8100 	ble.w	800792c <_dtoa_r+0x66c>
 800772c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007730:	4656      	mov	r6, sl
 8007732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007736:	4620      	mov	r0, r4
 8007738:	4629      	mov	r1, r5
 800773a:	f7f8 fff7 	bl	800072c <__aeabi_ddiv>
 800773e:	f7f9 f97b 	bl	8000a38 <__aeabi_d2iz>
 8007742:	4680      	mov	r8, r0
 8007744:	f7f8 fe5e 	bl	8000404 <__aeabi_i2d>
 8007748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800774c:	f7f8 fec4 	bl	80004d8 <__aeabi_dmul>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4620      	mov	r0, r4
 8007756:	4629      	mov	r1, r5
 8007758:	f7f8 fd06 	bl	8000168 <__aeabi_dsub>
 800775c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007760:	9d07      	ldr	r5, [sp, #28]
 8007762:	f806 4b01 	strb.w	r4, [r6], #1
 8007766:	eba6 040a 	sub.w	r4, r6, sl
 800776a:	42a5      	cmp	r5, r4
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	f040 8116 	bne.w	80079a0 <_dtoa_r+0x6e0>
 8007774:	f7f8 fcfa 	bl	800016c <__adddf3>
 8007778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800777c:	4604      	mov	r4, r0
 800777e:	460d      	mov	r5, r1
 8007780:	f7f9 f93a 	bl	80009f8 <__aeabi_dcmpgt>
 8007784:	2800      	cmp	r0, #0
 8007786:	f040 80f8 	bne.w	800797a <_dtoa_r+0x6ba>
 800778a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800778e:	4620      	mov	r0, r4
 8007790:	4629      	mov	r1, r5
 8007792:	f7f9 f909 	bl	80009a8 <__aeabi_dcmpeq>
 8007796:	b118      	cbz	r0, 80077a0 <_dtoa_r+0x4e0>
 8007798:	f018 0f01 	tst.w	r8, #1
 800779c:	f040 80ed 	bne.w	800797a <_dtoa_r+0x6ba>
 80077a0:	4649      	mov	r1, r9
 80077a2:	4658      	mov	r0, fp
 80077a4:	f000 fc92 	bl	80080cc <_Bfree>
 80077a8:	2300      	movs	r3, #0
 80077aa:	7033      	strb	r3, [r6, #0]
 80077ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80077ae:	3701      	adds	r7, #1
 80077b0:	601f      	str	r7, [r3, #0]
 80077b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 8320 	beq.w	8007dfa <_dtoa_r+0xb3a>
 80077ba:	601e      	str	r6, [r3, #0]
 80077bc:	e31d      	b.n	8007dfa <_dtoa_r+0xb3a>
 80077be:	07e2      	lsls	r2, r4, #31
 80077c0:	d505      	bpl.n	80077ce <_dtoa_r+0x50e>
 80077c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077c6:	f7f8 fe87 	bl	80004d8 <__aeabi_dmul>
 80077ca:	2301      	movs	r3, #1
 80077cc:	3601      	adds	r6, #1
 80077ce:	1064      	asrs	r4, r4, #1
 80077d0:	3508      	adds	r5, #8
 80077d2:	e73f      	b.n	8007654 <_dtoa_r+0x394>
 80077d4:	2602      	movs	r6, #2
 80077d6:	e742      	b.n	800765e <_dtoa_r+0x39e>
 80077d8:	9c07      	ldr	r4, [sp, #28]
 80077da:	9704      	str	r7, [sp, #16]
 80077dc:	e761      	b.n	80076a2 <_dtoa_r+0x3e2>
 80077de:	bf00      	nop
 80077e0:	0800b968 	.word	0x0800b968
 80077e4:	0800b940 	.word	0x0800b940
 80077e8:	3ff00000 	.word	0x3ff00000
 80077ec:	40240000 	.word	0x40240000
 80077f0:	401c0000 	.word	0x401c0000
 80077f4:	40140000 	.word	0x40140000
 80077f8:	4b70      	ldr	r3, [pc, #448]	@ (80079bc <_dtoa_r+0x6fc>)
 80077fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007800:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007804:	4454      	add	r4, sl
 8007806:	2900      	cmp	r1, #0
 8007808:	d045      	beq.n	8007896 <_dtoa_r+0x5d6>
 800780a:	2000      	movs	r0, #0
 800780c:	496c      	ldr	r1, [pc, #432]	@ (80079c0 <_dtoa_r+0x700>)
 800780e:	f7f8 ff8d 	bl	800072c <__aeabi_ddiv>
 8007812:	4633      	mov	r3, r6
 8007814:	462a      	mov	r2, r5
 8007816:	f7f8 fca7 	bl	8000168 <__aeabi_dsub>
 800781a:	4656      	mov	r6, sl
 800781c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007824:	f7f9 f908 	bl	8000a38 <__aeabi_d2iz>
 8007828:	4605      	mov	r5, r0
 800782a:	f7f8 fdeb 	bl	8000404 <__aeabi_i2d>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007836:	f7f8 fc97 	bl	8000168 <__aeabi_dsub>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	3530      	adds	r5, #48	@ 0x30
 8007840:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007844:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007848:	f806 5b01 	strb.w	r5, [r6], #1
 800784c:	f7f9 f8b6 	bl	80009bc <__aeabi_dcmplt>
 8007850:	2800      	cmp	r0, #0
 8007852:	d163      	bne.n	800791c <_dtoa_r+0x65c>
 8007854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007858:	2000      	movs	r0, #0
 800785a:	495a      	ldr	r1, [pc, #360]	@ (80079c4 <_dtoa_r+0x704>)
 800785c:	f7f8 fc84 	bl	8000168 <__aeabi_dsub>
 8007860:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007864:	f7f9 f8aa 	bl	80009bc <__aeabi_dcmplt>
 8007868:	2800      	cmp	r0, #0
 800786a:	f040 8087 	bne.w	800797c <_dtoa_r+0x6bc>
 800786e:	42a6      	cmp	r6, r4
 8007870:	f43f af43 	beq.w	80076fa <_dtoa_r+0x43a>
 8007874:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007878:	2200      	movs	r2, #0
 800787a:	4b53      	ldr	r3, [pc, #332]	@ (80079c8 <_dtoa_r+0x708>)
 800787c:	f7f8 fe2c 	bl	80004d8 <__aeabi_dmul>
 8007880:	2200      	movs	r2, #0
 8007882:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800788a:	4b4f      	ldr	r3, [pc, #316]	@ (80079c8 <_dtoa_r+0x708>)
 800788c:	f7f8 fe24 	bl	80004d8 <__aeabi_dmul>
 8007890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007894:	e7c4      	b.n	8007820 <_dtoa_r+0x560>
 8007896:	4631      	mov	r1, r6
 8007898:	4628      	mov	r0, r5
 800789a:	f7f8 fe1d 	bl	80004d8 <__aeabi_dmul>
 800789e:	4656      	mov	r6, sl
 80078a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078a4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80078a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078aa:	f7f9 f8c5 	bl	8000a38 <__aeabi_d2iz>
 80078ae:	4605      	mov	r5, r0
 80078b0:	f7f8 fda8 	bl	8000404 <__aeabi_i2d>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078bc:	f7f8 fc54 	bl	8000168 <__aeabi_dsub>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	3530      	adds	r5, #48	@ 0x30
 80078c6:	f806 5b01 	strb.w	r5, [r6], #1
 80078ca:	42a6      	cmp	r6, r4
 80078cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	d124      	bne.n	8007920 <_dtoa_r+0x660>
 80078d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078da:	4b39      	ldr	r3, [pc, #228]	@ (80079c0 <_dtoa_r+0x700>)
 80078dc:	f7f8 fc46 	bl	800016c <__adddf3>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e8:	f7f9 f886 	bl	80009f8 <__aeabi_dcmpgt>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d145      	bne.n	800797c <_dtoa_r+0x6bc>
 80078f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078f4:	2000      	movs	r0, #0
 80078f6:	4932      	ldr	r1, [pc, #200]	@ (80079c0 <_dtoa_r+0x700>)
 80078f8:	f7f8 fc36 	bl	8000168 <__aeabi_dsub>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007904:	f7f9 f85a 	bl	80009bc <__aeabi_dcmplt>
 8007908:	2800      	cmp	r0, #0
 800790a:	f43f aef6 	beq.w	80076fa <_dtoa_r+0x43a>
 800790e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007910:	1e73      	subs	r3, r6, #1
 8007912:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007914:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007918:	2b30      	cmp	r3, #48	@ 0x30
 800791a:	d0f8      	beq.n	800790e <_dtoa_r+0x64e>
 800791c:	9f04      	ldr	r7, [sp, #16]
 800791e:	e73f      	b.n	80077a0 <_dtoa_r+0x4e0>
 8007920:	4b29      	ldr	r3, [pc, #164]	@ (80079c8 <_dtoa_r+0x708>)
 8007922:	f7f8 fdd9 	bl	80004d8 <__aeabi_dmul>
 8007926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800792a:	e7bc      	b.n	80078a6 <_dtoa_r+0x5e6>
 800792c:	d10c      	bne.n	8007948 <_dtoa_r+0x688>
 800792e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007932:	2200      	movs	r2, #0
 8007934:	4b25      	ldr	r3, [pc, #148]	@ (80079cc <_dtoa_r+0x70c>)
 8007936:	f7f8 fdcf 	bl	80004d8 <__aeabi_dmul>
 800793a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800793e:	f7f9 f851 	bl	80009e4 <__aeabi_dcmpge>
 8007942:	2800      	cmp	r0, #0
 8007944:	f000 815b 	beq.w	8007bfe <_dtoa_r+0x93e>
 8007948:	2400      	movs	r4, #0
 800794a:	4625      	mov	r5, r4
 800794c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800794e:	4656      	mov	r6, sl
 8007950:	43db      	mvns	r3, r3
 8007952:	9304      	str	r3, [sp, #16]
 8007954:	2700      	movs	r7, #0
 8007956:	4621      	mov	r1, r4
 8007958:	4658      	mov	r0, fp
 800795a:	f000 fbb7 	bl	80080cc <_Bfree>
 800795e:	2d00      	cmp	r5, #0
 8007960:	d0dc      	beq.n	800791c <_dtoa_r+0x65c>
 8007962:	b12f      	cbz	r7, 8007970 <_dtoa_r+0x6b0>
 8007964:	42af      	cmp	r7, r5
 8007966:	d003      	beq.n	8007970 <_dtoa_r+0x6b0>
 8007968:	4639      	mov	r1, r7
 800796a:	4658      	mov	r0, fp
 800796c:	f000 fbae 	bl	80080cc <_Bfree>
 8007970:	4629      	mov	r1, r5
 8007972:	4658      	mov	r0, fp
 8007974:	f000 fbaa 	bl	80080cc <_Bfree>
 8007978:	e7d0      	b.n	800791c <_dtoa_r+0x65c>
 800797a:	9704      	str	r7, [sp, #16]
 800797c:	4633      	mov	r3, r6
 800797e:	461e      	mov	r6, r3
 8007980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007984:	2a39      	cmp	r2, #57	@ 0x39
 8007986:	d107      	bne.n	8007998 <_dtoa_r+0x6d8>
 8007988:	459a      	cmp	sl, r3
 800798a:	d1f8      	bne.n	800797e <_dtoa_r+0x6be>
 800798c:	9a04      	ldr	r2, [sp, #16]
 800798e:	3201      	adds	r2, #1
 8007990:	9204      	str	r2, [sp, #16]
 8007992:	2230      	movs	r2, #48	@ 0x30
 8007994:	f88a 2000 	strb.w	r2, [sl]
 8007998:	781a      	ldrb	r2, [r3, #0]
 800799a:	3201      	adds	r2, #1
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	e7bd      	b.n	800791c <_dtoa_r+0x65c>
 80079a0:	2200      	movs	r2, #0
 80079a2:	4b09      	ldr	r3, [pc, #36]	@ (80079c8 <_dtoa_r+0x708>)
 80079a4:	f7f8 fd98 	bl	80004d8 <__aeabi_dmul>
 80079a8:	2200      	movs	r2, #0
 80079aa:	2300      	movs	r3, #0
 80079ac:	4604      	mov	r4, r0
 80079ae:	460d      	mov	r5, r1
 80079b0:	f7f8 fffa 	bl	80009a8 <__aeabi_dcmpeq>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	f43f aebc 	beq.w	8007732 <_dtoa_r+0x472>
 80079ba:	e6f1      	b.n	80077a0 <_dtoa_r+0x4e0>
 80079bc:	0800b968 	.word	0x0800b968
 80079c0:	3fe00000 	.word	0x3fe00000
 80079c4:	3ff00000 	.word	0x3ff00000
 80079c8:	40240000 	.word	0x40240000
 80079cc:	40140000 	.word	0x40140000
 80079d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80079d2:	2a00      	cmp	r2, #0
 80079d4:	f000 80db 	beq.w	8007b8e <_dtoa_r+0x8ce>
 80079d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80079da:	2a01      	cmp	r2, #1
 80079dc:	f300 80bf 	bgt.w	8007b5e <_dtoa_r+0x89e>
 80079e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	f000 80b7 	beq.w	8007b56 <_dtoa_r+0x896>
 80079e8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079ec:	4646      	mov	r6, r8
 80079ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079f2:	2101      	movs	r1, #1
 80079f4:	441a      	add	r2, r3
 80079f6:	4658      	mov	r0, fp
 80079f8:	4498      	add	r8, r3
 80079fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80079fc:	f000 fc64 	bl	80082c8 <__i2b>
 8007a00:	4605      	mov	r5, r0
 8007a02:	b15e      	cbz	r6, 8007a1c <_dtoa_r+0x75c>
 8007a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	dd08      	ble.n	8007a1c <_dtoa_r+0x75c>
 8007a0a:	42b3      	cmp	r3, r6
 8007a0c:	bfa8      	it	ge
 8007a0e:	4633      	movge	r3, r6
 8007a10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a12:	eba8 0803 	sub.w	r8, r8, r3
 8007a16:	1af6      	subs	r6, r6, r3
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a1e:	b1f3      	cbz	r3, 8007a5e <_dtoa_r+0x79e>
 8007a20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 80b7 	beq.w	8007b96 <_dtoa_r+0x8d6>
 8007a28:	b18c      	cbz	r4, 8007a4e <_dtoa_r+0x78e>
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	4658      	mov	r0, fp
 8007a30:	f000 fd08 	bl	8008444 <__pow5mult>
 8007a34:	464a      	mov	r2, r9
 8007a36:	4601      	mov	r1, r0
 8007a38:	4605      	mov	r5, r0
 8007a3a:	4658      	mov	r0, fp
 8007a3c:	f000 fc5a 	bl	80082f4 <__multiply>
 8007a40:	4649      	mov	r1, r9
 8007a42:	9004      	str	r0, [sp, #16]
 8007a44:	4658      	mov	r0, fp
 8007a46:	f000 fb41 	bl	80080cc <_Bfree>
 8007a4a:	9b04      	ldr	r3, [sp, #16]
 8007a4c:	4699      	mov	r9, r3
 8007a4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a50:	1b1a      	subs	r2, r3, r4
 8007a52:	d004      	beq.n	8007a5e <_dtoa_r+0x79e>
 8007a54:	4649      	mov	r1, r9
 8007a56:	4658      	mov	r0, fp
 8007a58:	f000 fcf4 	bl	8008444 <__pow5mult>
 8007a5c:	4681      	mov	r9, r0
 8007a5e:	2101      	movs	r1, #1
 8007a60:	4658      	mov	r0, fp
 8007a62:	f000 fc31 	bl	80082c8 <__i2b>
 8007a66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a68:	4604      	mov	r4, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 81c9 	beq.w	8007e02 <_dtoa_r+0xb42>
 8007a70:	461a      	mov	r2, r3
 8007a72:	4601      	mov	r1, r0
 8007a74:	4658      	mov	r0, fp
 8007a76:	f000 fce5 	bl	8008444 <__pow5mult>
 8007a7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	f300 808f 	bgt.w	8007ba2 <_dtoa_r+0x8e2>
 8007a84:	9b02      	ldr	r3, [sp, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f040 8087 	bne.w	8007b9a <_dtoa_r+0x8da>
 8007a8c:	9b03      	ldr	r3, [sp, #12]
 8007a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f040 8083 	bne.w	8007b9e <_dtoa_r+0x8de>
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a9e:	0d1b      	lsrs	r3, r3, #20
 8007aa0:	051b      	lsls	r3, r3, #20
 8007aa2:	b12b      	cbz	r3, 8007ab0 <_dtoa_r+0x7f0>
 8007aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa6:	f108 0801 	add.w	r8, r8, #1
 8007aaa:	3301      	adds	r3, #1
 8007aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aae:	2301      	movs	r3, #1
 8007ab0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 81aa 	beq.w	8007e0e <_dtoa_r+0xb4e>
 8007aba:	6923      	ldr	r3, [r4, #16]
 8007abc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ac0:	6918      	ldr	r0, [r3, #16]
 8007ac2:	f000 fbb5 	bl	8008230 <__hi0bits>
 8007ac6:	f1c0 0020 	rsb	r0, r0, #32
 8007aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007acc:	4418      	add	r0, r3
 8007ace:	f010 001f 	ands.w	r0, r0, #31
 8007ad2:	d071      	beq.n	8007bb8 <_dtoa_r+0x8f8>
 8007ad4:	f1c0 0320 	rsb	r3, r0, #32
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	dd65      	ble.n	8007ba8 <_dtoa_r+0x8e8>
 8007adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ade:	f1c0 001c 	rsb	r0, r0, #28
 8007ae2:	4403      	add	r3, r0
 8007ae4:	4480      	add	r8, r0
 8007ae6:	4406      	add	r6, r0
 8007ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aea:	f1b8 0f00 	cmp.w	r8, #0
 8007aee:	dd05      	ble.n	8007afc <_dtoa_r+0x83c>
 8007af0:	4649      	mov	r1, r9
 8007af2:	4642      	mov	r2, r8
 8007af4:	4658      	mov	r0, fp
 8007af6:	f000 fcff 	bl	80084f8 <__lshift>
 8007afa:	4681      	mov	r9, r0
 8007afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dd05      	ble.n	8007b0e <_dtoa_r+0x84e>
 8007b02:	4621      	mov	r1, r4
 8007b04:	461a      	mov	r2, r3
 8007b06:	4658      	mov	r0, fp
 8007b08:	f000 fcf6 	bl	80084f8 <__lshift>
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d053      	beq.n	8007bbc <_dtoa_r+0x8fc>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4648      	mov	r0, r9
 8007b18:	f000 fd5a 	bl	80085d0 <__mcmp>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	da4d      	bge.n	8007bbc <_dtoa_r+0x8fc>
 8007b20:	1e7b      	subs	r3, r7, #1
 8007b22:	4649      	mov	r1, r9
 8007b24:	9304      	str	r3, [sp, #16]
 8007b26:	220a      	movs	r2, #10
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4658      	mov	r0, fp
 8007b2c:	f000 faf0 	bl	8008110 <__multadd>
 8007b30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b32:	4681      	mov	r9, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 816c 	beq.w	8007e12 <_dtoa_r+0xb52>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	220a      	movs	r2, #10
 8007b40:	4658      	mov	r0, fp
 8007b42:	f000 fae5 	bl	8008110 <__multadd>
 8007b46:	9b08      	ldr	r3, [sp, #32]
 8007b48:	4605      	mov	r5, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dc61      	bgt.n	8007c12 <_dtoa_r+0x952>
 8007b4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	dc3b      	bgt.n	8007bcc <_dtoa_r+0x90c>
 8007b54:	e05d      	b.n	8007c12 <_dtoa_r+0x952>
 8007b56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b58:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b5c:	e746      	b.n	80079ec <_dtoa_r+0x72c>
 8007b5e:	9b07      	ldr	r3, [sp, #28]
 8007b60:	1e5c      	subs	r4, r3, #1
 8007b62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	bfbf      	itttt	lt
 8007b68:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b6a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007b6c:	1ae3      	sublt	r3, r4, r3
 8007b6e:	18d2      	addlt	r2, r2, r3
 8007b70:	bfa8      	it	ge
 8007b72:	1b1c      	subge	r4, r3, r4
 8007b74:	9b07      	ldr	r3, [sp, #28]
 8007b76:	bfbe      	ittt	lt
 8007b78:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b7a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007b7c:	2400      	movlt	r4, #0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bfb5      	itete	lt
 8007b82:	eba8 0603 	sublt.w	r6, r8, r3
 8007b86:	4646      	movge	r6, r8
 8007b88:	2300      	movlt	r3, #0
 8007b8a:	9b07      	ldrge	r3, [sp, #28]
 8007b8c:	e730      	b.n	80079f0 <_dtoa_r+0x730>
 8007b8e:	4646      	mov	r6, r8
 8007b90:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b94:	e735      	b.n	8007a02 <_dtoa_r+0x742>
 8007b96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b98:	e75c      	b.n	8007a54 <_dtoa_r+0x794>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e788      	b.n	8007ab0 <_dtoa_r+0x7f0>
 8007b9e:	9b02      	ldr	r3, [sp, #8]
 8007ba0:	e786      	b.n	8007ab0 <_dtoa_r+0x7f0>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ba6:	e788      	b.n	8007aba <_dtoa_r+0x7fa>
 8007ba8:	d09f      	beq.n	8007aea <_dtoa_r+0x82a>
 8007baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bac:	331c      	adds	r3, #28
 8007bae:	441a      	add	r2, r3
 8007bb0:	4498      	add	r8, r3
 8007bb2:	441e      	add	r6, r3
 8007bb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bb6:	e798      	b.n	8007aea <_dtoa_r+0x82a>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	e7f6      	b.n	8007baa <_dtoa_r+0x8ea>
 8007bbc:	9b07      	ldr	r3, [sp, #28]
 8007bbe:	9704      	str	r7, [sp, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dc20      	bgt.n	8007c06 <_dtoa_r+0x946>
 8007bc4:	9308      	str	r3, [sp, #32]
 8007bc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	dd1e      	ble.n	8007c0a <_dtoa_r+0x94a>
 8007bcc:	9b08      	ldr	r3, [sp, #32]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f47f aebc 	bne.w	800794c <_dtoa_r+0x68c>
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	2205      	movs	r2, #5
 8007bd8:	4658      	mov	r0, fp
 8007bda:	f000 fa99 	bl	8008110 <__multadd>
 8007bde:	4601      	mov	r1, r0
 8007be0:	4604      	mov	r4, r0
 8007be2:	4648      	mov	r0, r9
 8007be4:	f000 fcf4 	bl	80085d0 <__mcmp>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	f77f aeaf 	ble.w	800794c <_dtoa_r+0x68c>
 8007bee:	2331      	movs	r3, #49	@ 0x31
 8007bf0:	4656      	mov	r6, sl
 8007bf2:	f806 3b01 	strb.w	r3, [r6], #1
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	e6aa      	b.n	8007954 <_dtoa_r+0x694>
 8007bfe:	9c07      	ldr	r4, [sp, #28]
 8007c00:	9704      	str	r7, [sp, #16]
 8007c02:	4625      	mov	r5, r4
 8007c04:	e7f3      	b.n	8007bee <_dtoa_r+0x92e>
 8007c06:	9b07      	ldr	r3, [sp, #28]
 8007c08:	9308      	str	r3, [sp, #32]
 8007c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 8104 	beq.w	8007e1a <_dtoa_r+0xb5a>
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	dd05      	ble.n	8007c22 <_dtoa_r+0x962>
 8007c16:	4629      	mov	r1, r5
 8007c18:	4632      	mov	r2, r6
 8007c1a:	4658      	mov	r0, fp
 8007c1c:	f000 fc6c 	bl	80084f8 <__lshift>
 8007c20:	4605      	mov	r5, r0
 8007c22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d05a      	beq.n	8007cde <_dtoa_r+0xa1e>
 8007c28:	4658      	mov	r0, fp
 8007c2a:	6869      	ldr	r1, [r5, #4]
 8007c2c:	f000 fa0e 	bl	800804c <_Balloc>
 8007c30:	4606      	mov	r6, r0
 8007c32:	b928      	cbnz	r0, 8007c40 <_dtoa_r+0x980>
 8007c34:	4602      	mov	r2, r0
 8007c36:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c3a:	4b83      	ldr	r3, [pc, #524]	@ (8007e48 <_dtoa_r+0xb88>)
 8007c3c:	f7ff bb54 	b.w	80072e8 <_dtoa_r+0x28>
 8007c40:	692a      	ldr	r2, [r5, #16]
 8007c42:	f105 010c 	add.w	r1, r5, #12
 8007c46:	3202      	adds	r2, #2
 8007c48:	0092      	lsls	r2, r2, #2
 8007c4a:	300c      	adds	r0, #12
 8007c4c:	f7ff fa9d 	bl	800718a <memcpy>
 8007c50:	2201      	movs	r2, #1
 8007c52:	4631      	mov	r1, r6
 8007c54:	4658      	mov	r0, fp
 8007c56:	f000 fc4f 	bl	80084f8 <__lshift>
 8007c5a:	462f      	mov	r7, r5
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	f10a 0301 	add.w	r3, sl, #1
 8007c62:	9307      	str	r3, [sp, #28]
 8007c64:	9b08      	ldr	r3, [sp, #32]
 8007c66:	4453      	add	r3, sl
 8007c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c6a:	9b02      	ldr	r3, [sp, #8]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c72:	9b07      	ldr	r3, [sp, #28]
 8007c74:	4621      	mov	r1, r4
 8007c76:	3b01      	subs	r3, #1
 8007c78:	4648      	mov	r0, r9
 8007c7a:	9302      	str	r3, [sp, #8]
 8007c7c:	f7ff fa98 	bl	80071b0 <quorem>
 8007c80:	4639      	mov	r1, r7
 8007c82:	9008      	str	r0, [sp, #32]
 8007c84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c88:	4648      	mov	r0, r9
 8007c8a:	f000 fca1 	bl	80085d0 <__mcmp>
 8007c8e:	462a      	mov	r2, r5
 8007c90:	9009      	str	r0, [sp, #36]	@ 0x24
 8007c92:	4621      	mov	r1, r4
 8007c94:	4658      	mov	r0, fp
 8007c96:	f000 fcb7 	bl	8008608 <__mdiff>
 8007c9a:	68c2      	ldr	r2, [r0, #12]
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	bb02      	cbnz	r2, 8007ce2 <_dtoa_r+0xa22>
 8007ca0:	4601      	mov	r1, r0
 8007ca2:	4648      	mov	r0, r9
 8007ca4:	f000 fc94 	bl	80085d0 <__mcmp>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	4631      	mov	r1, r6
 8007cac:	4658      	mov	r0, fp
 8007cae:	920c      	str	r2, [sp, #48]	@ 0x30
 8007cb0:	f000 fa0c 	bl	80080cc <_Bfree>
 8007cb4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007cb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007cb8:	9e07      	ldr	r6, [sp, #28]
 8007cba:	ea43 0102 	orr.w	r1, r3, r2
 8007cbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cc0:	4319      	orrs	r1, r3
 8007cc2:	d110      	bne.n	8007ce6 <_dtoa_r+0xa26>
 8007cc4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cc8:	d029      	beq.n	8007d1e <_dtoa_r+0xa5e>
 8007cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	dd02      	ble.n	8007cd6 <_dtoa_r+0xa16>
 8007cd0:	9b08      	ldr	r3, [sp, #32]
 8007cd2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007cd6:	9b02      	ldr	r3, [sp, #8]
 8007cd8:	f883 8000 	strb.w	r8, [r3]
 8007cdc:	e63b      	b.n	8007956 <_dtoa_r+0x696>
 8007cde:	4628      	mov	r0, r5
 8007ce0:	e7bb      	b.n	8007c5a <_dtoa_r+0x99a>
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	e7e1      	b.n	8007caa <_dtoa_r+0x9ea>
 8007ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	db04      	blt.n	8007cf6 <_dtoa_r+0xa36>
 8007cec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007cee:	430b      	orrs	r3, r1
 8007cf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	d120      	bne.n	8007d38 <_dtoa_r+0xa78>
 8007cf6:	2a00      	cmp	r2, #0
 8007cf8:	dded      	ble.n	8007cd6 <_dtoa_r+0xa16>
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	4658      	mov	r0, fp
 8007d00:	f000 fbfa 	bl	80084f8 <__lshift>
 8007d04:	4621      	mov	r1, r4
 8007d06:	4681      	mov	r9, r0
 8007d08:	f000 fc62 	bl	80085d0 <__mcmp>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	dc03      	bgt.n	8007d18 <_dtoa_r+0xa58>
 8007d10:	d1e1      	bne.n	8007cd6 <_dtoa_r+0xa16>
 8007d12:	f018 0f01 	tst.w	r8, #1
 8007d16:	d0de      	beq.n	8007cd6 <_dtoa_r+0xa16>
 8007d18:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d1c:	d1d8      	bne.n	8007cd0 <_dtoa_r+0xa10>
 8007d1e:	2339      	movs	r3, #57	@ 0x39
 8007d20:	9a02      	ldr	r2, [sp, #8]
 8007d22:	7013      	strb	r3, [r2, #0]
 8007d24:	4633      	mov	r3, r6
 8007d26:	461e      	mov	r6, r3
 8007d28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	2a39      	cmp	r2, #57	@ 0x39
 8007d30:	d052      	beq.n	8007dd8 <_dtoa_r+0xb18>
 8007d32:	3201      	adds	r2, #1
 8007d34:	701a      	strb	r2, [r3, #0]
 8007d36:	e60e      	b.n	8007956 <_dtoa_r+0x696>
 8007d38:	2a00      	cmp	r2, #0
 8007d3a:	dd07      	ble.n	8007d4c <_dtoa_r+0xa8c>
 8007d3c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d40:	d0ed      	beq.n	8007d1e <_dtoa_r+0xa5e>
 8007d42:	9a02      	ldr	r2, [sp, #8]
 8007d44:	f108 0301 	add.w	r3, r8, #1
 8007d48:	7013      	strb	r3, [r2, #0]
 8007d4a:	e604      	b.n	8007956 <_dtoa_r+0x696>
 8007d4c:	9b07      	ldr	r3, [sp, #28]
 8007d4e:	9a07      	ldr	r2, [sp, #28]
 8007d50:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d028      	beq.n	8007dac <_dtoa_r+0xaec>
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	220a      	movs	r2, #10
 8007d60:	4658      	mov	r0, fp
 8007d62:	f000 f9d5 	bl	8008110 <__multadd>
 8007d66:	42af      	cmp	r7, r5
 8007d68:	4681      	mov	r9, r0
 8007d6a:	f04f 0300 	mov.w	r3, #0
 8007d6e:	f04f 020a 	mov.w	r2, #10
 8007d72:	4639      	mov	r1, r7
 8007d74:	4658      	mov	r0, fp
 8007d76:	d107      	bne.n	8007d88 <_dtoa_r+0xac8>
 8007d78:	f000 f9ca 	bl	8008110 <__multadd>
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	4605      	mov	r5, r0
 8007d80:	9b07      	ldr	r3, [sp, #28]
 8007d82:	3301      	adds	r3, #1
 8007d84:	9307      	str	r3, [sp, #28]
 8007d86:	e774      	b.n	8007c72 <_dtoa_r+0x9b2>
 8007d88:	f000 f9c2 	bl	8008110 <__multadd>
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	4607      	mov	r7, r0
 8007d90:	2300      	movs	r3, #0
 8007d92:	220a      	movs	r2, #10
 8007d94:	4658      	mov	r0, fp
 8007d96:	f000 f9bb 	bl	8008110 <__multadd>
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	e7f0      	b.n	8007d80 <_dtoa_r+0xac0>
 8007d9e:	9b08      	ldr	r3, [sp, #32]
 8007da0:	2700      	movs	r7, #0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bfcc      	ite	gt
 8007da6:	461e      	movgt	r6, r3
 8007da8:	2601      	movle	r6, #1
 8007daa:	4456      	add	r6, sl
 8007dac:	4649      	mov	r1, r9
 8007dae:	2201      	movs	r2, #1
 8007db0:	4658      	mov	r0, fp
 8007db2:	f000 fba1 	bl	80084f8 <__lshift>
 8007db6:	4621      	mov	r1, r4
 8007db8:	4681      	mov	r9, r0
 8007dba:	f000 fc09 	bl	80085d0 <__mcmp>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	dcb0      	bgt.n	8007d24 <_dtoa_r+0xa64>
 8007dc2:	d102      	bne.n	8007dca <_dtoa_r+0xb0a>
 8007dc4:	f018 0f01 	tst.w	r8, #1
 8007dc8:	d1ac      	bne.n	8007d24 <_dtoa_r+0xa64>
 8007dca:	4633      	mov	r3, r6
 8007dcc:	461e      	mov	r6, r3
 8007dce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dd2:	2a30      	cmp	r2, #48	@ 0x30
 8007dd4:	d0fa      	beq.n	8007dcc <_dtoa_r+0xb0c>
 8007dd6:	e5be      	b.n	8007956 <_dtoa_r+0x696>
 8007dd8:	459a      	cmp	sl, r3
 8007dda:	d1a4      	bne.n	8007d26 <_dtoa_r+0xa66>
 8007ddc:	9b04      	ldr	r3, [sp, #16]
 8007dde:	3301      	adds	r3, #1
 8007de0:	9304      	str	r3, [sp, #16]
 8007de2:	2331      	movs	r3, #49	@ 0x31
 8007de4:	f88a 3000 	strb.w	r3, [sl]
 8007de8:	e5b5      	b.n	8007956 <_dtoa_r+0x696>
 8007dea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007dec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e4c <_dtoa_r+0xb8c>
 8007df0:	b11b      	cbz	r3, 8007dfa <_dtoa_r+0xb3a>
 8007df2:	f10a 0308 	add.w	r3, sl, #8
 8007df6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	4650      	mov	r0, sl
 8007dfc:	b017      	add	sp, #92	@ 0x5c
 8007dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	f77f ae3d 	ble.w	8007a84 <_dtoa_r+0x7c4>
 8007e0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e0e:	2001      	movs	r0, #1
 8007e10:	e65b      	b.n	8007aca <_dtoa_r+0x80a>
 8007e12:	9b08      	ldr	r3, [sp, #32]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f77f aed6 	ble.w	8007bc6 <_dtoa_r+0x906>
 8007e1a:	4656      	mov	r6, sl
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	4648      	mov	r0, r9
 8007e20:	f7ff f9c6 	bl	80071b0 <quorem>
 8007e24:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e28:	9b08      	ldr	r3, [sp, #32]
 8007e2a:	f806 8b01 	strb.w	r8, [r6], #1
 8007e2e:	eba6 020a 	sub.w	r2, r6, sl
 8007e32:	4293      	cmp	r3, r2
 8007e34:	ddb3      	ble.n	8007d9e <_dtoa_r+0xade>
 8007e36:	4649      	mov	r1, r9
 8007e38:	2300      	movs	r3, #0
 8007e3a:	220a      	movs	r2, #10
 8007e3c:	4658      	mov	r0, fp
 8007e3e:	f000 f967 	bl	8008110 <__multadd>
 8007e42:	4681      	mov	r9, r0
 8007e44:	e7ea      	b.n	8007e1c <_dtoa_r+0xb5c>
 8007e46:	bf00      	nop
 8007e48:	0800b8c4 	.word	0x0800b8c4
 8007e4c:	0800b848 	.word	0x0800b848

08007e50 <_free_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4605      	mov	r5, r0
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d040      	beq.n	8007eda <_free_r+0x8a>
 8007e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e5c:	1f0c      	subs	r4, r1, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bfb8      	it	lt
 8007e62:	18e4      	addlt	r4, r4, r3
 8007e64:	f000 f8e6 	bl	8008034 <__malloc_lock>
 8007e68:	4a1c      	ldr	r2, [pc, #112]	@ (8007edc <_free_r+0x8c>)
 8007e6a:	6813      	ldr	r3, [r2, #0]
 8007e6c:	b933      	cbnz	r3, 8007e7c <_free_r+0x2c>
 8007e6e:	6063      	str	r3, [r4, #4]
 8007e70:	6014      	str	r4, [r2, #0]
 8007e72:	4628      	mov	r0, r5
 8007e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e78:	f000 b8e2 	b.w	8008040 <__malloc_unlock>
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	d908      	bls.n	8007e92 <_free_r+0x42>
 8007e80:	6820      	ldr	r0, [r4, #0]
 8007e82:	1821      	adds	r1, r4, r0
 8007e84:	428b      	cmp	r3, r1
 8007e86:	bf01      	itttt	eq
 8007e88:	6819      	ldreq	r1, [r3, #0]
 8007e8a:	685b      	ldreq	r3, [r3, #4]
 8007e8c:	1809      	addeq	r1, r1, r0
 8007e8e:	6021      	streq	r1, [r4, #0]
 8007e90:	e7ed      	b.n	8007e6e <_free_r+0x1e>
 8007e92:	461a      	mov	r2, r3
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	b10b      	cbz	r3, 8007e9c <_free_r+0x4c>
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d9fa      	bls.n	8007e92 <_free_r+0x42>
 8007e9c:	6811      	ldr	r1, [r2, #0]
 8007e9e:	1850      	adds	r0, r2, r1
 8007ea0:	42a0      	cmp	r0, r4
 8007ea2:	d10b      	bne.n	8007ebc <_free_r+0x6c>
 8007ea4:	6820      	ldr	r0, [r4, #0]
 8007ea6:	4401      	add	r1, r0
 8007ea8:	1850      	adds	r0, r2, r1
 8007eaa:	4283      	cmp	r3, r0
 8007eac:	6011      	str	r1, [r2, #0]
 8007eae:	d1e0      	bne.n	8007e72 <_free_r+0x22>
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	4408      	add	r0, r1
 8007eb6:	6010      	str	r0, [r2, #0]
 8007eb8:	6053      	str	r3, [r2, #4]
 8007eba:	e7da      	b.n	8007e72 <_free_r+0x22>
 8007ebc:	d902      	bls.n	8007ec4 <_free_r+0x74>
 8007ebe:	230c      	movs	r3, #12
 8007ec0:	602b      	str	r3, [r5, #0]
 8007ec2:	e7d6      	b.n	8007e72 <_free_r+0x22>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	1821      	adds	r1, r4, r0
 8007ec8:	428b      	cmp	r3, r1
 8007eca:	bf01      	itttt	eq
 8007ecc:	6819      	ldreq	r1, [r3, #0]
 8007ece:	685b      	ldreq	r3, [r3, #4]
 8007ed0:	1809      	addeq	r1, r1, r0
 8007ed2:	6021      	streq	r1, [r4, #0]
 8007ed4:	6063      	str	r3, [r4, #4]
 8007ed6:	6054      	str	r4, [r2, #4]
 8007ed8:	e7cb      	b.n	8007e72 <_free_r+0x22>
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	20000b84 	.word	0x20000b84

08007ee0 <malloc>:
 8007ee0:	4b02      	ldr	r3, [pc, #8]	@ (8007eec <malloc+0xc>)
 8007ee2:	4601      	mov	r1, r0
 8007ee4:	6818      	ldr	r0, [r3, #0]
 8007ee6:	f000 b825 	b.w	8007f34 <_malloc_r>
 8007eea:	bf00      	nop
 8007eec:	20000020 	.word	0x20000020

08007ef0 <sbrk_aligned>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	4e0f      	ldr	r6, [pc, #60]	@ (8007f30 <sbrk_aligned+0x40>)
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	6831      	ldr	r1, [r6, #0]
 8007ef8:	4605      	mov	r5, r0
 8007efa:	b911      	cbnz	r1, 8007f02 <sbrk_aligned+0x12>
 8007efc:	f001 fd7a 	bl	80099f4 <_sbrk_r>
 8007f00:	6030      	str	r0, [r6, #0]
 8007f02:	4621      	mov	r1, r4
 8007f04:	4628      	mov	r0, r5
 8007f06:	f001 fd75 	bl	80099f4 <_sbrk_r>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	d103      	bne.n	8007f16 <sbrk_aligned+0x26>
 8007f0e:	f04f 34ff 	mov.w	r4, #4294967295
 8007f12:	4620      	mov	r0, r4
 8007f14:	bd70      	pop	{r4, r5, r6, pc}
 8007f16:	1cc4      	adds	r4, r0, #3
 8007f18:	f024 0403 	bic.w	r4, r4, #3
 8007f1c:	42a0      	cmp	r0, r4
 8007f1e:	d0f8      	beq.n	8007f12 <sbrk_aligned+0x22>
 8007f20:	1a21      	subs	r1, r4, r0
 8007f22:	4628      	mov	r0, r5
 8007f24:	f001 fd66 	bl	80099f4 <_sbrk_r>
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d1f2      	bne.n	8007f12 <sbrk_aligned+0x22>
 8007f2c:	e7ef      	b.n	8007f0e <sbrk_aligned+0x1e>
 8007f2e:	bf00      	nop
 8007f30:	20000b80 	.word	0x20000b80

08007f34 <_malloc_r>:
 8007f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f38:	1ccd      	adds	r5, r1, #3
 8007f3a:	f025 0503 	bic.w	r5, r5, #3
 8007f3e:	3508      	adds	r5, #8
 8007f40:	2d0c      	cmp	r5, #12
 8007f42:	bf38      	it	cc
 8007f44:	250c      	movcc	r5, #12
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	4606      	mov	r6, r0
 8007f4a:	db01      	blt.n	8007f50 <_malloc_r+0x1c>
 8007f4c:	42a9      	cmp	r1, r5
 8007f4e:	d904      	bls.n	8007f5a <_malloc_r+0x26>
 8007f50:	230c      	movs	r3, #12
 8007f52:	6033      	str	r3, [r6, #0]
 8007f54:	2000      	movs	r0, #0
 8007f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008030 <_malloc_r+0xfc>
 8007f5e:	f000 f869 	bl	8008034 <__malloc_lock>
 8007f62:	f8d8 3000 	ldr.w	r3, [r8]
 8007f66:	461c      	mov	r4, r3
 8007f68:	bb44      	cbnz	r4, 8007fbc <_malloc_r+0x88>
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff ffbf 	bl	8007ef0 <sbrk_aligned>
 8007f72:	1c43      	adds	r3, r0, #1
 8007f74:	4604      	mov	r4, r0
 8007f76:	d158      	bne.n	800802a <_malloc_r+0xf6>
 8007f78:	f8d8 4000 	ldr.w	r4, [r8]
 8007f7c:	4627      	mov	r7, r4
 8007f7e:	2f00      	cmp	r7, #0
 8007f80:	d143      	bne.n	800800a <_malloc_r+0xd6>
 8007f82:	2c00      	cmp	r4, #0
 8007f84:	d04b      	beq.n	800801e <_malloc_r+0xea>
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	4639      	mov	r1, r7
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	eb04 0903 	add.w	r9, r4, r3
 8007f90:	f001 fd30 	bl	80099f4 <_sbrk_r>
 8007f94:	4581      	cmp	r9, r0
 8007f96:	d142      	bne.n	800801e <_malloc_r+0xea>
 8007f98:	6821      	ldr	r1, [r4, #0]
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	1a6d      	subs	r5, r5, r1
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f7ff ffa6 	bl	8007ef0 <sbrk_aligned>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d03a      	beq.n	800801e <_malloc_r+0xea>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	442b      	add	r3, r5
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	bb62      	cbnz	r2, 8008010 <_malloc_r+0xdc>
 8007fb6:	f8c8 7000 	str.w	r7, [r8]
 8007fba:	e00f      	b.n	8007fdc <_malloc_r+0xa8>
 8007fbc:	6822      	ldr	r2, [r4, #0]
 8007fbe:	1b52      	subs	r2, r2, r5
 8007fc0:	d420      	bmi.n	8008004 <_malloc_r+0xd0>
 8007fc2:	2a0b      	cmp	r2, #11
 8007fc4:	d917      	bls.n	8007ff6 <_malloc_r+0xc2>
 8007fc6:	1961      	adds	r1, r4, r5
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	6025      	str	r5, [r4, #0]
 8007fcc:	bf18      	it	ne
 8007fce:	6059      	strne	r1, [r3, #4]
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	bf08      	it	eq
 8007fd4:	f8c8 1000 	streq.w	r1, [r8]
 8007fd8:	5162      	str	r2, [r4, r5]
 8007fda:	604b      	str	r3, [r1, #4]
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f000 f82f 	bl	8008040 <__malloc_unlock>
 8007fe2:	f104 000b 	add.w	r0, r4, #11
 8007fe6:	1d23      	adds	r3, r4, #4
 8007fe8:	f020 0007 	bic.w	r0, r0, #7
 8007fec:	1ac2      	subs	r2, r0, r3
 8007fee:	bf1c      	itt	ne
 8007ff0:	1a1b      	subne	r3, r3, r0
 8007ff2:	50a3      	strne	r3, [r4, r2]
 8007ff4:	e7af      	b.n	8007f56 <_malloc_r+0x22>
 8007ff6:	6862      	ldr	r2, [r4, #4]
 8007ff8:	42a3      	cmp	r3, r4
 8007ffa:	bf0c      	ite	eq
 8007ffc:	f8c8 2000 	streq.w	r2, [r8]
 8008000:	605a      	strne	r2, [r3, #4]
 8008002:	e7eb      	b.n	8007fdc <_malloc_r+0xa8>
 8008004:	4623      	mov	r3, r4
 8008006:	6864      	ldr	r4, [r4, #4]
 8008008:	e7ae      	b.n	8007f68 <_malloc_r+0x34>
 800800a:	463c      	mov	r4, r7
 800800c:	687f      	ldr	r7, [r7, #4]
 800800e:	e7b6      	b.n	8007f7e <_malloc_r+0x4a>
 8008010:	461a      	mov	r2, r3
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	42a3      	cmp	r3, r4
 8008016:	d1fb      	bne.n	8008010 <_malloc_r+0xdc>
 8008018:	2300      	movs	r3, #0
 800801a:	6053      	str	r3, [r2, #4]
 800801c:	e7de      	b.n	8007fdc <_malloc_r+0xa8>
 800801e:	230c      	movs	r3, #12
 8008020:	4630      	mov	r0, r6
 8008022:	6033      	str	r3, [r6, #0]
 8008024:	f000 f80c 	bl	8008040 <__malloc_unlock>
 8008028:	e794      	b.n	8007f54 <_malloc_r+0x20>
 800802a:	6005      	str	r5, [r0, #0]
 800802c:	e7d6      	b.n	8007fdc <_malloc_r+0xa8>
 800802e:	bf00      	nop
 8008030:	20000b84 	.word	0x20000b84

08008034 <__malloc_lock>:
 8008034:	4801      	ldr	r0, [pc, #4]	@ (800803c <__malloc_lock+0x8>)
 8008036:	f7ff b890 	b.w	800715a <__retarget_lock_acquire_recursive>
 800803a:	bf00      	nop
 800803c:	20000b7c 	.word	0x20000b7c

08008040 <__malloc_unlock>:
 8008040:	4801      	ldr	r0, [pc, #4]	@ (8008048 <__malloc_unlock+0x8>)
 8008042:	f7ff b88b 	b.w	800715c <__retarget_lock_release_recursive>
 8008046:	bf00      	nop
 8008048:	20000b7c 	.word	0x20000b7c

0800804c <_Balloc>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	69c6      	ldr	r6, [r0, #28]
 8008050:	4604      	mov	r4, r0
 8008052:	460d      	mov	r5, r1
 8008054:	b976      	cbnz	r6, 8008074 <_Balloc+0x28>
 8008056:	2010      	movs	r0, #16
 8008058:	f7ff ff42 	bl	8007ee0 <malloc>
 800805c:	4602      	mov	r2, r0
 800805e:	61e0      	str	r0, [r4, #28]
 8008060:	b920      	cbnz	r0, 800806c <_Balloc+0x20>
 8008062:	216b      	movs	r1, #107	@ 0x6b
 8008064:	4b17      	ldr	r3, [pc, #92]	@ (80080c4 <_Balloc+0x78>)
 8008066:	4818      	ldr	r0, [pc, #96]	@ (80080c8 <_Balloc+0x7c>)
 8008068:	f001 fcda 	bl	8009a20 <__assert_func>
 800806c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008070:	6006      	str	r6, [r0, #0]
 8008072:	60c6      	str	r6, [r0, #12]
 8008074:	69e6      	ldr	r6, [r4, #28]
 8008076:	68f3      	ldr	r3, [r6, #12]
 8008078:	b183      	cbz	r3, 800809c <_Balloc+0x50>
 800807a:	69e3      	ldr	r3, [r4, #28]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008082:	b9b8      	cbnz	r0, 80080b4 <_Balloc+0x68>
 8008084:	2101      	movs	r1, #1
 8008086:	fa01 f605 	lsl.w	r6, r1, r5
 800808a:	1d72      	adds	r2, r6, #5
 800808c:	4620      	mov	r0, r4
 800808e:	0092      	lsls	r2, r2, #2
 8008090:	f001 fce4 	bl	8009a5c <_calloc_r>
 8008094:	b160      	cbz	r0, 80080b0 <_Balloc+0x64>
 8008096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800809a:	e00e      	b.n	80080ba <_Balloc+0x6e>
 800809c:	2221      	movs	r2, #33	@ 0x21
 800809e:	2104      	movs	r1, #4
 80080a0:	4620      	mov	r0, r4
 80080a2:	f001 fcdb 	bl	8009a5c <_calloc_r>
 80080a6:	69e3      	ldr	r3, [r4, #28]
 80080a8:	60f0      	str	r0, [r6, #12]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e4      	bne.n	800807a <_Balloc+0x2e>
 80080b0:	2000      	movs	r0, #0
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	6802      	ldr	r2, [r0, #0]
 80080b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080ba:	2300      	movs	r3, #0
 80080bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080c0:	e7f7      	b.n	80080b2 <_Balloc+0x66>
 80080c2:	bf00      	nop
 80080c4:	0800b855 	.word	0x0800b855
 80080c8:	0800b8d5 	.word	0x0800b8d5

080080cc <_Bfree>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	69c6      	ldr	r6, [r0, #28]
 80080d0:	4605      	mov	r5, r0
 80080d2:	460c      	mov	r4, r1
 80080d4:	b976      	cbnz	r6, 80080f4 <_Bfree+0x28>
 80080d6:	2010      	movs	r0, #16
 80080d8:	f7ff ff02 	bl	8007ee0 <malloc>
 80080dc:	4602      	mov	r2, r0
 80080de:	61e8      	str	r0, [r5, #28]
 80080e0:	b920      	cbnz	r0, 80080ec <_Bfree+0x20>
 80080e2:	218f      	movs	r1, #143	@ 0x8f
 80080e4:	4b08      	ldr	r3, [pc, #32]	@ (8008108 <_Bfree+0x3c>)
 80080e6:	4809      	ldr	r0, [pc, #36]	@ (800810c <_Bfree+0x40>)
 80080e8:	f001 fc9a 	bl	8009a20 <__assert_func>
 80080ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080f0:	6006      	str	r6, [r0, #0]
 80080f2:	60c6      	str	r6, [r0, #12]
 80080f4:	b13c      	cbz	r4, 8008106 <_Bfree+0x3a>
 80080f6:	69eb      	ldr	r3, [r5, #28]
 80080f8:	6862      	ldr	r2, [r4, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008100:	6021      	str	r1, [r4, #0]
 8008102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	0800b855 	.word	0x0800b855
 800810c:	0800b8d5 	.word	0x0800b8d5

08008110 <__multadd>:
 8008110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008114:	4607      	mov	r7, r0
 8008116:	460c      	mov	r4, r1
 8008118:	461e      	mov	r6, r3
 800811a:	2000      	movs	r0, #0
 800811c:	690d      	ldr	r5, [r1, #16]
 800811e:	f101 0c14 	add.w	ip, r1, #20
 8008122:	f8dc 3000 	ldr.w	r3, [ip]
 8008126:	3001      	adds	r0, #1
 8008128:	b299      	uxth	r1, r3
 800812a:	fb02 6101 	mla	r1, r2, r1, r6
 800812e:	0c1e      	lsrs	r6, r3, #16
 8008130:	0c0b      	lsrs	r3, r1, #16
 8008132:	fb02 3306 	mla	r3, r2, r6, r3
 8008136:	b289      	uxth	r1, r1
 8008138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800813c:	4285      	cmp	r5, r0
 800813e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008142:	f84c 1b04 	str.w	r1, [ip], #4
 8008146:	dcec      	bgt.n	8008122 <__multadd+0x12>
 8008148:	b30e      	cbz	r6, 800818e <__multadd+0x7e>
 800814a:	68a3      	ldr	r3, [r4, #8]
 800814c:	42ab      	cmp	r3, r5
 800814e:	dc19      	bgt.n	8008184 <__multadd+0x74>
 8008150:	6861      	ldr	r1, [r4, #4]
 8008152:	4638      	mov	r0, r7
 8008154:	3101      	adds	r1, #1
 8008156:	f7ff ff79 	bl	800804c <_Balloc>
 800815a:	4680      	mov	r8, r0
 800815c:	b928      	cbnz	r0, 800816a <__multadd+0x5a>
 800815e:	4602      	mov	r2, r0
 8008160:	21ba      	movs	r1, #186	@ 0xba
 8008162:	4b0c      	ldr	r3, [pc, #48]	@ (8008194 <__multadd+0x84>)
 8008164:	480c      	ldr	r0, [pc, #48]	@ (8008198 <__multadd+0x88>)
 8008166:	f001 fc5b 	bl	8009a20 <__assert_func>
 800816a:	6922      	ldr	r2, [r4, #16]
 800816c:	f104 010c 	add.w	r1, r4, #12
 8008170:	3202      	adds	r2, #2
 8008172:	0092      	lsls	r2, r2, #2
 8008174:	300c      	adds	r0, #12
 8008176:	f7ff f808 	bl	800718a <memcpy>
 800817a:	4621      	mov	r1, r4
 800817c:	4638      	mov	r0, r7
 800817e:	f7ff ffa5 	bl	80080cc <_Bfree>
 8008182:	4644      	mov	r4, r8
 8008184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008188:	3501      	adds	r5, #1
 800818a:	615e      	str	r6, [r3, #20]
 800818c:	6125      	str	r5, [r4, #16]
 800818e:	4620      	mov	r0, r4
 8008190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008194:	0800b8c4 	.word	0x0800b8c4
 8008198:	0800b8d5 	.word	0x0800b8d5

0800819c <__s2b>:
 800819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a0:	4615      	mov	r5, r2
 80081a2:	2209      	movs	r2, #9
 80081a4:	461f      	mov	r7, r3
 80081a6:	3308      	adds	r3, #8
 80081a8:	460c      	mov	r4, r1
 80081aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80081ae:	4606      	mov	r6, r0
 80081b0:	2201      	movs	r2, #1
 80081b2:	2100      	movs	r1, #0
 80081b4:	429a      	cmp	r2, r3
 80081b6:	db09      	blt.n	80081cc <__s2b+0x30>
 80081b8:	4630      	mov	r0, r6
 80081ba:	f7ff ff47 	bl	800804c <_Balloc>
 80081be:	b940      	cbnz	r0, 80081d2 <__s2b+0x36>
 80081c0:	4602      	mov	r2, r0
 80081c2:	21d3      	movs	r1, #211	@ 0xd3
 80081c4:	4b18      	ldr	r3, [pc, #96]	@ (8008228 <__s2b+0x8c>)
 80081c6:	4819      	ldr	r0, [pc, #100]	@ (800822c <__s2b+0x90>)
 80081c8:	f001 fc2a 	bl	8009a20 <__assert_func>
 80081cc:	0052      	lsls	r2, r2, #1
 80081ce:	3101      	adds	r1, #1
 80081d0:	e7f0      	b.n	80081b4 <__s2b+0x18>
 80081d2:	9b08      	ldr	r3, [sp, #32]
 80081d4:	2d09      	cmp	r5, #9
 80081d6:	6143      	str	r3, [r0, #20]
 80081d8:	f04f 0301 	mov.w	r3, #1
 80081dc:	6103      	str	r3, [r0, #16]
 80081de:	dd16      	ble.n	800820e <__s2b+0x72>
 80081e0:	f104 0909 	add.w	r9, r4, #9
 80081e4:	46c8      	mov	r8, r9
 80081e6:	442c      	add	r4, r5
 80081e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80081ec:	4601      	mov	r1, r0
 80081ee:	220a      	movs	r2, #10
 80081f0:	4630      	mov	r0, r6
 80081f2:	3b30      	subs	r3, #48	@ 0x30
 80081f4:	f7ff ff8c 	bl	8008110 <__multadd>
 80081f8:	45a0      	cmp	r8, r4
 80081fa:	d1f5      	bne.n	80081e8 <__s2b+0x4c>
 80081fc:	f1a5 0408 	sub.w	r4, r5, #8
 8008200:	444c      	add	r4, r9
 8008202:	1b2d      	subs	r5, r5, r4
 8008204:	1963      	adds	r3, r4, r5
 8008206:	42bb      	cmp	r3, r7
 8008208:	db04      	blt.n	8008214 <__s2b+0x78>
 800820a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820e:	2509      	movs	r5, #9
 8008210:	340a      	adds	r4, #10
 8008212:	e7f6      	b.n	8008202 <__s2b+0x66>
 8008214:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008218:	4601      	mov	r1, r0
 800821a:	220a      	movs	r2, #10
 800821c:	4630      	mov	r0, r6
 800821e:	3b30      	subs	r3, #48	@ 0x30
 8008220:	f7ff ff76 	bl	8008110 <__multadd>
 8008224:	e7ee      	b.n	8008204 <__s2b+0x68>
 8008226:	bf00      	nop
 8008228:	0800b8c4 	.word	0x0800b8c4
 800822c:	0800b8d5 	.word	0x0800b8d5

08008230 <__hi0bits>:
 8008230:	4603      	mov	r3, r0
 8008232:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008236:	bf3a      	itte	cc
 8008238:	0403      	lslcc	r3, r0, #16
 800823a:	2010      	movcc	r0, #16
 800823c:	2000      	movcs	r0, #0
 800823e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008242:	bf3c      	itt	cc
 8008244:	021b      	lslcc	r3, r3, #8
 8008246:	3008      	addcc	r0, #8
 8008248:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800824c:	bf3c      	itt	cc
 800824e:	011b      	lslcc	r3, r3, #4
 8008250:	3004      	addcc	r0, #4
 8008252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008256:	bf3c      	itt	cc
 8008258:	009b      	lslcc	r3, r3, #2
 800825a:	3002      	addcc	r0, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	db05      	blt.n	800826c <__hi0bits+0x3c>
 8008260:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008264:	f100 0001 	add.w	r0, r0, #1
 8008268:	bf08      	it	eq
 800826a:	2020      	moveq	r0, #32
 800826c:	4770      	bx	lr

0800826e <__lo0bits>:
 800826e:	6803      	ldr	r3, [r0, #0]
 8008270:	4602      	mov	r2, r0
 8008272:	f013 0007 	ands.w	r0, r3, #7
 8008276:	d00b      	beq.n	8008290 <__lo0bits+0x22>
 8008278:	07d9      	lsls	r1, r3, #31
 800827a:	d421      	bmi.n	80082c0 <__lo0bits+0x52>
 800827c:	0798      	lsls	r0, r3, #30
 800827e:	bf49      	itett	mi
 8008280:	085b      	lsrmi	r3, r3, #1
 8008282:	089b      	lsrpl	r3, r3, #2
 8008284:	2001      	movmi	r0, #1
 8008286:	6013      	strmi	r3, [r2, #0]
 8008288:	bf5c      	itt	pl
 800828a:	2002      	movpl	r0, #2
 800828c:	6013      	strpl	r3, [r2, #0]
 800828e:	4770      	bx	lr
 8008290:	b299      	uxth	r1, r3
 8008292:	b909      	cbnz	r1, 8008298 <__lo0bits+0x2a>
 8008294:	2010      	movs	r0, #16
 8008296:	0c1b      	lsrs	r3, r3, #16
 8008298:	b2d9      	uxtb	r1, r3
 800829a:	b909      	cbnz	r1, 80082a0 <__lo0bits+0x32>
 800829c:	3008      	adds	r0, #8
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	0719      	lsls	r1, r3, #28
 80082a2:	bf04      	itt	eq
 80082a4:	091b      	lsreq	r3, r3, #4
 80082a6:	3004      	addeq	r0, #4
 80082a8:	0799      	lsls	r1, r3, #30
 80082aa:	bf04      	itt	eq
 80082ac:	089b      	lsreq	r3, r3, #2
 80082ae:	3002      	addeq	r0, #2
 80082b0:	07d9      	lsls	r1, r3, #31
 80082b2:	d403      	bmi.n	80082bc <__lo0bits+0x4e>
 80082b4:	085b      	lsrs	r3, r3, #1
 80082b6:	f100 0001 	add.w	r0, r0, #1
 80082ba:	d003      	beq.n	80082c4 <__lo0bits+0x56>
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	4770      	bx	lr
 80082c0:	2000      	movs	r0, #0
 80082c2:	4770      	bx	lr
 80082c4:	2020      	movs	r0, #32
 80082c6:	4770      	bx	lr

080082c8 <__i2b>:
 80082c8:	b510      	push	{r4, lr}
 80082ca:	460c      	mov	r4, r1
 80082cc:	2101      	movs	r1, #1
 80082ce:	f7ff febd 	bl	800804c <_Balloc>
 80082d2:	4602      	mov	r2, r0
 80082d4:	b928      	cbnz	r0, 80082e2 <__i2b+0x1a>
 80082d6:	f240 1145 	movw	r1, #325	@ 0x145
 80082da:	4b04      	ldr	r3, [pc, #16]	@ (80082ec <__i2b+0x24>)
 80082dc:	4804      	ldr	r0, [pc, #16]	@ (80082f0 <__i2b+0x28>)
 80082de:	f001 fb9f 	bl	8009a20 <__assert_func>
 80082e2:	2301      	movs	r3, #1
 80082e4:	6144      	str	r4, [r0, #20]
 80082e6:	6103      	str	r3, [r0, #16]
 80082e8:	bd10      	pop	{r4, pc}
 80082ea:	bf00      	nop
 80082ec:	0800b8c4 	.word	0x0800b8c4
 80082f0:	0800b8d5 	.word	0x0800b8d5

080082f4 <__multiply>:
 80082f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	4614      	mov	r4, r2
 80082fa:	690a      	ldr	r2, [r1, #16]
 80082fc:	6923      	ldr	r3, [r4, #16]
 80082fe:	460f      	mov	r7, r1
 8008300:	429a      	cmp	r2, r3
 8008302:	bfa2      	ittt	ge
 8008304:	4623      	movge	r3, r4
 8008306:	460c      	movge	r4, r1
 8008308:	461f      	movge	r7, r3
 800830a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800830e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008312:	68a3      	ldr	r3, [r4, #8]
 8008314:	6861      	ldr	r1, [r4, #4]
 8008316:	eb0a 0609 	add.w	r6, sl, r9
 800831a:	42b3      	cmp	r3, r6
 800831c:	b085      	sub	sp, #20
 800831e:	bfb8      	it	lt
 8008320:	3101      	addlt	r1, #1
 8008322:	f7ff fe93 	bl	800804c <_Balloc>
 8008326:	b930      	cbnz	r0, 8008336 <__multiply+0x42>
 8008328:	4602      	mov	r2, r0
 800832a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800832e:	4b43      	ldr	r3, [pc, #268]	@ (800843c <__multiply+0x148>)
 8008330:	4843      	ldr	r0, [pc, #268]	@ (8008440 <__multiply+0x14c>)
 8008332:	f001 fb75 	bl	8009a20 <__assert_func>
 8008336:	f100 0514 	add.w	r5, r0, #20
 800833a:	462b      	mov	r3, r5
 800833c:	2200      	movs	r2, #0
 800833e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008342:	4543      	cmp	r3, r8
 8008344:	d321      	bcc.n	800838a <__multiply+0x96>
 8008346:	f107 0114 	add.w	r1, r7, #20
 800834a:	f104 0214 	add.w	r2, r4, #20
 800834e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008352:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008356:	9302      	str	r3, [sp, #8]
 8008358:	1b13      	subs	r3, r2, r4
 800835a:	3b15      	subs	r3, #21
 800835c:	f023 0303 	bic.w	r3, r3, #3
 8008360:	3304      	adds	r3, #4
 8008362:	f104 0715 	add.w	r7, r4, #21
 8008366:	42ba      	cmp	r2, r7
 8008368:	bf38      	it	cc
 800836a:	2304      	movcc	r3, #4
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	9b02      	ldr	r3, [sp, #8]
 8008370:	9103      	str	r1, [sp, #12]
 8008372:	428b      	cmp	r3, r1
 8008374:	d80c      	bhi.n	8008390 <__multiply+0x9c>
 8008376:	2e00      	cmp	r6, #0
 8008378:	dd03      	ble.n	8008382 <__multiply+0x8e>
 800837a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800837e:	2b00      	cmp	r3, #0
 8008380:	d05a      	beq.n	8008438 <__multiply+0x144>
 8008382:	6106      	str	r6, [r0, #16]
 8008384:	b005      	add	sp, #20
 8008386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838a:	f843 2b04 	str.w	r2, [r3], #4
 800838e:	e7d8      	b.n	8008342 <__multiply+0x4e>
 8008390:	f8b1 a000 	ldrh.w	sl, [r1]
 8008394:	f1ba 0f00 	cmp.w	sl, #0
 8008398:	d023      	beq.n	80083e2 <__multiply+0xee>
 800839a:	46a9      	mov	r9, r5
 800839c:	f04f 0c00 	mov.w	ip, #0
 80083a0:	f104 0e14 	add.w	lr, r4, #20
 80083a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083a8:	f8d9 3000 	ldr.w	r3, [r9]
 80083ac:	fa1f fb87 	uxth.w	fp, r7
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	fb0a 330b 	mla	r3, sl, fp, r3
 80083b6:	4463      	add	r3, ip
 80083b8:	f8d9 c000 	ldr.w	ip, [r9]
 80083bc:	0c3f      	lsrs	r7, r7, #16
 80083be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80083c2:	fb0a c707 	mla	r7, sl, r7, ip
 80083c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80083d0:	4572      	cmp	r2, lr
 80083d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80083d6:	f849 3b04 	str.w	r3, [r9], #4
 80083da:	d8e3      	bhi.n	80083a4 <__multiply+0xb0>
 80083dc:	9b01      	ldr	r3, [sp, #4]
 80083de:	f845 c003 	str.w	ip, [r5, r3]
 80083e2:	9b03      	ldr	r3, [sp, #12]
 80083e4:	3104      	adds	r1, #4
 80083e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80083ea:	f1b9 0f00 	cmp.w	r9, #0
 80083ee:	d021      	beq.n	8008434 <__multiply+0x140>
 80083f0:	46ae      	mov	lr, r5
 80083f2:	f04f 0a00 	mov.w	sl, #0
 80083f6:	682b      	ldr	r3, [r5, #0]
 80083f8:	f104 0c14 	add.w	ip, r4, #20
 80083fc:	f8bc b000 	ldrh.w	fp, [ip]
 8008400:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008404:	b29b      	uxth	r3, r3
 8008406:	fb09 770b 	mla	r7, r9, fp, r7
 800840a:	4457      	add	r7, sl
 800840c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008410:	f84e 3b04 	str.w	r3, [lr], #4
 8008414:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008418:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800841c:	f8be 3000 	ldrh.w	r3, [lr]
 8008420:	4562      	cmp	r2, ip
 8008422:	fb09 330a 	mla	r3, r9, sl, r3
 8008426:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800842a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800842e:	d8e5      	bhi.n	80083fc <__multiply+0x108>
 8008430:	9f01      	ldr	r7, [sp, #4]
 8008432:	51eb      	str	r3, [r5, r7]
 8008434:	3504      	adds	r5, #4
 8008436:	e79a      	b.n	800836e <__multiply+0x7a>
 8008438:	3e01      	subs	r6, #1
 800843a:	e79c      	b.n	8008376 <__multiply+0x82>
 800843c:	0800b8c4 	.word	0x0800b8c4
 8008440:	0800b8d5 	.word	0x0800b8d5

08008444 <__pow5mult>:
 8008444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008448:	4615      	mov	r5, r2
 800844a:	f012 0203 	ands.w	r2, r2, #3
 800844e:	4607      	mov	r7, r0
 8008450:	460e      	mov	r6, r1
 8008452:	d007      	beq.n	8008464 <__pow5mult+0x20>
 8008454:	4c25      	ldr	r4, [pc, #148]	@ (80084ec <__pow5mult+0xa8>)
 8008456:	3a01      	subs	r2, #1
 8008458:	2300      	movs	r3, #0
 800845a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800845e:	f7ff fe57 	bl	8008110 <__multadd>
 8008462:	4606      	mov	r6, r0
 8008464:	10ad      	asrs	r5, r5, #2
 8008466:	d03d      	beq.n	80084e4 <__pow5mult+0xa0>
 8008468:	69fc      	ldr	r4, [r7, #28]
 800846a:	b97c      	cbnz	r4, 800848c <__pow5mult+0x48>
 800846c:	2010      	movs	r0, #16
 800846e:	f7ff fd37 	bl	8007ee0 <malloc>
 8008472:	4602      	mov	r2, r0
 8008474:	61f8      	str	r0, [r7, #28]
 8008476:	b928      	cbnz	r0, 8008484 <__pow5mult+0x40>
 8008478:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800847c:	4b1c      	ldr	r3, [pc, #112]	@ (80084f0 <__pow5mult+0xac>)
 800847e:	481d      	ldr	r0, [pc, #116]	@ (80084f4 <__pow5mult+0xb0>)
 8008480:	f001 face 	bl	8009a20 <__assert_func>
 8008484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008488:	6004      	str	r4, [r0, #0]
 800848a:	60c4      	str	r4, [r0, #12]
 800848c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008494:	b94c      	cbnz	r4, 80084aa <__pow5mult+0x66>
 8008496:	f240 2171 	movw	r1, #625	@ 0x271
 800849a:	4638      	mov	r0, r7
 800849c:	f7ff ff14 	bl	80082c8 <__i2b>
 80084a0:	2300      	movs	r3, #0
 80084a2:	4604      	mov	r4, r0
 80084a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80084a8:	6003      	str	r3, [r0, #0]
 80084aa:	f04f 0900 	mov.w	r9, #0
 80084ae:	07eb      	lsls	r3, r5, #31
 80084b0:	d50a      	bpl.n	80084c8 <__pow5mult+0x84>
 80084b2:	4631      	mov	r1, r6
 80084b4:	4622      	mov	r2, r4
 80084b6:	4638      	mov	r0, r7
 80084b8:	f7ff ff1c 	bl	80082f4 <__multiply>
 80084bc:	4680      	mov	r8, r0
 80084be:	4631      	mov	r1, r6
 80084c0:	4638      	mov	r0, r7
 80084c2:	f7ff fe03 	bl	80080cc <_Bfree>
 80084c6:	4646      	mov	r6, r8
 80084c8:	106d      	asrs	r5, r5, #1
 80084ca:	d00b      	beq.n	80084e4 <__pow5mult+0xa0>
 80084cc:	6820      	ldr	r0, [r4, #0]
 80084ce:	b938      	cbnz	r0, 80084e0 <__pow5mult+0x9c>
 80084d0:	4622      	mov	r2, r4
 80084d2:	4621      	mov	r1, r4
 80084d4:	4638      	mov	r0, r7
 80084d6:	f7ff ff0d 	bl	80082f4 <__multiply>
 80084da:	6020      	str	r0, [r4, #0]
 80084dc:	f8c0 9000 	str.w	r9, [r0]
 80084e0:	4604      	mov	r4, r0
 80084e2:	e7e4      	b.n	80084ae <__pow5mult+0x6a>
 80084e4:	4630      	mov	r0, r6
 80084e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ea:	bf00      	nop
 80084ec:	0800b930 	.word	0x0800b930
 80084f0:	0800b855 	.word	0x0800b855
 80084f4:	0800b8d5 	.word	0x0800b8d5

080084f8 <__lshift>:
 80084f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084fc:	460c      	mov	r4, r1
 80084fe:	4607      	mov	r7, r0
 8008500:	4691      	mov	r9, r2
 8008502:	6923      	ldr	r3, [r4, #16]
 8008504:	6849      	ldr	r1, [r1, #4]
 8008506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800850a:	68a3      	ldr	r3, [r4, #8]
 800850c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008510:	f108 0601 	add.w	r6, r8, #1
 8008514:	42b3      	cmp	r3, r6
 8008516:	db0b      	blt.n	8008530 <__lshift+0x38>
 8008518:	4638      	mov	r0, r7
 800851a:	f7ff fd97 	bl	800804c <_Balloc>
 800851e:	4605      	mov	r5, r0
 8008520:	b948      	cbnz	r0, 8008536 <__lshift+0x3e>
 8008522:	4602      	mov	r2, r0
 8008524:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008528:	4b27      	ldr	r3, [pc, #156]	@ (80085c8 <__lshift+0xd0>)
 800852a:	4828      	ldr	r0, [pc, #160]	@ (80085cc <__lshift+0xd4>)
 800852c:	f001 fa78 	bl	8009a20 <__assert_func>
 8008530:	3101      	adds	r1, #1
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	e7ee      	b.n	8008514 <__lshift+0x1c>
 8008536:	2300      	movs	r3, #0
 8008538:	f100 0114 	add.w	r1, r0, #20
 800853c:	f100 0210 	add.w	r2, r0, #16
 8008540:	4618      	mov	r0, r3
 8008542:	4553      	cmp	r3, sl
 8008544:	db33      	blt.n	80085ae <__lshift+0xb6>
 8008546:	6920      	ldr	r0, [r4, #16]
 8008548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800854c:	f104 0314 	add.w	r3, r4, #20
 8008550:	f019 091f 	ands.w	r9, r9, #31
 8008554:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008558:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800855c:	d02b      	beq.n	80085b6 <__lshift+0xbe>
 800855e:	468a      	mov	sl, r1
 8008560:	2200      	movs	r2, #0
 8008562:	f1c9 0e20 	rsb	lr, r9, #32
 8008566:	6818      	ldr	r0, [r3, #0]
 8008568:	fa00 f009 	lsl.w	r0, r0, r9
 800856c:	4310      	orrs	r0, r2
 800856e:	f84a 0b04 	str.w	r0, [sl], #4
 8008572:	f853 2b04 	ldr.w	r2, [r3], #4
 8008576:	459c      	cmp	ip, r3
 8008578:	fa22 f20e 	lsr.w	r2, r2, lr
 800857c:	d8f3      	bhi.n	8008566 <__lshift+0x6e>
 800857e:	ebac 0304 	sub.w	r3, ip, r4
 8008582:	3b15      	subs	r3, #21
 8008584:	f023 0303 	bic.w	r3, r3, #3
 8008588:	3304      	adds	r3, #4
 800858a:	f104 0015 	add.w	r0, r4, #21
 800858e:	4584      	cmp	ip, r0
 8008590:	bf38      	it	cc
 8008592:	2304      	movcc	r3, #4
 8008594:	50ca      	str	r2, [r1, r3]
 8008596:	b10a      	cbz	r2, 800859c <__lshift+0xa4>
 8008598:	f108 0602 	add.w	r6, r8, #2
 800859c:	3e01      	subs	r6, #1
 800859e:	4638      	mov	r0, r7
 80085a0:	4621      	mov	r1, r4
 80085a2:	612e      	str	r6, [r5, #16]
 80085a4:	f7ff fd92 	bl	80080cc <_Bfree>
 80085a8:	4628      	mov	r0, r5
 80085aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80085b2:	3301      	adds	r3, #1
 80085b4:	e7c5      	b.n	8008542 <__lshift+0x4a>
 80085b6:	3904      	subs	r1, #4
 80085b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085bc:	459c      	cmp	ip, r3
 80085be:	f841 2f04 	str.w	r2, [r1, #4]!
 80085c2:	d8f9      	bhi.n	80085b8 <__lshift+0xc0>
 80085c4:	e7ea      	b.n	800859c <__lshift+0xa4>
 80085c6:	bf00      	nop
 80085c8:	0800b8c4 	.word	0x0800b8c4
 80085cc:	0800b8d5 	.word	0x0800b8d5

080085d0 <__mcmp>:
 80085d0:	4603      	mov	r3, r0
 80085d2:	690a      	ldr	r2, [r1, #16]
 80085d4:	6900      	ldr	r0, [r0, #16]
 80085d6:	b530      	push	{r4, r5, lr}
 80085d8:	1a80      	subs	r0, r0, r2
 80085da:	d10e      	bne.n	80085fa <__mcmp+0x2a>
 80085dc:	3314      	adds	r3, #20
 80085de:	3114      	adds	r1, #20
 80085e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80085e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80085e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085f0:	4295      	cmp	r5, r2
 80085f2:	d003      	beq.n	80085fc <__mcmp+0x2c>
 80085f4:	d205      	bcs.n	8008602 <__mcmp+0x32>
 80085f6:	f04f 30ff 	mov.w	r0, #4294967295
 80085fa:	bd30      	pop	{r4, r5, pc}
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	d3f3      	bcc.n	80085e8 <__mcmp+0x18>
 8008600:	e7fb      	b.n	80085fa <__mcmp+0x2a>
 8008602:	2001      	movs	r0, #1
 8008604:	e7f9      	b.n	80085fa <__mcmp+0x2a>
	...

08008608 <__mdiff>:
 8008608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860c:	4689      	mov	r9, r1
 800860e:	4606      	mov	r6, r0
 8008610:	4611      	mov	r1, r2
 8008612:	4648      	mov	r0, r9
 8008614:	4614      	mov	r4, r2
 8008616:	f7ff ffdb 	bl	80085d0 <__mcmp>
 800861a:	1e05      	subs	r5, r0, #0
 800861c:	d112      	bne.n	8008644 <__mdiff+0x3c>
 800861e:	4629      	mov	r1, r5
 8008620:	4630      	mov	r0, r6
 8008622:	f7ff fd13 	bl	800804c <_Balloc>
 8008626:	4602      	mov	r2, r0
 8008628:	b928      	cbnz	r0, 8008636 <__mdiff+0x2e>
 800862a:	f240 2137 	movw	r1, #567	@ 0x237
 800862e:	4b3e      	ldr	r3, [pc, #248]	@ (8008728 <__mdiff+0x120>)
 8008630:	483e      	ldr	r0, [pc, #248]	@ (800872c <__mdiff+0x124>)
 8008632:	f001 f9f5 	bl	8009a20 <__assert_func>
 8008636:	2301      	movs	r3, #1
 8008638:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800863c:	4610      	mov	r0, r2
 800863e:	b003      	add	sp, #12
 8008640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008644:	bfbc      	itt	lt
 8008646:	464b      	movlt	r3, r9
 8008648:	46a1      	movlt	r9, r4
 800864a:	4630      	mov	r0, r6
 800864c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008650:	bfba      	itte	lt
 8008652:	461c      	movlt	r4, r3
 8008654:	2501      	movlt	r5, #1
 8008656:	2500      	movge	r5, #0
 8008658:	f7ff fcf8 	bl	800804c <_Balloc>
 800865c:	4602      	mov	r2, r0
 800865e:	b918      	cbnz	r0, 8008668 <__mdiff+0x60>
 8008660:	f240 2145 	movw	r1, #581	@ 0x245
 8008664:	4b30      	ldr	r3, [pc, #192]	@ (8008728 <__mdiff+0x120>)
 8008666:	e7e3      	b.n	8008630 <__mdiff+0x28>
 8008668:	f100 0b14 	add.w	fp, r0, #20
 800866c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008670:	f109 0310 	add.w	r3, r9, #16
 8008674:	60c5      	str	r5, [r0, #12]
 8008676:	f04f 0c00 	mov.w	ip, #0
 800867a:	f109 0514 	add.w	r5, r9, #20
 800867e:	46d9      	mov	r9, fp
 8008680:	6926      	ldr	r6, [r4, #16]
 8008682:	f104 0e14 	add.w	lr, r4, #20
 8008686:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800868a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800868e:	9301      	str	r3, [sp, #4]
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008696:	f853 af04 	ldr.w	sl, [r3, #4]!
 800869a:	b281      	uxth	r1, r0
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	fa1f f38a 	uxth.w	r3, sl
 80086a2:	1a5b      	subs	r3, r3, r1
 80086a4:	0c00      	lsrs	r0, r0, #16
 80086a6:	4463      	add	r3, ip
 80086a8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80086ac:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80086b6:	4576      	cmp	r6, lr
 80086b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086bc:	f849 3b04 	str.w	r3, [r9], #4
 80086c0:	d8e6      	bhi.n	8008690 <__mdiff+0x88>
 80086c2:	1b33      	subs	r3, r6, r4
 80086c4:	3b15      	subs	r3, #21
 80086c6:	f023 0303 	bic.w	r3, r3, #3
 80086ca:	3415      	adds	r4, #21
 80086cc:	3304      	adds	r3, #4
 80086ce:	42a6      	cmp	r6, r4
 80086d0:	bf38      	it	cc
 80086d2:	2304      	movcc	r3, #4
 80086d4:	441d      	add	r5, r3
 80086d6:	445b      	add	r3, fp
 80086d8:	461e      	mov	r6, r3
 80086da:	462c      	mov	r4, r5
 80086dc:	4544      	cmp	r4, r8
 80086de:	d30e      	bcc.n	80086fe <__mdiff+0xf6>
 80086e0:	f108 0103 	add.w	r1, r8, #3
 80086e4:	1b49      	subs	r1, r1, r5
 80086e6:	f021 0103 	bic.w	r1, r1, #3
 80086ea:	3d03      	subs	r5, #3
 80086ec:	45a8      	cmp	r8, r5
 80086ee:	bf38      	it	cc
 80086f0:	2100      	movcc	r1, #0
 80086f2:	440b      	add	r3, r1
 80086f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086f8:	b199      	cbz	r1, 8008722 <__mdiff+0x11a>
 80086fa:	6117      	str	r7, [r2, #16]
 80086fc:	e79e      	b.n	800863c <__mdiff+0x34>
 80086fe:	46e6      	mov	lr, ip
 8008700:	f854 1b04 	ldr.w	r1, [r4], #4
 8008704:	fa1f fc81 	uxth.w	ip, r1
 8008708:	44f4      	add	ip, lr
 800870a:	0c08      	lsrs	r0, r1, #16
 800870c:	4471      	add	r1, lr
 800870e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008712:	b289      	uxth	r1, r1
 8008714:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008718:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800871c:	f846 1b04 	str.w	r1, [r6], #4
 8008720:	e7dc      	b.n	80086dc <__mdiff+0xd4>
 8008722:	3f01      	subs	r7, #1
 8008724:	e7e6      	b.n	80086f4 <__mdiff+0xec>
 8008726:	bf00      	nop
 8008728:	0800b8c4 	.word	0x0800b8c4
 800872c:	0800b8d5 	.word	0x0800b8d5

08008730 <__ulp>:
 8008730:	4b0e      	ldr	r3, [pc, #56]	@ (800876c <__ulp+0x3c>)
 8008732:	400b      	ands	r3, r1
 8008734:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008738:	2b00      	cmp	r3, #0
 800873a:	dc08      	bgt.n	800874e <__ulp+0x1e>
 800873c:	425b      	negs	r3, r3
 800873e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008742:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008746:	da04      	bge.n	8008752 <__ulp+0x22>
 8008748:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800874c:	4113      	asrs	r3, r2
 800874e:	2200      	movs	r2, #0
 8008750:	e008      	b.n	8008764 <__ulp+0x34>
 8008752:	f1a2 0314 	sub.w	r3, r2, #20
 8008756:	2b1e      	cmp	r3, #30
 8008758:	bfd6      	itet	le
 800875a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800875e:	2201      	movgt	r2, #1
 8008760:	40da      	lsrle	r2, r3
 8008762:	2300      	movs	r3, #0
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	7ff00000 	.word	0x7ff00000

08008770 <__b2d>:
 8008770:	6902      	ldr	r2, [r0, #16]
 8008772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008774:	f100 0614 	add.w	r6, r0, #20
 8008778:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800877c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008780:	4f1e      	ldr	r7, [pc, #120]	@ (80087fc <__b2d+0x8c>)
 8008782:	4620      	mov	r0, r4
 8008784:	f7ff fd54 	bl	8008230 <__hi0bits>
 8008788:	4603      	mov	r3, r0
 800878a:	f1c0 0020 	rsb	r0, r0, #32
 800878e:	2b0a      	cmp	r3, #10
 8008790:	f1a2 0504 	sub.w	r5, r2, #4
 8008794:	6008      	str	r0, [r1, #0]
 8008796:	dc12      	bgt.n	80087be <__b2d+0x4e>
 8008798:	42ae      	cmp	r6, r5
 800879a:	bf2c      	ite	cs
 800879c:	2200      	movcs	r2, #0
 800879e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80087a2:	f1c3 0c0b 	rsb	ip, r3, #11
 80087a6:	3315      	adds	r3, #21
 80087a8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80087ac:	fa04 f303 	lsl.w	r3, r4, r3
 80087b0:	fa22 f20c 	lsr.w	r2, r2, ip
 80087b4:	ea4e 0107 	orr.w	r1, lr, r7
 80087b8:	431a      	orrs	r2, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087be:	42ae      	cmp	r6, r5
 80087c0:	bf36      	itet	cc
 80087c2:	f1a2 0508 	subcc.w	r5, r2, #8
 80087c6:	2200      	movcs	r2, #0
 80087c8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80087cc:	3b0b      	subs	r3, #11
 80087ce:	d012      	beq.n	80087f6 <__b2d+0x86>
 80087d0:	f1c3 0720 	rsb	r7, r3, #32
 80087d4:	fa22 f107 	lsr.w	r1, r2, r7
 80087d8:	409c      	lsls	r4, r3
 80087da:	430c      	orrs	r4, r1
 80087dc:	42b5      	cmp	r5, r6
 80087de:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80087e2:	bf94      	ite	ls
 80087e4:	2400      	movls	r4, #0
 80087e6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80087ea:	409a      	lsls	r2, r3
 80087ec:	40fc      	lsrs	r4, r7
 80087ee:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80087f2:	4322      	orrs	r2, r4
 80087f4:	e7e1      	b.n	80087ba <__b2d+0x4a>
 80087f6:	ea44 0107 	orr.w	r1, r4, r7
 80087fa:	e7de      	b.n	80087ba <__b2d+0x4a>
 80087fc:	3ff00000 	.word	0x3ff00000

08008800 <__d2b>:
 8008800:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008804:	2101      	movs	r1, #1
 8008806:	4690      	mov	r8, r2
 8008808:	4699      	mov	r9, r3
 800880a:	9e08      	ldr	r6, [sp, #32]
 800880c:	f7ff fc1e 	bl	800804c <_Balloc>
 8008810:	4604      	mov	r4, r0
 8008812:	b930      	cbnz	r0, 8008822 <__d2b+0x22>
 8008814:	4602      	mov	r2, r0
 8008816:	f240 310f 	movw	r1, #783	@ 0x30f
 800881a:	4b23      	ldr	r3, [pc, #140]	@ (80088a8 <__d2b+0xa8>)
 800881c:	4823      	ldr	r0, [pc, #140]	@ (80088ac <__d2b+0xac>)
 800881e:	f001 f8ff 	bl	8009a20 <__assert_func>
 8008822:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008826:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800882a:	b10d      	cbz	r5, 8008830 <__d2b+0x30>
 800882c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	f1b8 0300 	subs.w	r3, r8, #0
 8008836:	d024      	beq.n	8008882 <__d2b+0x82>
 8008838:	4668      	mov	r0, sp
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	f7ff fd17 	bl	800826e <__lo0bits>
 8008840:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008844:	b1d8      	cbz	r0, 800887e <__d2b+0x7e>
 8008846:	f1c0 0320 	rsb	r3, r0, #32
 800884a:	fa02 f303 	lsl.w	r3, r2, r3
 800884e:	430b      	orrs	r3, r1
 8008850:	40c2      	lsrs	r2, r0
 8008852:	6163      	str	r3, [r4, #20]
 8008854:	9201      	str	r2, [sp, #4]
 8008856:	9b01      	ldr	r3, [sp, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	bf0c      	ite	eq
 800885c:	2201      	moveq	r2, #1
 800885e:	2202      	movne	r2, #2
 8008860:	61a3      	str	r3, [r4, #24]
 8008862:	6122      	str	r2, [r4, #16]
 8008864:	b1ad      	cbz	r5, 8008892 <__d2b+0x92>
 8008866:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800886a:	4405      	add	r5, r0
 800886c:	6035      	str	r5, [r6, #0]
 800886e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008874:	6018      	str	r0, [r3, #0]
 8008876:	4620      	mov	r0, r4
 8008878:	b002      	add	sp, #8
 800887a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800887e:	6161      	str	r1, [r4, #20]
 8008880:	e7e9      	b.n	8008856 <__d2b+0x56>
 8008882:	a801      	add	r0, sp, #4
 8008884:	f7ff fcf3 	bl	800826e <__lo0bits>
 8008888:	9b01      	ldr	r3, [sp, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	6163      	str	r3, [r4, #20]
 800888e:	3020      	adds	r0, #32
 8008890:	e7e7      	b.n	8008862 <__d2b+0x62>
 8008892:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008896:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800889a:	6030      	str	r0, [r6, #0]
 800889c:	6918      	ldr	r0, [r3, #16]
 800889e:	f7ff fcc7 	bl	8008230 <__hi0bits>
 80088a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088a6:	e7e4      	b.n	8008872 <__d2b+0x72>
 80088a8:	0800b8c4 	.word	0x0800b8c4
 80088ac:	0800b8d5 	.word	0x0800b8d5

080088b0 <__ratio>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	b085      	sub	sp, #20
 80088b6:	e9cd 1000 	strd	r1, r0, [sp]
 80088ba:	a902      	add	r1, sp, #8
 80088bc:	f7ff ff58 	bl	8008770 <__b2d>
 80088c0:	468b      	mov	fp, r1
 80088c2:	4606      	mov	r6, r0
 80088c4:	460f      	mov	r7, r1
 80088c6:	9800      	ldr	r0, [sp, #0]
 80088c8:	a903      	add	r1, sp, #12
 80088ca:	f7ff ff51 	bl	8008770 <__b2d>
 80088ce:	460d      	mov	r5, r1
 80088d0:	9b01      	ldr	r3, [sp, #4]
 80088d2:	4689      	mov	r9, r1
 80088d4:	6919      	ldr	r1, [r3, #16]
 80088d6:	9b00      	ldr	r3, [sp, #0]
 80088d8:	4604      	mov	r4, r0
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	4630      	mov	r0, r6
 80088de:	1ac9      	subs	r1, r1, r3
 80088e0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80088e4:	1a9b      	subs	r3, r3, r2
 80088e6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bfcd      	iteet	gt
 80088ee:	463a      	movgt	r2, r7
 80088f0:	462a      	movle	r2, r5
 80088f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80088f6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80088fa:	bfd8      	it	le
 80088fc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008900:	464b      	mov	r3, r9
 8008902:	4622      	mov	r2, r4
 8008904:	4659      	mov	r1, fp
 8008906:	f7f7 ff11 	bl	800072c <__aeabi_ddiv>
 800890a:	b005      	add	sp, #20
 800890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008910 <__copybits>:
 8008910:	3901      	subs	r1, #1
 8008912:	b570      	push	{r4, r5, r6, lr}
 8008914:	1149      	asrs	r1, r1, #5
 8008916:	6914      	ldr	r4, [r2, #16]
 8008918:	3101      	adds	r1, #1
 800891a:	f102 0314 	add.w	r3, r2, #20
 800891e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008922:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008926:	1f05      	subs	r5, r0, #4
 8008928:	42a3      	cmp	r3, r4
 800892a:	d30c      	bcc.n	8008946 <__copybits+0x36>
 800892c:	1aa3      	subs	r3, r4, r2
 800892e:	3b11      	subs	r3, #17
 8008930:	f023 0303 	bic.w	r3, r3, #3
 8008934:	3211      	adds	r2, #17
 8008936:	42a2      	cmp	r2, r4
 8008938:	bf88      	it	hi
 800893a:	2300      	movhi	r3, #0
 800893c:	4418      	add	r0, r3
 800893e:	2300      	movs	r3, #0
 8008940:	4288      	cmp	r0, r1
 8008942:	d305      	bcc.n	8008950 <__copybits+0x40>
 8008944:	bd70      	pop	{r4, r5, r6, pc}
 8008946:	f853 6b04 	ldr.w	r6, [r3], #4
 800894a:	f845 6f04 	str.w	r6, [r5, #4]!
 800894e:	e7eb      	b.n	8008928 <__copybits+0x18>
 8008950:	f840 3b04 	str.w	r3, [r0], #4
 8008954:	e7f4      	b.n	8008940 <__copybits+0x30>

08008956 <__any_on>:
 8008956:	f100 0214 	add.w	r2, r0, #20
 800895a:	6900      	ldr	r0, [r0, #16]
 800895c:	114b      	asrs	r3, r1, #5
 800895e:	4298      	cmp	r0, r3
 8008960:	b510      	push	{r4, lr}
 8008962:	db11      	blt.n	8008988 <__any_on+0x32>
 8008964:	dd0a      	ble.n	800897c <__any_on+0x26>
 8008966:	f011 011f 	ands.w	r1, r1, #31
 800896a:	d007      	beq.n	800897c <__any_on+0x26>
 800896c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008970:	fa24 f001 	lsr.w	r0, r4, r1
 8008974:	fa00 f101 	lsl.w	r1, r0, r1
 8008978:	428c      	cmp	r4, r1
 800897a:	d10b      	bne.n	8008994 <__any_on+0x3e>
 800897c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008980:	4293      	cmp	r3, r2
 8008982:	d803      	bhi.n	800898c <__any_on+0x36>
 8008984:	2000      	movs	r0, #0
 8008986:	bd10      	pop	{r4, pc}
 8008988:	4603      	mov	r3, r0
 800898a:	e7f7      	b.n	800897c <__any_on+0x26>
 800898c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008990:	2900      	cmp	r1, #0
 8008992:	d0f5      	beq.n	8008980 <__any_on+0x2a>
 8008994:	2001      	movs	r0, #1
 8008996:	e7f6      	b.n	8008986 <__any_on+0x30>

08008998 <sulp>:
 8008998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899c:	460f      	mov	r7, r1
 800899e:	4690      	mov	r8, r2
 80089a0:	f7ff fec6 	bl	8008730 <__ulp>
 80089a4:	4604      	mov	r4, r0
 80089a6:	460d      	mov	r5, r1
 80089a8:	f1b8 0f00 	cmp.w	r8, #0
 80089ac:	d011      	beq.n	80089d2 <sulp+0x3a>
 80089ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80089b2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dd0b      	ble.n	80089d2 <sulp+0x3a>
 80089ba:	2400      	movs	r4, #0
 80089bc:	051b      	lsls	r3, r3, #20
 80089be:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80089c2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80089c6:	4622      	mov	r2, r4
 80089c8:	462b      	mov	r3, r5
 80089ca:	f7f7 fd85 	bl	80004d8 <__aeabi_dmul>
 80089ce:	4604      	mov	r4, r0
 80089d0:	460d      	mov	r5, r1
 80089d2:	4620      	mov	r0, r4
 80089d4:	4629      	mov	r1, r5
 80089d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089da:	0000      	movs	r0, r0
 80089dc:	0000      	movs	r0, r0
	...

080089e0 <_strtod_l>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	b09f      	sub	sp, #124	@ 0x7c
 80089e6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80089e8:	2200      	movs	r2, #0
 80089ea:	460c      	mov	r4, r1
 80089ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80089ee:	f04f 0a00 	mov.w	sl, #0
 80089f2:	f04f 0b00 	mov.w	fp, #0
 80089f6:	460a      	mov	r2, r1
 80089f8:	9005      	str	r0, [sp, #20]
 80089fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80089fc:	7811      	ldrb	r1, [r2, #0]
 80089fe:	292b      	cmp	r1, #43	@ 0x2b
 8008a00:	d048      	beq.n	8008a94 <_strtod_l+0xb4>
 8008a02:	d836      	bhi.n	8008a72 <_strtod_l+0x92>
 8008a04:	290d      	cmp	r1, #13
 8008a06:	d830      	bhi.n	8008a6a <_strtod_l+0x8a>
 8008a08:	2908      	cmp	r1, #8
 8008a0a:	d830      	bhi.n	8008a6e <_strtod_l+0x8e>
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	d039      	beq.n	8008a84 <_strtod_l+0xa4>
 8008a10:	2200      	movs	r2, #0
 8008a12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008a14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008a16:	782a      	ldrb	r2, [r5, #0]
 8008a18:	2a30      	cmp	r2, #48	@ 0x30
 8008a1a:	f040 80b1 	bne.w	8008b80 <_strtod_l+0x1a0>
 8008a1e:	786a      	ldrb	r2, [r5, #1]
 8008a20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a24:	2a58      	cmp	r2, #88	@ 0x58
 8008a26:	d16c      	bne.n	8008b02 <_strtod_l+0x122>
 8008a28:	9302      	str	r3, [sp, #8]
 8008a2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a2c:	4a8e      	ldr	r2, [pc, #568]	@ (8008c68 <_strtod_l+0x288>)
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	ab1a      	add	r3, sp, #104	@ 0x68
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	9805      	ldr	r0, [sp, #20]
 8008a36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008a38:	a919      	add	r1, sp, #100	@ 0x64
 8008a3a:	f001 f88b 	bl	8009b54 <__gethex>
 8008a3e:	f010 060f 	ands.w	r6, r0, #15
 8008a42:	4604      	mov	r4, r0
 8008a44:	d005      	beq.n	8008a52 <_strtod_l+0x72>
 8008a46:	2e06      	cmp	r6, #6
 8008a48:	d126      	bne.n	8008a98 <_strtod_l+0xb8>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008a50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f040 8584 	bne.w	8009562 <_strtod_l+0xb82>
 8008a5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a5c:	b1bb      	cbz	r3, 8008a8e <_strtod_l+0xae>
 8008a5e:	4650      	mov	r0, sl
 8008a60:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008a64:	b01f      	add	sp, #124	@ 0x7c
 8008a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6a:	2920      	cmp	r1, #32
 8008a6c:	d1d0      	bne.n	8008a10 <_strtod_l+0x30>
 8008a6e:	3201      	adds	r2, #1
 8008a70:	e7c3      	b.n	80089fa <_strtod_l+0x1a>
 8008a72:	292d      	cmp	r1, #45	@ 0x2d
 8008a74:	d1cc      	bne.n	8008a10 <_strtod_l+0x30>
 8008a76:	2101      	movs	r1, #1
 8008a78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008a7a:	1c51      	adds	r1, r2, #1
 8008a7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a7e:	7852      	ldrb	r2, [r2, #1]
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	d1c7      	bne.n	8008a14 <_strtod_l+0x34>
 8008a84:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a86:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f040 8568 	bne.w	800955e <_strtod_l+0xb7e>
 8008a8e:	4650      	mov	r0, sl
 8008a90:	4659      	mov	r1, fp
 8008a92:	e7e7      	b.n	8008a64 <_strtod_l+0x84>
 8008a94:	2100      	movs	r1, #0
 8008a96:	e7ef      	b.n	8008a78 <_strtod_l+0x98>
 8008a98:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a9a:	b13a      	cbz	r2, 8008aac <_strtod_l+0xcc>
 8008a9c:	2135      	movs	r1, #53	@ 0x35
 8008a9e:	a81c      	add	r0, sp, #112	@ 0x70
 8008aa0:	f7ff ff36 	bl	8008910 <__copybits>
 8008aa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008aa6:	9805      	ldr	r0, [sp, #20]
 8008aa8:	f7ff fb10 	bl	80080cc <_Bfree>
 8008aac:	3e01      	subs	r6, #1
 8008aae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008ab0:	2e04      	cmp	r6, #4
 8008ab2:	d806      	bhi.n	8008ac2 <_strtod_l+0xe2>
 8008ab4:	e8df f006 	tbb	[pc, r6]
 8008ab8:	201d0314 	.word	0x201d0314
 8008abc:	14          	.byte	0x14
 8008abd:	00          	.byte	0x00
 8008abe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008ac2:	05e1      	lsls	r1, r4, #23
 8008ac4:	bf48      	it	mi
 8008ac6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008aca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ace:	0d1b      	lsrs	r3, r3, #20
 8008ad0:	051b      	lsls	r3, r3, #20
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1bd      	bne.n	8008a52 <_strtod_l+0x72>
 8008ad6:	f7fe fb15 	bl	8007104 <__errno>
 8008ada:	2322      	movs	r3, #34	@ 0x22
 8008adc:	6003      	str	r3, [r0, #0]
 8008ade:	e7b8      	b.n	8008a52 <_strtod_l+0x72>
 8008ae0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008ae4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008ae8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008aec:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008af0:	e7e7      	b.n	8008ac2 <_strtod_l+0xe2>
 8008af2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008c6c <_strtod_l+0x28c>
 8008af6:	e7e4      	b.n	8008ac2 <_strtod_l+0xe2>
 8008af8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008afc:	f04f 3aff 	mov.w	sl, #4294967295
 8008b00:	e7df      	b.n	8008ac2 <_strtod_l+0xe2>
 8008b02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	2b30      	cmp	r3, #48	@ 0x30
 8008b0c:	d0f9      	beq.n	8008b02 <_strtod_l+0x122>
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d09f      	beq.n	8008a52 <_strtod_l+0x72>
 8008b12:	2301      	movs	r3, #1
 8008b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b18:	220a      	movs	r2, #10
 8008b1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	461f      	mov	r7, r3
 8008b20:	9308      	str	r3, [sp, #32]
 8008b22:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b24:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008b26:	7805      	ldrb	r5, [r0, #0]
 8008b28:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008b2c:	b2d9      	uxtb	r1, r3
 8008b2e:	2909      	cmp	r1, #9
 8008b30:	d928      	bls.n	8008b84 <_strtod_l+0x1a4>
 8008b32:	2201      	movs	r2, #1
 8008b34:	494e      	ldr	r1, [pc, #312]	@ (8008c70 <_strtod_l+0x290>)
 8008b36:	f000 ff4b 	bl	80099d0 <strncmp>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d032      	beq.n	8008ba4 <_strtod_l+0x1c4>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	462a      	mov	r2, r5
 8008b42:	4681      	mov	r9, r0
 8008b44:	463d      	mov	r5, r7
 8008b46:	4603      	mov	r3, r0
 8008b48:	2a65      	cmp	r2, #101	@ 0x65
 8008b4a:	d001      	beq.n	8008b50 <_strtod_l+0x170>
 8008b4c:	2a45      	cmp	r2, #69	@ 0x45
 8008b4e:	d114      	bne.n	8008b7a <_strtod_l+0x19a>
 8008b50:	b91d      	cbnz	r5, 8008b5a <_strtod_l+0x17a>
 8008b52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b54:	4302      	orrs	r2, r0
 8008b56:	d095      	beq.n	8008a84 <_strtod_l+0xa4>
 8008b58:	2500      	movs	r5, #0
 8008b5a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008b5c:	1c62      	adds	r2, r4, #1
 8008b5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b60:	7862      	ldrb	r2, [r4, #1]
 8008b62:	2a2b      	cmp	r2, #43	@ 0x2b
 8008b64:	d077      	beq.n	8008c56 <_strtod_l+0x276>
 8008b66:	2a2d      	cmp	r2, #45	@ 0x2d
 8008b68:	d07b      	beq.n	8008c62 <_strtod_l+0x282>
 8008b6a:	f04f 0c00 	mov.w	ip, #0
 8008b6e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008b72:	2909      	cmp	r1, #9
 8008b74:	f240 8082 	bls.w	8008c7c <_strtod_l+0x29c>
 8008b78:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b7a:	f04f 0800 	mov.w	r8, #0
 8008b7e:	e0a2      	b.n	8008cc6 <_strtod_l+0x2e6>
 8008b80:	2300      	movs	r3, #0
 8008b82:	e7c7      	b.n	8008b14 <_strtod_l+0x134>
 8008b84:	2f08      	cmp	r7, #8
 8008b86:	bfd5      	itete	le
 8008b88:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008b8a:	9908      	ldrgt	r1, [sp, #32]
 8008b8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b90:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008b94:	f100 0001 	add.w	r0, r0, #1
 8008b98:	bfd4      	ite	le
 8008b9a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008b9c:	9308      	strgt	r3, [sp, #32]
 8008b9e:	3701      	adds	r7, #1
 8008ba0:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ba2:	e7bf      	b.n	8008b24 <_strtod_l+0x144>
 8008ba4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008baa:	785a      	ldrb	r2, [r3, #1]
 8008bac:	b37f      	cbz	r7, 8008c0e <_strtod_l+0x22e>
 8008bae:	4681      	mov	r9, r0
 8008bb0:	463d      	mov	r5, r7
 8008bb2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008bb6:	2b09      	cmp	r3, #9
 8008bb8:	d912      	bls.n	8008be0 <_strtod_l+0x200>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e7c4      	b.n	8008b48 <_strtod_l+0x168>
 8008bbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	1c5a      	adds	r2, r3, #1
 8008bc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bc6:	785a      	ldrb	r2, [r3, #1]
 8008bc8:	2a30      	cmp	r2, #48	@ 0x30
 8008bca:	d0f8      	beq.n	8008bbe <_strtod_l+0x1de>
 8008bcc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	f200 84cb 	bhi.w	800956c <_strtod_l+0xb8c>
 8008bd6:	4681      	mov	r9, r0
 8008bd8:	2000      	movs	r0, #0
 8008bda:	4605      	mov	r5, r0
 8008bdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bde:	930c      	str	r3, [sp, #48]	@ 0x30
 8008be0:	3a30      	subs	r2, #48	@ 0x30
 8008be2:	f100 0301 	add.w	r3, r0, #1
 8008be6:	d02a      	beq.n	8008c3e <_strtod_l+0x25e>
 8008be8:	4499      	add	r9, r3
 8008bea:	210a      	movs	r1, #10
 8008bec:	462b      	mov	r3, r5
 8008bee:	eb00 0c05 	add.w	ip, r0, r5
 8008bf2:	4563      	cmp	r3, ip
 8008bf4:	d10d      	bne.n	8008c12 <_strtod_l+0x232>
 8008bf6:	1c69      	adds	r1, r5, #1
 8008bf8:	4401      	add	r1, r0
 8008bfa:	4428      	add	r0, r5
 8008bfc:	2808      	cmp	r0, #8
 8008bfe:	dc16      	bgt.n	8008c2e <_strtod_l+0x24e>
 8008c00:	230a      	movs	r3, #10
 8008c02:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c04:	fb03 2300 	mla	r3, r3, r0, r2
 8008c08:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	e018      	b.n	8008c40 <_strtod_l+0x260>
 8008c0e:	4638      	mov	r0, r7
 8008c10:	e7da      	b.n	8008bc8 <_strtod_l+0x1e8>
 8008c12:	2b08      	cmp	r3, #8
 8008c14:	f103 0301 	add.w	r3, r3, #1
 8008c18:	dc03      	bgt.n	8008c22 <_strtod_l+0x242>
 8008c1a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008c1c:	434e      	muls	r6, r1
 8008c1e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008c20:	e7e7      	b.n	8008bf2 <_strtod_l+0x212>
 8008c22:	2b10      	cmp	r3, #16
 8008c24:	bfde      	ittt	le
 8008c26:	9e08      	ldrle	r6, [sp, #32]
 8008c28:	434e      	mulle	r6, r1
 8008c2a:	9608      	strle	r6, [sp, #32]
 8008c2c:	e7e1      	b.n	8008bf2 <_strtod_l+0x212>
 8008c2e:	280f      	cmp	r0, #15
 8008c30:	dceb      	bgt.n	8008c0a <_strtod_l+0x22a>
 8008c32:	230a      	movs	r3, #10
 8008c34:	9808      	ldr	r0, [sp, #32]
 8008c36:	fb03 2300 	mla	r3, r3, r0, r2
 8008c3a:	9308      	str	r3, [sp, #32]
 8008c3c:	e7e5      	b.n	8008c0a <_strtod_l+0x22a>
 8008c3e:	4629      	mov	r1, r5
 8008c40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c42:	460d      	mov	r5, r1
 8008c44:	1c50      	adds	r0, r2, #1
 8008c46:	9019      	str	r0, [sp, #100]	@ 0x64
 8008c48:	7852      	ldrb	r2, [r2, #1]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	e7b1      	b.n	8008bb2 <_strtod_l+0x1d2>
 8008c4e:	f04f 0900 	mov.w	r9, #0
 8008c52:	2301      	movs	r3, #1
 8008c54:	e77d      	b.n	8008b52 <_strtod_l+0x172>
 8008c56:	f04f 0c00 	mov.w	ip, #0
 8008c5a:	1ca2      	adds	r2, r4, #2
 8008c5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c5e:	78a2      	ldrb	r2, [r4, #2]
 8008c60:	e785      	b.n	8008b6e <_strtod_l+0x18e>
 8008c62:	f04f 0c01 	mov.w	ip, #1
 8008c66:	e7f8      	b.n	8008c5a <_strtod_l+0x27a>
 8008c68:	0800ba48 	.word	0x0800ba48
 8008c6c:	7ff00000 	.word	0x7ff00000
 8008c70:	0800ba30 	.word	0x0800ba30
 8008c74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c76:	1c51      	adds	r1, r2, #1
 8008c78:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c7a:	7852      	ldrb	r2, [r2, #1]
 8008c7c:	2a30      	cmp	r2, #48	@ 0x30
 8008c7e:	d0f9      	beq.n	8008c74 <_strtod_l+0x294>
 8008c80:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008c84:	2908      	cmp	r1, #8
 8008c86:	f63f af78 	bhi.w	8008b7a <_strtod_l+0x19a>
 8008c8a:	f04f 080a 	mov.w	r8, #10
 8008c8e:	3a30      	subs	r2, #48	@ 0x30
 8008c90:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008c96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c98:	1c56      	adds	r6, r2, #1
 8008c9a:	9619      	str	r6, [sp, #100]	@ 0x64
 8008c9c:	7852      	ldrb	r2, [r2, #1]
 8008c9e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008ca2:	f1be 0f09 	cmp.w	lr, #9
 8008ca6:	d939      	bls.n	8008d1c <_strtod_l+0x33c>
 8008ca8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008caa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008cae:	1a76      	subs	r6, r6, r1
 8008cb0:	2e08      	cmp	r6, #8
 8008cb2:	dc03      	bgt.n	8008cbc <_strtod_l+0x2dc>
 8008cb4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008cb6:	4588      	cmp	r8, r1
 8008cb8:	bfa8      	it	ge
 8008cba:	4688      	movge	r8, r1
 8008cbc:	f1bc 0f00 	cmp.w	ip, #0
 8008cc0:	d001      	beq.n	8008cc6 <_strtod_l+0x2e6>
 8008cc2:	f1c8 0800 	rsb	r8, r8, #0
 8008cc6:	2d00      	cmp	r5, #0
 8008cc8:	d14e      	bne.n	8008d68 <_strtod_l+0x388>
 8008cca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ccc:	4308      	orrs	r0, r1
 8008cce:	f47f aec0 	bne.w	8008a52 <_strtod_l+0x72>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f47f aed6 	bne.w	8008a84 <_strtod_l+0xa4>
 8008cd8:	2a69      	cmp	r2, #105	@ 0x69
 8008cda:	d028      	beq.n	8008d2e <_strtod_l+0x34e>
 8008cdc:	dc25      	bgt.n	8008d2a <_strtod_l+0x34a>
 8008cde:	2a49      	cmp	r2, #73	@ 0x49
 8008ce0:	d025      	beq.n	8008d2e <_strtod_l+0x34e>
 8008ce2:	2a4e      	cmp	r2, #78	@ 0x4e
 8008ce4:	f47f aece 	bne.w	8008a84 <_strtod_l+0xa4>
 8008ce8:	499a      	ldr	r1, [pc, #616]	@ (8008f54 <_strtod_l+0x574>)
 8008cea:	a819      	add	r0, sp, #100	@ 0x64
 8008cec:	f001 f954 	bl	8009f98 <__match>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	f43f aec7 	beq.w	8008a84 <_strtod_l+0xa4>
 8008cf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b28      	cmp	r3, #40	@ 0x28
 8008cfc:	d12e      	bne.n	8008d5c <_strtod_l+0x37c>
 8008cfe:	4996      	ldr	r1, [pc, #600]	@ (8008f58 <_strtod_l+0x578>)
 8008d00:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d02:	a819      	add	r0, sp, #100	@ 0x64
 8008d04:	f001 f95c 	bl	8009fc0 <__hexnan>
 8008d08:	2805      	cmp	r0, #5
 8008d0a:	d127      	bne.n	8008d5c <_strtod_l+0x37c>
 8008d0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d0e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008d12:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008d16:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008d1a:	e69a      	b.n	8008a52 <_strtod_l+0x72>
 8008d1c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008d1e:	fb08 2101 	mla	r1, r8, r1, r2
 8008d22:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008d26:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d28:	e7b5      	b.n	8008c96 <_strtod_l+0x2b6>
 8008d2a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008d2c:	e7da      	b.n	8008ce4 <_strtod_l+0x304>
 8008d2e:	498b      	ldr	r1, [pc, #556]	@ (8008f5c <_strtod_l+0x57c>)
 8008d30:	a819      	add	r0, sp, #100	@ 0x64
 8008d32:	f001 f931 	bl	8009f98 <__match>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f43f aea4 	beq.w	8008a84 <_strtod_l+0xa4>
 8008d3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d3e:	4988      	ldr	r1, [pc, #544]	@ (8008f60 <_strtod_l+0x580>)
 8008d40:	3b01      	subs	r3, #1
 8008d42:	a819      	add	r0, sp, #100	@ 0x64
 8008d44:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d46:	f001 f927 	bl	8009f98 <__match>
 8008d4a:	b910      	cbnz	r0, 8008d52 <_strtod_l+0x372>
 8008d4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d4e:	3301      	adds	r3, #1
 8008d50:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d52:	f04f 0a00 	mov.w	sl, #0
 8008d56:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008f64 <_strtod_l+0x584>
 8008d5a:	e67a      	b.n	8008a52 <_strtod_l+0x72>
 8008d5c:	4882      	ldr	r0, [pc, #520]	@ (8008f68 <_strtod_l+0x588>)
 8008d5e:	f000 fe59 	bl	8009a14 <nan>
 8008d62:	4682      	mov	sl, r0
 8008d64:	468b      	mov	fp, r1
 8008d66:	e674      	b.n	8008a52 <_strtod_l+0x72>
 8008d68:	eba8 0309 	sub.w	r3, r8, r9
 8008d6c:	2f00      	cmp	r7, #0
 8008d6e:	bf08      	it	eq
 8008d70:	462f      	moveq	r7, r5
 8008d72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d74:	2d10      	cmp	r5, #16
 8008d76:	462c      	mov	r4, r5
 8008d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d7a:	bfa8      	it	ge
 8008d7c:	2410      	movge	r4, #16
 8008d7e:	f7f7 fb31 	bl	80003e4 <__aeabi_ui2d>
 8008d82:	2d09      	cmp	r5, #9
 8008d84:	4682      	mov	sl, r0
 8008d86:	468b      	mov	fp, r1
 8008d88:	dc11      	bgt.n	8008dae <_strtod_l+0x3ce>
 8008d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f43f ae60 	beq.w	8008a52 <_strtod_l+0x72>
 8008d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d94:	dd76      	ble.n	8008e84 <_strtod_l+0x4a4>
 8008d96:	2b16      	cmp	r3, #22
 8008d98:	dc5d      	bgt.n	8008e56 <_strtod_l+0x476>
 8008d9a:	4974      	ldr	r1, [pc, #464]	@ (8008f6c <_strtod_l+0x58c>)
 8008d9c:	4652      	mov	r2, sl
 8008d9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008da2:	465b      	mov	r3, fp
 8008da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008da8:	f7f7 fb96 	bl	80004d8 <__aeabi_dmul>
 8008dac:	e7d9      	b.n	8008d62 <_strtod_l+0x382>
 8008dae:	4b6f      	ldr	r3, [pc, #444]	@ (8008f6c <_strtod_l+0x58c>)
 8008db0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008db4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008db8:	f7f7 fb8e 	bl	80004d8 <__aeabi_dmul>
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	9808      	ldr	r0, [sp, #32]
 8008dc0:	468b      	mov	fp, r1
 8008dc2:	f7f7 fb0f 	bl	80003e4 <__aeabi_ui2d>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4650      	mov	r0, sl
 8008dcc:	4659      	mov	r1, fp
 8008dce:	f7f7 f9cd 	bl	800016c <__adddf3>
 8008dd2:	2d0f      	cmp	r5, #15
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	468b      	mov	fp, r1
 8008dd8:	ddd7      	ble.n	8008d8a <_strtod_l+0x3aa>
 8008dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ddc:	1b2c      	subs	r4, r5, r4
 8008dde:	441c      	add	r4, r3
 8008de0:	2c00      	cmp	r4, #0
 8008de2:	f340 8096 	ble.w	8008f12 <_strtod_l+0x532>
 8008de6:	f014 030f 	ands.w	r3, r4, #15
 8008dea:	d00a      	beq.n	8008e02 <_strtod_l+0x422>
 8008dec:	495f      	ldr	r1, [pc, #380]	@ (8008f6c <_strtod_l+0x58c>)
 8008dee:	4652      	mov	r2, sl
 8008df0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df8:	465b      	mov	r3, fp
 8008dfa:	f7f7 fb6d 	bl	80004d8 <__aeabi_dmul>
 8008dfe:	4682      	mov	sl, r0
 8008e00:	468b      	mov	fp, r1
 8008e02:	f034 040f 	bics.w	r4, r4, #15
 8008e06:	d073      	beq.n	8008ef0 <_strtod_l+0x510>
 8008e08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008e0c:	dd48      	ble.n	8008ea0 <_strtod_l+0x4c0>
 8008e0e:	2400      	movs	r4, #0
 8008e10:	46a0      	mov	r8, r4
 8008e12:	46a1      	mov	r9, r4
 8008e14:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e16:	2322      	movs	r3, #34	@ 0x22
 8008e18:	f04f 0a00 	mov.w	sl, #0
 8008e1c:	9a05      	ldr	r2, [sp, #20]
 8008e1e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008f64 <_strtod_l+0x584>
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f43f ae13 	beq.w	8008a52 <_strtod_l+0x72>
 8008e2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e2e:	9805      	ldr	r0, [sp, #20]
 8008e30:	f7ff f94c 	bl	80080cc <_Bfree>
 8008e34:	4649      	mov	r1, r9
 8008e36:	9805      	ldr	r0, [sp, #20]
 8008e38:	f7ff f948 	bl	80080cc <_Bfree>
 8008e3c:	4641      	mov	r1, r8
 8008e3e:	9805      	ldr	r0, [sp, #20]
 8008e40:	f7ff f944 	bl	80080cc <_Bfree>
 8008e44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e46:	9805      	ldr	r0, [sp, #20]
 8008e48:	f7ff f940 	bl	80080cc <_Bfree>
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	9805      	ldr	r0, [sp, #20]
 8008e50:	f7ff f93c 	bl	80080cc <_Bfree>
 8008e54:	e5fd      	b.n	8008a52 <_strtod_l+0x72>
 8008e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	dbbc      	blt.n	8008dda <_strtod_l+0x3fa>
 8008e60:	4c42      	ldr	r4, [pc, #264]	@ (8008f6c <_strtod_l+0x58c>)
 8008e62:	f1c5 050f 	rsb	r5, r5, #15
 8008e66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e6a:	4652      	mov	r2, sl
 8008e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e70:	465b      	mov	r3, fp
 8008e72:	f7f7 fb31 	bl	80004d8 <__aeabi_dmul>
 8008e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e78:	1b5d      	subs	r5, r3, r5
 8008e7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e82:	e791      	b.n	8008da8 <_strtod_l+0x3c8>
 8008e84:	3316      	adds	r3, #22
 8008e86:	dba8      	blt.n	8008dda <_strtod_l+0x3fa>
 8008e88:	4b38      	ldr	r3, [pc, #224]	@ (8008f6c <_strtod_l+0x58c>)
 8008e8a:	eba9 0808 	sub.w	r8, r9, r8
 8008e8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008e92:	4650      	mov	r0, sl
 8008e94:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008e98:	4659      	mov	r1, fp
 8008e9a:	f7f7 fc47 	bl	800072c <__aeabi_ddiv>
 8008e9e:	e760      	b.n	8008d62 <_strtod_l+0x382>
 8008ea0:	4b33      	ldr	r3, [pc, #204]	@ (8008f70 <_strtod_l+0x590>)
 8008ea2:	4650      	mov	r0, sl
 8008ea4:	9308      	str	r3, [sp, #32]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	4659      	mov	r1, fp
 8008eaa:	461e      	mov	r6, r3
 8008eac:	1124      	asrs	r4, r4, #4
 8008eae:	2c01      	cmp	r4, #1
 8008eb0:	dc21      	bgt.n	8008ef6 <_strtod_l+0x516>
 8008eb2:	b10b      	cbz	r3, 8008eb8 <_strtod_l+0x4d8>
 8008eb4:	4682      	mov	sl, r0
 8008eb6:	468b      	mov	fp, r1
 8008eb8:	492d      	ldr	r1, [pc, #180]	@ (8008f70 <_strtod_l+0x590>)
 8008eba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008ebe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008ec2:	4652      	mov	r2, sl
 8008ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec8:	465b      	mov	r3, fp
 8008eca:	f7f7 fb05 	bl	80004d8 <__aeabi_dmul>
 8008ece:	4b25      	ldr	r3, [pc, #148]	@ (8008f64 <_strtod_l+0x584>)
 8008ed0:	460a      	mov	r2, r1
 8008ed2:	400b      	ands	r3, r1
 8008ed4:	4927      	ldr	r1, [pc, #156]	@ (8008f74 <_strtod_l+0x594>)
 8008ed6:	4682      	mov	sl, r0
 8008ed8:	428b      	cmp	r3, r1
 8008eda:	d898      	bhi.n	8008e0e <_strtod_l+0x42e>
 8008edc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008ee0:	428b      	cmp	r3, r1
 8008ee2:	bf86      	itte	hi
 8008ee4:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ee8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008f78 <_strtod_l+0x598>
 8008eec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9308      	str	r3, [sp, #32]
 8008ef4:	e07a      	b.n	8008fec <_strtod_l+0x60c>
 8008ef6:	07e2      	lsls	r2, r4, #31
 8008ef8:	d505      	bpl.n	8008f06 <_strtod_l+0x526>
 8008efa:	9b08      	ldr	r3, [sp, #32]
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	f7f7 faea 	bl	80004d8 <__aeabi_dmul>
 8008f04:	2301      	movs	r3, #1
 8008f06:	9a08      	ldr	r2, [sp, #32]
 8008f08:	3601      	adds	r6, #1
 8008f0a:	3208      	adds	r2, #8
 8008f0c:	1064      	asrs	r4, r4, #1
 8008f0e:	9208      	str	r2, [sp, #32]
 8008f10:	e7cd      	b.n	8008eae <_strtod_l+0x4ce>
 8008f12:	d0ed      	beq.n	8008ef0 <_strtod_l+0x510>
 8008f14:	4264      	negs	r4, r4
 8008f16:	f014 020f 	ands.w	r2, r4, #15
 8008f1a:	d00a      	beq.n	8008f32 <_strtod_l+0x552>
 8008f1c:	4b13      	ldr	r3, [pc, #76]	@ (8008f6c <_strtod_l+0x58c>)
 8008f1e:	4650      	mov	r0, sl
 8008f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f24:	4659      	mov	r1, fp
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	f7f7 fbff 	bl	800072c <__aeabi_ddiv>
 8008f2e:	4682      	mov	sl, r0
 8008f30:	468b      	mov	fp, r1
 8008f32:	1124      	asrs	r4, r4, #4
 8008f34:	d0dc      	beq.n	8008ef0 <_strtod_l+0x510>
 8008f36:	2c1f      	cmp	r4, #31
 8008f38:	dd20      	ble.n	8008f7c <_strtod_l+0x59c>
 8008f3a:	2400      	movs	r4, #0
 8008f3c:	46a0      	mov	r8, r4
 8008f3e:	46a1      	mov	r9, r4
 8008f40:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f42:	2322      	movs	r3, #34	@ 0x22
 8008f44:	9a05      	ldr	r2, [sp, #20]
 8008f46:	f04f 0a00 	mov.w	sl, #0
 8008f4a:	f04f 0b00 	mov.w	fp, #0
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	e768      	b.n	8008e24 <_strtod_l+0x444>
 8008f52:	bf00      	nop
 8008f54:	0800b81c 	.word	0x0800b81c
 8008f58:	0800ba34 	.word	0x0800ba34
 8008f5c:	0800b814 	.word	0x0800b814
 8008f60:	0800b84b 	.word	0x0800b84b
 8008f64:	7ff00000 	.word	0x7ff00000
 8008f68:	0800badc 	.word	0x0800badc
 8008f6c:	0800b968 	.word	0x0800b968
 8008f70:	0800b940 	.word	0x0800b940
 8008f74:	7ca00000 	.word	0x7ca00000
 8008f78:	7fefffff 	.word	0x7fefffff
 8008f7c:	f014 0310 	ands.w	r3, r4, #16
 8008f80:	bf18      	it	ne
 8008f82:	236a      	movne	r3, #106	@ 0x6a
 8008f84:	4650      	mov	r0, sl
 8008f86:	9308      	str	r3, [sp, #32]
 8008f88:	4659      	mov	r1, fp
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	4ea9      	ldr	r6, [pc, #676]	@ (8009234 <_strtod_l+0x854>)
 8008f8e:	07e2      	lsls	r2, r4, #31
 8008f90:	d504      	bpl.n	8008f9c <_strtod_l+0x5bc>
 8008f92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f96:	f7f7 fa9f 	bl	80004d8 <__aeabi_dmul>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	1064      	asrs	r4, r4, #1
 8008f9e:	f106 0608 	add.w	r6, r6, #8
 8008fa2:	d1f4      	bne.n	8008f8e <_strtod_l+0x5ae>
 8008fa4:	b10b      	cbz	r3, 8008faa <_strtod_l+0x5ca>
 8008fa6:	4682      	mov	sl, r0
 8008fa8:	468b      	mov	fp, r1
 8008faa:	9b08      	ldr	r3, [sp, #32]
 8008fac:	b1b3      	cbz	r3, 8008fdc <_strtod_l+0x5fc>
 8008fae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008fb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	4659      	mov	r1, fp
 8008fba:	dd0f      	ble.n	8008fdc <_strtod_l+0x5fc>
 8008fbc:	2b1f      	cmp	r3, #31
 8008fbe:	dd57      	ble.n	8009070 <_strtod_l+0x690>
 8008fc0:	2b34      	cmp	r3, #52	@ 0x34
 8008fc2:	bfd8      	it	le
 8008fc4:	f04f 33ff 	movle.w	r3, #4294967295
 8008fc8:	f04f 0a00 	mov.w	sl, #0
 8008fcc:	bfcf      	iteee	gt
 8008fce:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008fd2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008fd6:	4093      	lslle	r3, r2
 8008fd8:	ea03 0b01 	andle.w	fp, r3, r1
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2300      	movs	r3, #0
 8008fe0:	4650      	mov	r0, sl
 8008fe2:	4659      	mov	r1, fp
 8008fe4:	f7f7 fce0 	bl	80009a8 <__aeabi_dcmpeq>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d1a6      	bne.n	8008f3a <_strtod_l+0x55a>
 8008fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fee:	463a      	mov	r2, r7
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008ff4:	462b      	mov	r3, r5
 8008ff6:	9805      	ldr	r0, [sp, #20]
 8008ff8:	f7ff f8d0 	bl	800819c <__s2b>
 8008ffc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f43f af05 	beq.w	8008e0e <_strtod_l+0x42e>
 8009004:	2400      	movs	r4, #0
 8009006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009008:	eba9 0308 	sub.w	r3, r9, r8
 800900c:	2a00      	cmp	r2, #0
 800900e:	bfa8      	it	ge
 8009010:	2300      	movge	r3, #0
 8009012:	46a0      	mov	r8, r4
 8009014:	9312      	str	r3, [sp, #72]	@ 0x48
 8009016:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800901a:	9316      	str	r3, [sp, #88]	@ 0x58
 800901c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800901e:	9805      	ldr	r0, [sp, #20]
 8009020:	6859      	ldr	r1, [r3, #4]
 8009022:	f7ff f813 	bl	800804c <_Balloc>
 8009026:	4681      	mov	r9, r0
 8009028:	2800      	cmp	r0, #0
 800902a:	f43f aef4 	beq.w	8008e16 <_strtod_l+0x436>
 800902e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009030:	300c      	adds	r0, #12
 8009032:	691a      	ldr	r2, [r3, #16]
 8009034:	f103 010c 	add.w	r1, r3, #12
 8009038:	3202      	adds	r2, #2
 800903a:	0092      	lsls	r2, r2, #2
 800903c:	f7fe f8a5 	bl	800718a <memcpy>
 8009040:	ab1c      	add	r3, sp, #112	@ 0x70
 8009042:	9301      	str	r3, [sp, #4]
 8009044:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	4652      	mov	r2, sl
 800904a:	465b      	mov	r3, fp
 800904c:	9805      	ldr	r0, [sp, #20]
 800904e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009052:	f7ff fbd5 	bl	8008800 <__d2b>
 8009056:	901a      	str	r0, [sp, #104]	@ 0x68
 8009058:	2800      	cmp	r0, #0
 800905a:	f43f aedc 	beq.w	8008e16 <_strtod_l+0x436>
 800905e:	2101      	movs	r1, #1
 8009060:	9805      	ldr	r0, [sp, #20]
 8009062:	f7ff f931 	bl	80082c8 <__i2b>
 8009066:	4680      	mov	r8, r0
 8009068:	b948      	cbnz	r0, 800907e <_strtod_l+0x69e>
 800906a:	f04f 0800 	mov.w	r8, #0
 800906e:	e6d2      	b.n	8008e16 <_strtod_l+0x436>
 8009070:	f04f 32ff 	mov.w	r2, #4294967295
 8009074:	fa02 f303 	lsl.w	r3, r2, r3
 8009078:	ea03 0a0a 	and.w	sl, r3, sl
 800907c:	e7ae      	b.n	8008fdc <_strtod_l+0x5fc>
 800907e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009080:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009082:	2d00      	cmp	r5, #0
 8009084:	bfab      	itete	ge
 8009086:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009088:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800908a:	18ef      	addge	r7, r5, r3
 800908c:	1b5e      	sublt	r6, r3, r5
 800908e:	9b08      	ldr	r3, [sp, #32]
 8009090:	bfa8      	it	ge
 8009092:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009094:	eba5 0503 	sub.w	r5, r5, r3
 8009098:	4415      	add	r5, r2
 800909a:	4b67      	ldr	r3, [pc, #412]	@ (8009238 <_strtod_l+0x858>)
 800909c:	f105 35ff 	add.w	r5, r5, #4294967295
 80090a0:	bfb8      	it	lt
 80090a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80090a4:	429d      	cmp	r5, r3
 80090a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80090aa:	da50      	bge.n	800914e <_strtod_l+0x76e>
 80090ac:	1b5b      	subs	r3, r3, r5
 80090ae:	2b1f      	cmp	r3, #31
 80090b0:	f04f 0101 	mov.w	r1, #1
 80090b4:	eba2 0203 	sub.w	r2, r2, r3
 80090b8:	dc3d      	bgt.n	8009136 <_strtod_l+0x756>
 80090ba:	fa01 f303 	lsl.w	r3, r1, r3
 80090be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090c0:	2300      	movs	r3, #0
 80090c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80090c4:	18bd      	adds	r5, r7, r2
 80090c6:	9b08      	ldr	r3, [sp, #32]
 80090c8:	42af      	cmp	r7, r5
 80090ca:	4416      	add	r6, r2
 80090cc:	441e      	add	r6, r3
 80090ce:	463b      	mov	r3, r7
 80090d0:	bfa8      	it	ge
 80090d2:	462b      	movge	r3, r5
 80090d4:	42b3      	cmp	r3, r6
 80090d6:	bfa8      	it	ge
 80090d8:	4633      	movge	r3, r6
 80090da:	2b00      	cmp	r3, #0
 80090dc:	bfc2      	ittt	gt
 80090de:	1aed      	subgt	r5, r5, r3
 80090e0:	1af6      	subgt	r6, r6, r3
 80090e2:	1aff      	subgt	r7, r7, r3
 80090e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	dd16      	ble.n	8009118 <_strtod_l+0x738>
 80090ea:	4641      	mov	r1, r8
 80090ec:	461a      	mov	r2, r3
 80090ee:	9805      	ldr	r0, [sp, #20]
 80090f0:	f7ff f9a8 	bl	8008444 <__pow5mult>
 80090f4:	4680      	mov	r8, r0
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d0b7      	beq.n	800906a <_strtod_l+0x68a>
 80090fa:	4601      	mov	r1, r0
 80090fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80090fe:	9805      	ldr	r0, [sp, #20]
 8009100:	f7ff f8f8 	bl	80082f4 <__multiply>
 8009104:	900e      	str	r0, [sp, #56]	@ 0x38
 8009106:	2800      	cmp	r0, #0
 8009108:	f43f ae85 	beq.w	8008e16 <_strtod_l+0x436>
 800910c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800910e:	9805      	ldr	r0, [sp, #20]
 8009110:	f7fe ffdc 	bl	80080cc <_Bfree>
 8009114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009116:	931a      	str	r3, [sp, #104]	@ 0x68
 8009118:	2d00      	cmp	r5, #0
 800911a:	dc1d      	bgt.n	8009158 <_strtod_l+0x778>
 800911c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800911e:	2b00      	cmp	r3, #0
 8009120:	dd23      	ble.n	800916a <_strtod_l+0x78a>
 8009122:	4649      	mov	r1, r9
 8009124:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009126:	9805      	ldr	r0, [sp, #20]
 8009128:	f7ff f98c 	bl	8008444 <__pow5mult>
 800912c:	4681      	mov	r9, r0
 800912e:	b9e0      	cbnz	r0, 800916a <_strtod_l+0x78a>
 8009130:	f04f 0900 	mov.w	r9, #0
 8009134:	e66f      	b.n	8008e16 <_strtod_l+0x436>
 8009136:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800913a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800913e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009142:	35e2      	adds	r5, #226	@ 0xe2
 8009144:	fa01 f305 	lsl.w	r3, r1, r5
 8009148:	9310      	str	r3, [sp, #64]	@ 0x40
 800914a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800914c:	e7ba      	b.n	80090c4 <_strtod_l+0x6e4>
 800914e:	2300      	movs	r3, #0
 8009150:	9310      	str	r3, [sp, #64]	@ 0x40
 8009152:	2301      	movs	r3, #1
 8009154:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009156:	e7b5      	b.n	80090c4 <_strtod_l+0x6e4>
 8009158:	462a      	mov	r2, r5
 800915a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800915c:	9805      	ldr	r0, [sp, #20]
 800915e:	f7ff f9cb 	bl	80084f8 <__lshift>
 8009162:	901a      	str	r0, [sp, #104]	@ 0x68
 8009164:	2800      	cmp	r0, #0
 8009166:	d1d9      	bne.n	800911c <_strtod_l+0x73c>
 8009168:	e655      	b.n	8008e16 <_strtod_l+0x436>
 800916a:	2e00      	cmp	r6, #0
 800916c:	dd07      	ble.n	800917e <_strtod_l+0x79e>
 800916e:	4649      	mov	r1, r9
 8009170:	4632      	mov	r2, r6
 8009172:	9805      	ldr	r0, [sp, #20]
 8009174:	f7ff f9c0 	bl	80084f8 <__lshift>
 8009178:	4681      	mov	r9, r0
 800917a:	2800      	cmp	r0, #0
 800917c:	d0d8      	beq.n	8009130 <_strtod_l+0x750>
 800917e:	2f00      	cmp	r7, #0
 8009180:	dd08      	ble.n	8009194 <_strtod_l+0x7b4>
 8009182:	4641      	mov	r1, r8
 8009184:	463a      	mov	r2, r7
 8009186:	9805      	ldr	r0, [sp, #20]
 8009188:	f7ff f9b6 	bl	80084f8 <__lshift>
 800918c:	4680      	mov	r8, r0
 800918e:	2800      	cmp	r0, #0
 8009190:	f43f ae41 	beq.w	8008e16 <_strtod_l+0x436>
 8009194:	464a      	mov	r2, r9
 8009196:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009198:	9805      	ldr	r0, [sp, #20]
 800919a:	f7ff fa35 	bl	8008608 <__mdiff>
 800919e:	4604      	mov	r4, r0
 80091a0:	2800      	cmp	r0, #0
 80091a2:	f43f ae38 	beq.w	8008e16 <_strtod_l+0x436>
 80091a6:	68c3      	ldr	r3, [r0, #12]
 80091a8:	4641      	mov	r1, r8
 80091aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091ac:	2300      	movs	r3, #0
 80091ae:	60c3      	str	r3, [r0, #12]
 80091b0:	f7ff fa0e 	bl	80085d0 <__mcmp>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	da45      	bge.n	8009244 <_strtod_l+0x864>
 80091b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ba:	ea53 030a 	orrs.w	r3, r3, sl
 80091be:	d16b      	bne.n	8009298 <_strtod_l+0x8b8>
 80091c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d167      	bne.n	8009298 <_strtod_l+0x8b8>
 80091c8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091cc:	0d1b      	lsrs	r3, r3, #20
 80091ce:	051b      	lsls	r3, r3, #20
 80091d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80091d4:	d960      	bls.n	8009298 <_strtod_l+0x8b8>
 80091d6:	6963      	ldr	r3, [r4, #20]
 80091d8:	b913      	cbnz	r3, 80091e0 <_strtod_l+0x800>
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	dd5b      	ble.n	8009298 <_strtod_l+0x8b8>
 80091e0:	4621      	mov	r1, r4
 80091e2:	2201      	movs	r2, #1
 80091e4:	9805      	ldr	r0, [sp, #20]
 80091e6:	f7ff f987 	bl	80084f8 <__lshift>
 80091ea:	4641      	mov	r1, r8
 80091ec:	4604      	mov	r4, r0
 80091ee:	f7ff f9ef 	bl	80085d0 <__mcmp>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	dd50      	ble.n	8009298 <_strtod_l+0x8b8>
 80091f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091fa:	9a08      	ldr	r2, [sp, #32]
 80091fc:	0d1b      	lsrs	r3, r3, #20
 80091fe:	051b      	lsls	r3, r3, #20
 8009200:	2a00      	cmp	r2, #0
 8009202:	d06a      	beq.n	80092da <_strtod_l+0x8fa>
 8009204:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009208:	d867      	bhi.n	80092da <_strtod_l+0x8fa>
 800920a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800920e:	f67f ae98 	bls.w	8008f42 <_strtod_l+0x562>
 8009212:	4650      	mov	r0, sl
 8009214:	4659      	mov	r1, fp
 8009216:	4b09      	ldr	r3, [pc, #36]	@ (800923c <_strtod_l+0x85c>)
 8009218:	2200      	movs	r2, #0
 800921a:	f7f7 f95d 	bl	80004d8 <__aeabi_dmul>
 800921e:	4b08      	ldr	r3, [pc, #32]	@ (8009240 <_strtod_l+0x860>)
 8009220:	4682      	mov	sl, r0
 8009222:	400b      	ands	r3, r1
 8009224:	468b      	mov	fp, r1
 8009226:	2b00      	cmp	r3, #0
 8009228:	f47f ae00 	bne.w	8008e2c <_strtod_l+0x44c>
 800922c:	2322      	movs	r3, #34	@ 0x22
 800922e:	9a05      	ldr	r2, [sp, #20]
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	e5fb      	b.n	8008e2c <_strtod_l+0x44c>
 8009234:	0800ba60 	.word	0x0800ba60
 8009238:	fffffc02 	.word	0xfffffc02
 800923c:	39500000 	.word	0x39500000
 8009240:	7ff00000 	.word	0x7ff00000
 8009244:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009248:	d165      	bne.n	8009316 <_strtod_l+0x936>
 800924a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800924c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009250:	b35a      	cbz	r2, 80092aa <_strtod_l+0x8ca>
 8009252:	4a99      	ldr	r2, [pc, #612]	@ (80094b8 <_strtod_l+0xad8>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d12b      	bne.n	80092b0 <_strtod_l+0x8d0>
 8009258:	9b08      	ldr	r3, [sp, #32]
 800925a:	4651      	mov	r1, sl
 800925c:	b303      	cbz	r3, 80092a0 <_strtod_l+0x8c0>
 800925e:	465a      	mov	r2, fp
 8009260:	4b96      	ldr	r3, [pc, #600]	@ (80094bc <_strtod_l+0xadc>)
 8009262:	4013      	ands	r3, r2
 8009264:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009268:	f04f 32ff 	mov.w	r2, #4294967295
 800926c:	d81b      	bhi.n	80092a6 <_strtod_l+0x8c6>
 800926e:	0d1b      	lsrs	r3, r3, #20
 8009270:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009274:	fa02 f303 	lsl.w	r3, r2, r3
 8009278:	4299      	cmp	r1, r3
 800927a:	d119      	bne.n	80092b0 <_strtod_l+0x8d0>
 800927c:	4b90      	ldr	r3, [pc, #576]	@ (80094c0 <_strtod_l+0xae0>)
 800927e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009280:	429a      	cmp	r2, r3
 8009282:	d102      	bne.n	800928a <_strtod_l+0x8aa>
 8009284:	3101      	adds	r1, #1
 8009286:	f43f adc6 	beq.w	8008e16 <_strtod_l+0x436>
 800928a:	f04f 0a00 	mov.w	sl, #0
 800928e:	4b8b      	ldr	r3, [pc, #556]	@ (80094bc <_strtod_l+0xadc>)
 8009290:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009292:	401a      	ands	r2, r3
 8009294:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009298:	9b08      	ldr	r3, [sp, #32]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1b9      	bne.n	8009212 <_strtod_l+0x832>
 800929e:	e5c5      	b.n	8008e2c <_strtod_l+0x44c>
 80092a0:	f04f 33ff 	mov.w	r3, #4294967295
 80092a4:	e7e8      	b.n	8009278 <_strtod_l+0x898>
 80092a6:	4613      	mov	r3, r2
 80092a8:	e7e6      	b.n	8009278 <_strtod_l+0x898>
 80092aa:	ea53 030a 	orrs.w	r3, r3, sl
 80092ae:	d0a2      	beq.n	80091f6 <_strtod_l+0x816>
 80092b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092b2:	b1db      	cbz	r3, 80092ec <_strtod_l+0x90c>
 80092b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092b6:	4213      	tst	r3, r2
 80092b8:	d0ee      	beq.n	8009298 <_strtod_l+0x8b8>
 80092ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092bc:	4650      	mov	r0, sl
 80092be:	4659      	mov	r1, fp
 80092c0:	9a08      	ldr	r2, [sp, #32]
 80092c2:	b1bb      	cbz	r3, 80092f4 <_strtod_l+0x914>
 80092c4:	f7ff fb68 	bl	8008998 <sulp>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092d0:	f7f6 ff4c 	bl	800016c <__adddf3>
 80092d4:	4682      	mov	sl, r0
 80092d6:	468b      	mov	fp, r1
 80092d8:	e7de      	b.n	8009298 <_strtod_l+0x8b8>
 80092da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80092de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80092e2:	f04f 3aff 	mov.w	sl, #4294967295
 80092e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80092ea:	e7d5      	b.n	8009298 <_strtod_l+0x8b8>
 80092ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092ee:	ea13 0f0a 	tst.w	r3, sl
 80092f2:	e7e1      	b.n	80092b8 <_strtod_l+0x8d8>
 80092f4:	f7ff fb50 	bl	8008998 <sulp>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009300:	f7f6 ff32 	bl	8000168 <__aeabi_dsub>
 8009304:	2200      	movs	r2, #0
 8009306:	2300      	movs	r3, #0
 8009308:	4682      	mov	sl, r0
 800930a:	468b      	mov	fp, r1
 800930c:	f7f7 fb4c 	bl	80009a8 <__aeabi_dcmpeq>
 8009310:	2800      	cmp	r0, #0
 8009312:	d0c1      	beq.n	8009298 <_strtod_l+0x8b8>
 8009314:	e615      	b.n	8008f42 <_strtod_l+0x562>
 8009316:	4641      	mov	r1, r8
 8009318:	4620      	mov	r0, r4
 800931a:	f7ff fac9 	bl	80088b0 <__ratio>
 800931e:	2200      	movs	r2, #0
 8009320:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009324:	4606      	mov	r6, r0
 8009326:	460f      	mov	r7, r1
 8009328:	f7f7 fb52 	bl	80009d0 <__aeabi_dcmple>
 800932c:	2800      	cmp	r0, #0
 800932e:	d06d      	beq.n	800940c <_strtod_l+0xa2c>
 8009330:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d178      	bne.n	8009428 <_strtod_l+0xa48>
 8009336:	f1ba 0f00 	cmp.w	sl, #0
 800933a:	d156      	bne.n	80093ea <_strtod_l+0xa0a>
 800933c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800933e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009342:	2b00      	cmp	r3, #0
 8009344:	d158      	bne.n	80093f8 <_strtod_l+0xa18>
 8009346:	2200      	movs	r2, #0
 8009348:	4630      	mov	r0, r6
 800934a:	4639      	mov	r1, r7
 800934c:	4b5d      	ldr	r3, [pc, #372]	@ (80094c4 <_strtod_l+0xae4>)
 800934e:	f7f7 fb35 	bl	80009bc <__aeabi_dcmplt>
 8009352:	2800      	cmp	r0, #0
 8009354:	d157      	bne.n	8009406 <_strtod_l+0xa26>
 8009356:	4630      	mov	r0, r6
 8009358:	4639      	mov	r1, r7
 800935a:	2200      	movs	r2, #0
 800935c:	4b5a      	ldr	r3, [pc, #360]	@ (80094c8 <_strtod_l+0xae8>)
 800935e:	f7f7 f8bb 	bl	80004d8 <__aeabi_dmul>
 8009362:	4606      	mov	r6, r0
 8009364:	460f      	mov	r7, r1
 8009366:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800936a:	9606      	str	r6, [sp, #24]
 800936c:	9307      	str	r3, [sp, #28]
 800936e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009372:	4d52      	ldr	r5, [pc, #328]	@ (80094bc <_strtod_l+0xadc>)
 8009374:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800937a:	401d      	ands	r5, r3
 800937c:	4b53      	ldr	r3, [pc, #332]	@ (80094cc <_strtod_l+0xaec>)
 800937e:	429d      	cmp	r5, r3
 8009380:	f040 80aa 	bne.w	80094d8 <_strtod_l+0xaf8>
 8009384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009386:	4650      	mov	r0, sl
 8009388:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800938c:	4659      	mov	r1, fp
 800938e:	f7ff f9cf 	bl	8008730 <__ulp>
 8009392:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009396:	f7f7 f89f 	bl	80004d8 <__aeabi_dmul>
 800939a:	4652      	mov	r2, sl
 800939c:	465b      	mov	r3, fp
 800939e:	f7f6 fee5 	bl	800016c <__adddf3>
 80093a2:	460b      	mov	r3, r1
 80093a4:	4945      	ldr	r1, [pc, #276]	@ (80094bc <_strtod_l+0xadc>)
 80093a6:	4a4a      	ldr	r2, [pc, #296]	@ (80094d0 <_strtod_l+0xaf0>)
 80093a8:	4019      	ands	r1, r3
 80093aa:	4291      	cmp	r1, r2
 80093ac:	4682      	mov	sl, r0
 80093ae:	d942      	bls.n	8009436 <_strtod_l+0xa56>
 80093b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093b2:	4b43      	ldr	r3, [pc, #268]	@ (80094c0 <_strtod_l+0xae0>)
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d103      	bne.n	80093c0 <_strtod_l+0x9e0>
 80093b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093ba:	3301      	adds	r3, #1
 80093bc:	f43f ad2b 	beq.w	8008e16 <_strtod_l+0x436>
 80093c0:	f04f 3aff 	mov.w	sl, #4294967295
 80093c4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80094c0 <_strtod_l+0xae0>
 80093c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093ca:	9805      	ldr	r0, [sp, #20]
 80093cc:	f7fe fe7e 	bl	80080cc <_Bfree>
 80093d0:	4649      	mov	r1, r9
 80093d2:	9805      	ldr	r0, [sp, #20]
 80093d4:	f7fe fe7a 	bl	80080cc <_Bfree>
 80093d8:	4641      	mov	r1, r8
 80093da:	9805      	ldr	r0, [sp, #20]
 80093dc:	f7fe fe76 	bl	80080cc <_Bfree>
 80093e0:	4621      	mov	r1, r4
 80093e2:	9805      	ldr	r0, [sp, #20]
 80093e4:	f7fe fe72 	bl	80080cc <_Bfree>
 80093e8:	e618      	b.n	800901c <_strtod_l+0x63c>
 80093ea:	f1ba 0f01 	cmp.w	sl, #1
 80093ee:	d103      	bne.n	80093f8 <_strtod_l+0xa18>
 80093f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f43f ada5 	beq.w	8008f42 <_strtod_l+0x562>
 80093f8:	2200      	movs	r2, #0
 80093fa:	4b36      	ldr	r3, [pc, #216]	@ (80094d4 <_strtod_l+0xaf4>)
 80093fc:	2600      	movs	r6, #0
 80093fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009402:	4f30      	ldr	r7, [pc, #192]	@ (80094c4 <_strtod_l+0xae4>)
 8009404:	e7b3      	b.n	800936e <_strtod_l+0x98e>
 8009406:	2600      	movs	r6, #0
 8009408:	4f2f      	ldr	r7, [pc, #188]	@ (80094c8 <_strtod_l+0xae8>)
 800940a:	e7ac      	b.n	8009366 <_strtod_l+0x986>
 800940c:	4630      	mov	r0, r6
 800940e:	4639      	mov	r1, r7
 8009410:	4b2d      	ldr	r3, [pc, #180]	@ (80094c8 <_strtod_l+0xae8>)
 8009412:	2200      	movs	r2, #0
 8009414:	f7f7 f860 	bl	80004d8 <__aeabi_dmul>
 8009418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800941a:	4606      	mov	r6, r0
 800941c:	460f      	mov	r7, r1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0a1      	beq.n	8009366 <_strtod_l+0x986>
 8009422:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009426:	e7a2      	b.n	800936e <_strtod_l+0x98e>
 8009428:	2200      	movs	r2, #0
 800942a:	4b26      	ldr	r3, [pc, #152]	@ (80094c4 <_strtod_l+0xae4>)
 800942c:	4616      	mov	r6, r2
 800942e:	461f      	mov	r7, r3
 8009430:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009434:	e79b      	b.n	800936e <_strtod_l+0x98e>
 8009436:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800943a:	9b08      	ldr	r3, [sp, #32]
 800943c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1c1      	bne.n	80093c8 <_strtod_l+0x9e8>
 8009444:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009448:	0d1b      	lsrs	r3, r3, #20
 800944a:	051b      	lsls	r3, r3, #20
 800944c:	429d      	cmp	r5, r3
 800944e:	d1bb      	bne.n	80093c8 <_strtod_l+0x9e8>
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f7 fb88 	bl	8000b68 <__aeabi_d2lz>
 8009458:	f7f7 f810 	bl	800047c <__aeabi_l2d>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4630      	mov	r0, r6
 8009462:	4639      	mov	r1, r7
 8009464:	f7f6 fe80 	bl	8000168 <__aeabi_dsub>
 8009468:	460b      	mov	r3, r1
 800946a:	4602      	mov	r2, r0
 800946c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009470:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009476:	ea46 060a 	orr.w	r6, r6, sl
 800947a:	431e      	orrs	r6, r3
 800947c:	d069      	beq.n	8009552 <_strtod_l+0xb72>
 800947e:	a30a      	add	r3, pc, #40	@ (adr r3, 80094a8 <_strtod_l+0xac8>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f7f7 fa9a 	bl	80009bc <__aeabi_dcmplt>
 8009488:	2800      	cmp	r0, #0
 800948a:	f47f accf 	bne.w	8008e2c <_strtod_l+0x44c>
 800948e:	a308      	add	r3, pc, #32	@ (adr r3, 80094b0 <_strtod_l+0xad0>)
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009498:	f7f7 faae 	bl	80009f8 <__aeabi_dcmpgt>
 800949c:	2800      	cmp	r0, #0
 800949e:	d093      	beq.n	80093c8 <_strtod_l+0x9e8>
 80094a0:	e4c4      	b.n	8008e2c <_strtod_l+0x44c>
 80094a2:	bf00      	nop
 80094a4:	f3af 8000 	nop.w
 80094a8:	94a03595 	.word	0x94a03595
 80094ac:	3fdfffff 	.word	0x3fdfffff
 80094b0:	35afe535 	.word	0x35afe535
 80094b4:	3fe00000 	.word	0x3fe00000
 80094b8:	000fffff 	.word	0x000fffff
 80094bc:	7ff00000 	.word	0x7ff00000
 80094c0:	7fefffff 	.word	0x7fefffff
 80094c4:	3ff00000 	.word	0x3ff00000
 80094c8:	3fe00000 	.word	0x3fe00000
 80094cc:	7fe00000 	.word	0x7fe00000
 80094d0:	7c9fffff 	.word	0x7c9fffff
 80094d4:	bff00000 	.word	0xbff00000
 80094d8:	9b08      	ldr	r3, [sp, #32]
 80094da:	b323      	cbz	r3, 8009526 <_strtod_l+0xb46>
 80094dc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80094e0:	d821      	bhi.n	8009526 <_strtod_l+0xb46>
 80094e2:	a327      	add	r3, pc, #156	@ (adr r3, 8009580 <_strtod_l+0xba0>)
 80094e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e8:	4630      	mov	r0, r6
 80094ea:	4639      	mov	r1, r7
 80094ec:	f7f7 fa70 	bl	80009d0 <__aeabi_dcmple>
 80094f0:	b1a0      	cbz	r0, 800951c <_strtod_l+0xb3c>
 80094f2:	4639      	mov	r1, r7
 80094f4:	4630      	mov	r0, r6
 80094f6:	f7f7 fac7 	bl	8000a88 <__aeabi_d2uiz>
 80094fa:	2801      	cmp	r0, #1
 80094fc:	bf38      	it	cc
 80094fe:	2001      	movcc	r0, #1
 8009500:	f7f6 ff70 	bl	80003e4 <__aeabi_ui2d>
 8009504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009506:	4606      	mov	r6, r0
 8009508:	460f      	mov	r7, r1
 800950a:	b9fb      	cbnz	r3, 800954c <_strtod_l+0xb6c>
 800950c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009510:	9014      	str	r0, [sp, #80]	@ 0x50
 8009512:	9315      	str	r3, [sp, #84]	@ 0x54
 8009514:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009518:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800951c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800951e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009522:	1b5b      	subs	r3, r3, r5
 8009524:	9311      	str	r3, [sp, #68]	@ 0x44
 8009526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800952a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800952e:	f7ff f8ff 	bl	8008730 <__ulp>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4650      	mov	r0, sl
 8009538:	4659      	mov	r1, fp
 800953a:	f7f6 ffcd 	bl	80004d8 <__aeabi_dmul>
 800953e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009542:	f7f6 fe13 	bl	800016c <__adddf3>
 8009546:	4682      	mov	sl, r0
 8009548:	468b      	mov	fp, r1
 800954a:	e776      	b.n	800943a <_strtod_l+0xa5a>
 800954c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009550:	e7e0      	b.n	8009514 <_strtod_l+0xb34>
 8009552:	a30d      	add	r3, pc, #52	@ (adr r3, 8009588 <_strtod_l+0xba8>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f7f7 fa30 	bl	80009bc <__aeabi_dcmplt>
 800955c:	e79e      	b.n	800949c <_strtod_l+0xabc>
 800955e:	2300      	movs	r3, #0
 8009560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009564:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	f7ff ba77 	b.w	8008a5a <_strtod_l+0x7a>
 800956c:	2a65      	cmp	r2, #101	@ 0x65
 800956e:	f43f ab6e 	beq.w	8008c4e <_strtod_l+0x26e>
 8009572:	2a45      	cmp	r2, #69	@ 0x45
 8009574:	f43f ab6b 	beq.w	8008c4e <_strtod_l+0x26e>
 8009578:	2301      	movs	r3, #1
 800957a:	f7ff bba6 	b.w	8008cca <_strtod_l+0x2ea>
 800957e:	bf00      	nop
 8009580:	ffc00000 	.word	0xffc00000
 8009584:	41dfffff 	.word	0x41dfffff
 8009588:	94a03595 	.word	0x94a03595
 800958c:	3fcfffff 	.word	0x3fcfffff

08009590 <_strtod_r>:
 8009590:	4b01      	ldr	r3, [pc, #4]	@ (8009598 <_strtod_r+0x8>)
 8009592:	f7ff ba25 	b.w	80089e0 <_strtod_l>
 8009596:	bf00      	nop
 8009598:	20000070 	.word	0x20000070

0800959c <__ssputs_r>:
 800959c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a0:	461f      	mov	r7, r3
 80095a2:	688e      	ldr	r6, [r1, #8]
 80095a4:	4682      	mov	sl, r0
 80095a6:	42be      	cmp	r6, r7
 80095a8:	460c      	mov	r4, r1
 80095aa:	4690      	mov	r8, r2
 80095ac:	680b      	ldr	r3, [r1, #0]
 80095ae:	d82d      	bhi.n	800960c <__ssputs_r+0x70>
 80095b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095b8:	d026      	beq.n	8009608 <__ssputs_r+0x6c>
 80095ba:	6965      	ldr	r5, [r4, #20]
 80095bc:	6909      	ldr	r1, [r1, #16]
 80095be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095c2:	eba3 0901 	sub.w	r9, r3, r1
 80095c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095ca:	1c7b      	adds	r3, r7, #1
 80095cc:	444b      	add	r3, r9
 80095ce:	106d      	asrs	r5, r5, #1
 80095d0:	429d      	cmp	r5, r3
 80095d2:	bf38      	it	cc
 80095d4:	461d      	movcc	r5, r3
 80095d6:	0553      	lsls	r3, r2, #21
 80095d8:	d527      	bpl.n	800962a <__ssputs_r+0x8e>
 80095da:	4629      	mov	r1, r5
 80095dc:	f7fe fcaa 	bl	8007f34 <_malloc_r>
 80095e0:	4606      	mov	r6, r0
 80095e2:	b360      	cbz	r0, 800963e <__ssputs_r+0xa2>
 80095e4:	464a      	mov	r2, r9
 80095e6:	6921      	ldr	r1, [r4, #16]
 80095e8:	f7fd fdcf 	bl	800718a <memcpy>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095f6:	81a3      	strh	r3, [r4, #12]
 80095f8:	6126      	str	r6, [r4, #16]
 80095fa:	444e      	add	r6, r9
 80095fc:	6026      	str	r6, [r4, #0]
 80095fe:	463e      	mov	r6, r7
 8009600:	6165      	str	r5, [r4, #20]
 8009602:	eba5 0509 	sub.w	r5, r5, r9
 8009606:	60a5      	str	r5, [r4, #8]
 8009608:	42be      	cmp	r6, r7
 800960a:	d900      	bls.n	800960e <__ssputs_r+0x72>
 800960c:	463e      	mov	r6, r7
 800960e:	4632      	mov	r2, r6
 8009610:	4641      	mov	r1, r8
 8009612:	6820      	ldr	r0, [r4, #0]
 8009614:	f000 f9c2 	bl	800999c <memmove>
 8009618:	2000      	movs	r0, #0
 800961a:	68a3      	ldr	r3, [r4, #8]
 800961c:	1b9b      	subs	r3, r3, r6
 800961e:	60a3      	str	r3, [r4, #8]
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	4433      	add	r3, r6
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962a:	462a      	mov	r2, r5
 800962c:	f000 fd75 	bl	800a11a <_realloc_r>
 8009630:	4606      	mov	r6, r0
 8009632:	2800      	cmp	r0, #0
 8009634:	d1e0      	bne.n	80095f8 <__ssputs_r+0x5c>
 8009636:	4650      	mov	r0, sl
 8009638:	6921      	ldr	r1, [r4, #16]
 800963a:	f7fe fc09 	bl	8007e50 <_free_r>
 800963e:	230c      	movs	r3, #12
 8009640:	f8ca 3000 	str.w	r3, [sl]
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	f04f 30ff 	mov.w	r0, #4294967295
 800964a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	e7e9      	b.n	8009626 <__ssputs_r+0x8a>
	...

08009654 <_svfiprintf_r>:
 8009654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009658:	4698      	mov	r8, r3
 800965a:	898b      	ldrh	r3, [r1, #12]
 800965c:	4607      	mov	r7, r0
 800965e:	061b      	lsls	r3, r3, #24
 8009660:	460d      	mov	r5, r1
 8009662:	4614      	mov	r4, r2
 8009664:	b09d      	sub	sp, #116	@ 0x74
 8009666:	d510      	bpl.n	800968a <_svfiprintf_r+0x36>
 8009668:	690b      	ldr	r3, [r1, #16]
 800966a:	b973      	cbnz	r3, 800968a <_svfiprintf_r+0x36>
 800966c:	2140      	movs	r1, #64	@ 0x40
 800966e:	f7fe fc61 	bl	8007f34 <_malloc_r>
 8009672:	6028      	str	r0, [r5, #0]
 8009674:	6128      	str	r0, [r5, #16]
 8009676:	b930      	cbnz	r0, 8009686 <_svfiprintf_r+0x32>
 8009678:	230c      	movs	r3, #12
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	f04f 30ff 	mov.w	r0, #4294967295
 8009680:	b01d      	add	sp, #116	@ 0x74
 8009682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009686:	2340      	movs	r3, #64	@ 0x40
 8009688:	616b      	str	r3, [r5, #20]
 800968a:	2300      	movs	r3, #0
 800968c:	9309      	str	r3, [sp, #36]	@ 0x24
 800968e:	2320      	movs	r3, #32
 8009690:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009694:	2330      	movs	r3, #48	@ 0x30
 8009696:	f04f 0901 	mov.w	r9, #1
 800969a:	f8cd 800c 	str.w	r8, [sp, #12]
 800969e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009838 <_svfiprintf_r+0x1e4>
 80096a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096a6:	4623      	mov	r3, r4
 80096a8:	469a      	mov	sl, r3
 80096aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ae:	b10a      	cbz	r2, 80096b4 <_svfiprintf_r+0x60>
 80096b0:	2a25      	cmp	r2, #37	@ 0x25
 80096b2:	d1f9      	bne.n	80096a8 <_svfiprintf_r+0x54>
 80096b4:	ebba 0b04 	subs.w	fp, sl, r4
 80096b8:	d00b      	beq.n	80096d2 <_svfiprintf_r+0x7e>
 80096ba:	465b      	mov	r3, fp
 80096bc:	4622      	mov	r2, r4
 80096be:	4629      	mov	r1, r5
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7ff ff6b 	bl	800959c <__ssputs_r>
 80096c6:	3001      	adds	r0, #1
 80096c8:	f000 80a7 	beq.w	800981a <_svfiprintf_r+0x1c6>
 80096cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096ce:	445a      	add	r2, fp
 80096d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80096d2:	f89a 3000 	ldrb.w	r3, [sl]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 809f 	beq.w	800981a <_svfiprintf_r+0x1c6>
 80096dc:	2300      	movs	r3, #0
 80096de:	f04f 32ff 	mov.w	r2, #4294967295
 80096e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096e6:	f10a 0a01 	add.w	sl, sl, #1
 80096ea:	9304      	str	r3, [sp, #16]
 80096ec:	9307      	str	r3, [sp, #28]
 80096ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80096f4:	4654      	mov	r4, sl
 80096f6:	2205      	movs	r2, #5
 80096f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fc:	484e      	ldr	r0, [pc, #312]	@ (8009838 <_svfiprintf_r+0x1e4>)
 80096fe:	f7fd fd36 	bl	800716e <memchr>
 8009702:	9a04      	ldr	r2, [sp, #16]
 8009704:	b9d8      	cbnz	r0, 800973e <_svfiprintf_r+0xea>
 8009706:	06d0      	lsls	r0, r2, #27
 8009708:	bf44      	itt	mi
 800970a:	2320      	movmi	r3, #32
 800970c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009710:	0711      	lsls	r1, r2, #28
 8009712:	bf44      	itt	mi
 8009714:	232b      	movmi	r3, #43	@ 0x2b
 8009716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800971a:	f89a 3000 	ldrb.w	r3, [sl]
 800971e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009720:	d015      	beq.n	800974e <_svfiprintf_r+0xfa>
 8009722:	4654      	mov	r4, sl
 8009724:	2000      	movs	r0, #0
 8009726:	f04f 0c0a 	mov.w	ip, #10
 800972a:	9a07      	ldr	r2, [sp, #28]
 800972c:	4621      	mov	r1, r4
 800972e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009732:	3b30      	subs	r3, #48	@ 0x30
 8009734:	2b09      	cmp	r3, #9
 8009736:	d94b      	bls.n	80097d0 <_svfiprintf_r+0x17c>
 8009738:	b1b0      	cbz	r0, 8009768 <_svfiprintf_r+0x114>
 800973a:	9207      	str	r2, [sp, #28]
 800973c:	e014      	b.n	8009768 <_svfiprintf_r+0x114>
 800973e:	eba0 0308 	sub.w	r3, r0, r8
 8009742:	fa09 f303 	lsl.w	r3, r9, r3
 8009746:	4313      	orrs	r3, r2
 8009748:	46a2      	mov	sl, r4
 800974a:	9304      	str	r3, [sp, #16]
 800974c:	e7d2      	b.n	80096f4 <_svfiprintf_r+0xa0>
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	1d19      	adds	r1, r3, #4
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	9103      	str	r1, [sp, #12]
 8009756:	2b00      	cmp	r3, #0
 8009758:	bfbb      	ittet	lt
 800975a:	425b      	neglt	r3, r3
 800975c:	f042 0202 	orrlt.w	r2, r2, #2
 8009760:	9307      	strge	r3, [sp, #28]
 8009762:	9307      	strlt	r3, [sp, #28]
 8009764:	bfb8      	it	lt
 8009766:	9204      	strlt	r2, [sp, #16]
 8009768:	7823      	ldrb	r3, [r4, #0]
 800976a:	2b2e      	cmp	r3, #46	@ 0x2e
 800976c:	d10a      	bne.n	8009784 <_svfiprintf_r+0x130>
 800976e:	7863      	ldrb	r3, [r4, #1]
 8009770:	2b2a      	cmp	r3, #42	@ 0x2a
 8009772:	d132      	bne.n	80097da <_svfiprintf_r+0x186>
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	3402      	adds	r4, #2
 8009778:	1d1a      	adds	r2, r3, #4
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	9203      	str	r2, [sp, #12]
 800977e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009782:	9305      	str	r3, [sp, #20]
 8009784:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800983c <_svfiprintf_r+0x1e8>
 8009788:	2203      	movs	r2, #3
 800978a:	4650      	mov	r0, sl
 800978c:	7821      	ldrb	r1, [r4, #0]
 800978e:	f7fd fcee 	bl	800716e <memchr>
 8009792:	b138      	cbz	r0, 80097a4 <_svfiprintf_r+0x150>
 8009794:	2240      	movs	r2, #64	@ 0x40
 8009796:	9b04      	ldr	r3, [sp, #16]
 8009798:	eba0 000a 	sub.w	r0, r0, sl
 800979c:	4082      	lsls	r2, r0
 800979e:	4313      	orrs	r3, r2
 80097a0:	3401      	adds	r4, #1
 80097a2:	9304      	str	r3, [sp, #16]
 80097a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a8:	2206      	movs	r2, #6
 80097aa:	4825      	ldr	r0, [pc, #148]	@ (8009840 <_svfiprintf_r+0x1ec>)
 80097ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097b0:	f7fd fcdd 	bl	800716e <memchr>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d036      	beq.n	8009826 <_svfiprintf_r+0x1d2>
 80097b8:	4b22      	ldr	r3, [pc, #136]	@ (8009844 <_svfiprintf_r+0x1f0>)
 80097ba:	bb1b      	cbnz	r3, 8009804 <_svfiprintf_r+0x1b0>
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	3307      	adds	r3, #7
 80097c0:	f023 0307 	bic.w	r3, r3, #7
 80097c4:	3308      	adds	r3, #8
 80097c6:	9303      	str	r3, [sp, #12]
 80097c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ca:	4433      	add	r3, r6
 80097cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ce:	e76a      	b.n	80096a6 <_svfiprintf_r+0x52>
 80097d0:	460c      	mov	r4, r1
 80097d2:	2001      	movs	r0, #1
 80097d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097d8:	e7a8      	b.n	800972c <_svfiprintf_r+0xd8>
 80097da:	2300      	movs	r3, #0
 80097dc:	f04f 0c0a 	mov.w	ip, #10
 80097e0:	4619      	mov	r1, r3
 80097e2:	3401      	adds	r4, #1
 80097e4:	9305      	str	r3, [sp, #20]
 80097e6:	4620      	mov	r0, r4
 80097e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ec:	3a30      	subs	r2, #48	@ 0x30
 80097ee:	2a09      	cmp	r2, #9
 80097f0:	d903      	bls.n	80097fa <_svfiprintf_r+0x1a6>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0c6      	beq.n	8009784 <_svfiprintf_r+0x130>
 80097f6:	9105      	str	r1, [sp, #20]
 80097f8:	e7c4      	b.n	8009784 <_svfiprintf_r+0x130>
 80097fa:	4604      	mov	r4, r0
 80097fc:	2301      	movs	r3, #1
 80097fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009802:	e7f0      	b.n	80097e6 <_svfiprintf_r+0x192>
 8009804:	ab03      	add	r3, sp, #12
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	462a      	mov	r2, r5
 800980a:	4638      	mov	r0, r7
 800980c:	4b0e      	ldr	r3, [pc, #56]	@ (8009848 <_svfiprintf_r+0x1f4>)
 800980e:	a904      	add	r1, sp, #16
 8009810:	f7fc fd24 	bl	800625c <_printf_float>
 8009814:	1c42      	adds	r2, r0, #1
 8009816:	4606      	mov	r6, r0
 8009818:	d1d6      	bne.n	80097c8 <_svfiprintf_r+0x174>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	065b      	lsls	r3, r3, #25
 800981e:	f53f af2d 	bmi.w	800967c <_svfiprintf_r+0x28>
 8009822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009824:	e72c      	b.n	8009680 <_svfiprintf_r+0x2c>
 8009826:	ab03      	add	r3, sp, #12
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	462a      	mov	r2, r5
 800982c:	4638      	mov	r0, r7
 800982e:	4b06      	ldr	r3, [pc, #24]	@ (8009848 <_svfiprintf_r+0x1f4>)
 8009830:	a904      	add	r1, sp, #16
 8009832:	f7fc ffb1 	bl	8006798 <_printf_i>
 8009836:	e7ed      	b.n	8009814 <_svfiprintf_r+0x1c0>
 8009838:	0800ba88 	.word	0x0800ba88
 800983c:	0800ba8e 	.word	0x0800ba8e
 8009840:	0800ba92 	.word	0x0800ba92
 8009844:	0800625d 	.word	0x0800625d
 8009848:	0800959d 	.word	0x0800959d

0800984c <__sflush_r>:
 800984c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	0716      	lsls	r6, r2, #28
 8009854:	4605      	mov	r5, r0
 8009856:	460c      	mov	r4, r1
 8009858:	d454      	bmi.n	8009904 <__sflush_r+0xb8>
 800985a:	684b      	ldr	r3, [r1, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	dc02      	bgt.n	8009866 <__sflush_r+0x1a>
 8009860:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009862:	2b00      	cmp	r3, #0
 8009864:	dd48      	ble.n	80098f8 <__sflush_r+0xac>
 8009866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009868:	2e00      	cmp	r6, #0
 800986a:	d045      	beq.n	80098f8 <__sflush_r+0xac>
 800986c:	2300      	movs	r3, #0
 800986e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009872:	682f      	ldr	r7, [r5, #0]
 8009874:	6a21      	ldr	r1, [r4, #32]
 8009876:	602b      	str	r3, [r5, #0]
 8009878:	d030      	beq.n	80098dc <__sflush_r+0x90>
 800987a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	0759      	lsls	r1, r3, #29
 8009880:	d505      	bpl.n	800988e <__sflush_r+0x42>
 8009882:	6863      	ldr	r3, [r4, #4]
 8009884:	1ad2      	subs	r2, r2, r3
 8009886:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009888:	b10b      	cbz	r3, 800988e <__sflush_r+0x42>
 800988a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800988c:	1ad2      	subs	r2, r2, r3
 800988e:	2300      	movs	r3, #0
 8009890:	4628      	mov	r0, r5
 8009892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009894:	6a21      	ldr	r1, [r4, #32]
 8009896:	47b0      	blx	r6
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	d106      	bne.n	80098ac <__sflush_r+0x60>
 800989e:	6829      	ldr	r1, [r5, #0]
 80098a0:	291d      	cmp	r1, #29
 80098a2:	d82b      	bhi.n	80098fc <__sflush_r+0xb0>
 80098a4:	4a28      	ldr	r2, [pc, #160]	@ (8009948 <__sflush_r+0xfc>)
 80098a6:	410a      	asrs	r2, r1
 80098a8:	07d6      	lsls	r6, r2, #31
 80098aa:	d427      	bmi.n	80098fc <__sflush_r+0xb0>
 80098ac:	2200      	movs	r2, #0
 80098ae:	6062      	str	r2, [r4, #4]
 80098b0:	6922      	ldr	r2, [r4, #16]
 80098b2:	04d9      	lsls	r1, r3, #19
 80098b4:	6022      	str	r2, [r4, #0]
 80098b6:	d504      	bpl.n	80098c2 <__sflush_r+0x76>
 80098b8:	1c42      	adds	r2, r0, #1
 80098ba:	d101      	bne.n	80098c0 <__sflush_r+0x74>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b903      	cbnz	r3, 80098c2 <__sflush_r+0x76>
 80098c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80098c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098c4:	602f      	str	r7, [r5, #0]
 80098c6:	b1b9      	cbz	r1, 80098f8 <__sflush_r+0xac>
 80098c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098cc:	4299      	cmp	r1, r3
 80098ce:	d002      	beq.n	80098d6 <__sflush_r+0x8a>
 80098d0:	4628      	mov	r0, r5
 80098d2:	f7fe fabd 	bl	8007e50 <_free_r>
 80098d6:	2300      	movs	r3, #0
 80098d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80098da:	e00d      	b.n	80098f8 <__sflush_r+0xac>
 80098dc:	2301      	movs	r3, #1
 80098de:	4628      	mov	r0, r5
 80098e0:	47b0      	blx	r6
 80098e2:	4602      	mov	r2, r0
 80098e4:	1c50      	adds	r0, r2, #1
 80098e6:	d1c9      	bne.n	800987c <__sflush_r+0x30>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0c6      	beq.n	800987c <__sflush_r+0x30>
 80098ee:	2b1d      	cmp	r3, #29
 80098f0:	d001      	beq.n	80098f6 <__sflush_r+0xaa>
 80098f2:	2b16      	cmp	r3, #22
 80098f4:	d11d      	bne.n	8009932 <__sflush_r+0xe6>
 80098f6:	602f      	str	r7, [r5, #0]
 80098f8:	2000      	movs	r0, #0
 80098fa:	e021      	b.n	8009940 <__sflush_r+0xf4>
 80098fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009900:	b21b      	sxth	r3, r3
 8009902:	e01a      	b.n	800993a <__sflush_r+0xee>
 8009904:	690f      	ldr	r7, [r1, #16]
 8009906:	2f00      	cmp	r7, #0
 8009908:	d0f6      	beq.n	80098f8 <__sflush_r+0xac>
 800990a:	0793      	lsls	r3, r2, #30
 800990c:	bf18      	it	ne
 800990e:	2300      	movne	r3, #0
 8009910:	680e      	ldr	r6, [r1, #0]
 8009912:	bf08      	it	eq
 8009914:	694b      	ldreq	r3, [r1, #20]
 8009916:	1bf6      	subs	r6, r6, r7
 8009918:	600f      	str	r7, [r1, #0]
 800991a:	608b      	str	r3, [r1, #8]
 800991c:	2e00      	cmp	r6, #0
 800991e:	ddeb      	ble.n	80098f8 <__sflush_r+0xac>
 8009920:	4633      	mov	r3, r6
 8009922:	463a      	mov	r2, r7
 8009924:	4628      	mov	r0, r5
 8009926:	6a21      	ldr	r1, [r4, #32]
 8009928:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800992c:	47e0      	blx	ip
 800992e:	2800      	cmp	r0, #0
 8009930:	dc07      	bgt.n	8009942 <__sflush_r+0xf6>
 8009932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800993a:	f04f 30ff 	mov.w	r0, #4294967295
 800993e:	81a3      	strh	r3, [r4, #12]
 8009940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009942:	4407      	add	r7, r0
 8009944:	1a36      	subs	r6, r6, r0
 8009946:	e7e9      	b.n	800991c <__sflush_r+0xd0>
 8009948:	dfbffffe 	.word	0xdfbffffe

0800994c <_fflush_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	690b      	ldr	r3, [r1, #16]
 8009950:	4605      	mov	r5, r0
 8009952:	460c      	mov	r4, r1
 8009954:	b913      	cbnz	r3, 800995c <_fflush_r+0x10>
 8009956:	2500      	movs	r5, #0
 8009958:	4628      	mov	r0, r5
 800995a:	bd38      	pop	{r3, r4, r5, pc}
 800995c:	b118      	cbz	r0, 8009966 <_fflush_r+0x1a>
 800995e:	6a03      	ldr	r3, [r0, #32]
 8009960:	b90b      	cbnz	r3, 8009966 <_fflush_r+0x1a>
 8009962:	f7fd fad5 	bl	8006f10 <__sinit>
 8009966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d0f3      	beq.n	8009956 <_fflush_r+0xa>
 800996e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009970:	07d0      	lsls	r0, r2, #31
 8009972:	d404      	bmi.n	800997e <_fflush_r+0x32>
 8009974:	0599      	lsls	r1, r3, #22
 8009976:	d402      	bmi.n	800997e <_fflush_r+0x32>
 8009978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800997a:	f7fd fbee 	bl	800715a <__retarget_lock_acquire_recursive>
 800997e:	4628      	mov	r0, r5
 8009980:	4621      	mov	r1, r4
 8009982:	f7ff ff63 	bl	800984c <__sflush_r>
 8009986:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009988:	4605      	mov	r5, r0
 800998a:	07da      	lsls	r2, r3, #31
 800998c:	d4e4      	bmi.n	8009958 <_fflush_r+0xc>
 800998e:	89a3      	ldrh	r3, [r4, #12]
 8009990:	059b      	lsls	r3, r3, #22
 8009992:	d4e1      	bmi.n	8009958 <_fflush_r+0xc>
 8009994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009996:	f7fd fbe1 	bl	800715c <__retarget_lock_release_recursive>
 800999a:	e7dd      	b.n	8009958 <_fflush_r+0xc>

0800999c <memmove>:
 800999c:	4288      	cmp	r0, r1
 800999e:	b510      	push	{r4, lr}
 80099a0:	eb01 0402 	add.w	r4, r1, r2
 80099a4:	d902      	bls.n	80099ac <memmove+0x10>
 80099a6:	4284      	cmp	r4, r0
 80099a8:	4623      	mov	r3, r4
 80099aa:	d807      	bhi.n	80099bc <memmove+0x20>
 80099ac:	1e43      	subs	r3, r0, #1
 80099ae:	42a1      	cmp	r1, r4
 80099b0:	d008      	beq.n	80099c4 <memmove+0x28>
 80099b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099ba:	e7f8      	b.n	80099ae <memmove+0x12>
 80099bc:	4601      	mov	r1, r0
 80099be:	4402      	add	r2, r0
 80099c0:	428a      	cmp	r2, r1
 80099c2:	d100      	bne.n	80099c6 <memmove+0x2a>
 80099c4:	bd10      	pop	{r4, pc}
 80099c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099ce:	e7f7      	b.n	80099c0 <memmove+0x24>

080099d0 <strncmp>:
 80099d0:	b510      	push	{r4, lr}
 80099d2:	b16a      	cbz	r2, 80099f0 <strncmp+0x20>
 80099d4:	3901      	subs	r1, #1
 80099d6:	1884      	adds	r4, r0, r2
 80099d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d103      	bne.n	80099ec <strncmp+0x1c>
 80099e4:	42a0      	cmp	r0, r4
 80099e6:	d001      	beq.n	80099ec <strncmp+0x1c>
 80099e8:	2a00      	cmp	r2, #0
 80099ea:	d1f5      	bne.n	80099d8 <strncmp+0x8>
 80099ec:	1ad0      	subs	r0, r2, r3
 80099ee:	bd10      	pop	{r4, pc}
 80099f0:	4610      	mov	r0, r2
 80099f2:	e7fc      	b.n	80099ee <strncmp+0x1e>

080099f4 <_sbrk_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	2300      	movs	r3, #0
 80099f8:	4d05      	ldr	r5, [pc, #20]	@ (8009a10 <_sbrk_r+0x1c>)
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	602b      	str	r3, [r5, #0]
 8009a00:	f7f9 f9c2 	bl	8002d88 <_sbrk>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_sbrk_r+0x1a>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_sbrk_r+0x1a>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	20000b78 	.word	0x20000b78

08009a14 <nan>:
 8009a14:	2000      	movs	r0, #0
 8009a16:	4901      	ldr	r1, [pc, #4]	@ (8009a1c <nan+0x8>)
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	7ff80000 	.word	0x7ff80000

08009a20 <__assert_func>:
 8009a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a22:	4614      	mov	r4, r2
 8009a24:	461a      	mov	r2, r3
 8009a26:	4b09      	ldr	r3, [pc, #36]	@ (8009a4c <__assert_func+0x2c>)
 8009a28:	4605      	mov	r5, r0
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68d8      	ldr	r0, [r3, #12]
 8009a2e:	b954      	cbnz	r4, 8009a46 <__assert_func+0x26>
 8009a30:	4b07      	ldr	r3, [pc, #28]	@ (8009a50 <__assert_func+0x30>)
 8009a32:	461c      	mov	r4, r3
 8009a34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a38:	9100      	str	r1, [sp, #0]
 8009a3a:	462b      	mov	r3, r5
 8009a3c:	4905      	ldr	r1, [pc, #20]	@ (8009a54 <__assert_func+0x34>)
 8009a3e:	f000 fba7 	bl	800a190 <fiprintf>
 8009a42:	f000 fbb7 	bl	800a1b4 <abort>
 8009a46:	4b04      	ldr	r3, [pc, #16]	@ (8009a58 <__assert_func+0x38>)
 8009a48:	e7f4      	b.n	8009a34 <__assert_func+0x14>
 8009a4a:	bf00      	nop
 8009a4c:	20000020 	.word	0x20000020
 8009a50:	0800badc 	.word	0x0800badc
 8009a54:	0800baae 	.word	0x0800baae
 8009a58:	0800baa1 	.word	0x0800baa1

08009a5c <_calloc_r>:
 8009a5c:	b570      	push	{r4, r5, r6, lr}
 8009a5e:	fba1 5402 	umull	r5, r4, r1, r2
 8009a62:	b93c      	cbnz	r4, 8009a74 <_calloc_r+0x18>
 8009a64:	4629      	mov	r1, r5
 8009a66:	f7fe fa65 	bl	8007f34 <_malloc_r>
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	b928      	cbnz	r0, 8009a7a <_calloc_r+0x1e>
 8009a6e:	2600      	movs	r6, #0
 8009a70:	4630      	mov	r0, r6
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	220c      	movs	r2, #12
 8009a76:	6002      	str	r2, [r0, #0]
 8009a78:	e7f9      	b.n	8009a6e <_calloc_r+0x12>
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	f7fd fae0 	bl	8007042 <memset>
 8009a82:	e7f5      	b.n	8009a70 <_calloc_r+0x14>

08009a84 <rshift>:
 8009a84:	6903      	ldr	r3, [r0, #16]
 8009a86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a8e:	f100 0414 	add.w	r4, r0, #20
 8009a92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a96:	dd46      	ble.n	8009b26 <rshift+0xa2>
 8009a98:	f011 011f 	ands.w	r1, r1, #31
 8009a9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009aa0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009aa4:	d10c      	bne.n	8009ac0 <rshift+0x3c>
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	f100 0710 	add.w	r7, r0, #16
 8009aac:	42b1      	cmp	r1, r6
 8009aae:	d335      	bcc.n	8009b1c <rshift+0x98>
 8009ab0:	1a9b      	subs	r3, r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	1eea      	subs	r2, r5, #3
 8009ab6:	4296      	cmp	r6, r2
 8009ab8:	bf38      	it	cc
 8009aba:	2300      	movcc	r3, #0
 8009abc:	4423      	add	r3, r4
 8009abe:	e015      	b.n	8009aec <rshift+0x68>
 8009ac0:	46a1      	mov	r9, r4
 8009ac2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ac6:	f1c1 0820 	rsb	r8, r1, #32
 8009aca:	40cf      	lsrs	r7, r1
 8009acc:	f105 0e04 	add.w	lr, r5, #4
 8009ad0:	4576      	cmp	r6, lr
 8009ad2:	46f4      	mov	ip, lr
 8009ad4:	d816      	bhi.n	8009b04 <rshift+0x80>
 8009ad6:	1a9a      	subs	r2, r3, r2
 8009ad8:	0092      	lsls	r2, r2, #2
 8009ada:	3a04      	subs	r2, #4
 8009adc:	3501      	adds	r5, #1
 8009ade:	42ae      	cmp	r6, r5
 8009ae0:	bf38      	it	cc
 8009ae2:	2200      	movcc	r2, #0
 8009ae4:	18a3      	adds	r3, r4, r2
 8009ae6:	50a7      	str	r7, [r4, r2]
 8009ae8:	b107      	cbz	r7, 8009aec <rshift+0x68>
 8009aea:	3304      	adds	r3, #4
 8009aec:	42a3      	cmp	r3, r4
 8009aee:	eba3 0204 	sub.w	r2, r3, r4
 8009af2:	bf08      	it	eq
 8009af4:	2300      	moveq	r3, #0
 8009af6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009afa:	6102      	str	r2, [r0, #16]
 8009afc:	bf08      	it	eq
 8009afe:	6143      	streq	r3, [r0, #20]
 8009b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b04:	f8dc c000 	ldr.w	ip, [ip]
 8009b08:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b0c:	ea4c 0707 	orr.w	r7, ip, r7
 8009b10:	f849 7b04 	str.w	r7, [r9], #4
 8009b14:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b18:	40cf      	lsrs	r7, r1
 8009b1a:	e7d9      	b.n	8009ad0 <rshift+0x4c>
 8009b1c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b20:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b24:	e7c2      	b.n	8009aac <rshift+0x28>
 8009b26:	4623      	mov	r3, r4
 8009b28:	e7e0      	b.n	8009aec <rshift+0x68>

08009b2a <__hexdig_fun>:
 8009b2a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009b2e:	2b09      	cmp	r3, #9
 8009b30:	d802      	bhi.n	8009b38 <__hexdig_fun+0xe>
 8009b32:	3820      	subs	r0, #32
 8009b34:	b2c0      	uxtb	r0, r0
 8009b36:	4770      	bx	lr
 8009b38:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009b3c:	2b05      	cmp	r3, #5
 8009b3e:	d801      	bhi.n	8009b44 <__hexdig_fun+0x1a>
 8009b40:	3847      	subs	r0, #71	@ 0x47
 8009b42:	e7f7      	b.n	8009b34 <__hexdig_fun+0xa>
 8009b44:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009b48:	2b05      	cmp	r3, #5
 8009b4a:	d801      	bhi.n	8009b50 <__hexdig_fun+0x26>
 8009b4c:	3827      	subs	r0, #39	@ 0x27
 8009b4e:	e7f1      	b.n	8009b34 <__hexdig_fun+0xa>
 8009b50:	2000      	movs	r0, #0
 8009b52:	4770      	bx	lr

08009b54 <__gethex>:
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	468a      	mov	sl, r1
 8009b5a:	4690      	mov	r8, r2
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	9302      	str	r3, [sp, #8]
 8009b60:	680b      	ldr	r3, [r1, #0]
 8009b62:	9001      	str	r0, [sp, #4]
 8009b64:	1c9c      	adds	r4, r3, #2
 8009b66:	46a1      	mov	r9, r4
 8009b68:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009b6c:	2830      	cmp	r0, #48	@ 0x30
 8009b6e:	d0fa      	beq.n	8009b66 <__gethex+0x12>
 8009b70:	eba9 0303 	sub.w	r3, r9, r3
 8009b74:	f1a3 0b02 	sub.w	fp, r3, #2
 8009b78:	f7ff ffd7 	bl	8009b2a <__hexdig_fun>
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d168      	bne.n	8009c54 <__gethex+0x100>
 8009b82:	2201      	movs	r2, #1
 8009b84:	4648      	mov	r0, r9
 8009b86:	499f      	ldr	r1, [pc, #636]	@ (8009e04 <__gethex+0x2b0>)
 8009b88:	f7ff ff22 	bl	80099d0 <strncmp>
 8009b8c:	4607      	mov	r7, r0
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d167      	bne.n	8009c62 <__gethex+0x10e>
 8009b92:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009b96:	4626      	mov	r6, r4
 8009b98:	f7ff ffc7 	bl	8009b2a <__hexdig_fun>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d062      	beq.n	8009c66 <__gethex+0x112>
 8009ba0:	4623      	mov	r3, r4
 8009ba2:	7818      	ldrb	r0, [r3, #0]
 8009ba4:	4699      	mov	r9, r3
 8009ba6:	2830      	cmp	r0, #48	@ 0x30
 8009ba8:	f103 0301 	add.w	r3, r3, #1
 8009bac:	d0f9      	beq.n	8009ba2 <__gethex+0x4e>
 8009bae:	f7ff ffbc 	bl	8009b2a <__hexdig_fun>
 8009bb2:	fab0 f580 	clz	r5, r0
 8009bb6:	f04f 0b01 	mov.w	fp, #1
 8009bba:	096d      	lsrs	r5, r5, #5
 8009bbc:	464a      	mov	r2, r9
 8009bbe:	4616      	mov	r6, r2
 8009bc0:	7830      	ldrb	r0, [r6, #0]
 8009bc2:	3201      	adds	r2, #1
 8009bc4:	f7ff ffb1 	bl	8009b2a <__hexdig_fun>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d1f8      	bne.n	8009bbe <__gethex+0x6a>
 8009bcc:	2201      	movs	r2, #1
 8009bce:	4630      	mov	r0, r6
 8009bd0:	498c      	ldr	r1, [pc, #560]	@ (8009e04 <__gethex+0x2b0>)
 8009bd2:	f7ff fefd 	bl	80099d0 <strncmp>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d13f      	bne.n	8009c5a <__gethex+0x106>
 8009bda:	b944      	cbnz	r4, 8009bee <__gethex+0x9a>
 8009bdc:	1c74      	adds	r4, r6, #1
 8009bde:	4622      	mov	r2, r4
 8009be0:	4616      	mov	r6, r2
 8009be2:	7830      	ldrb	r0, [r6, #0]
 8009be4:	3201      	adds	r2, #1
 8009be6:	f7ff ffa0 	bl	8009b2a <__hexdig_fun>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d1f8      	bne.n	8009be0 <__gethex+0x8c>
 8009bee:	1ba4      	subs	r4, r4, r6
 8009bf0:	00a7      	lsls	r7, r4, #2
 8009bf2:	7833      	ldrb	r3, [r6, #0]
 8009bf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009bf8:	2b50      	cmp	r3, #80	@ 0x50
 8009bfa:	d13e      	bne.n	8009c7a <__gethex+0x126>
 8009bfc:	7873      	ldrb	r3, [r6, #1]
 8009bfe:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c00:	d033      	beq.n	8009c6a <__gethex+0x116>
 8009c02:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c04:	d034      	beq.n	8009c70 <__gethex+0x11c>
 8009c06:	2400      	movs	r4, #0
 8009c08:	1c71      	adds	r1, r6, #1
 8009c0a:	7808      	ldrb	r0, [r1, #0]
 8009c0c:	f7ff ff8d 	bl	8009b2a <__hexdig_fun>
 8009c10:	1e43      	subs	r3, r0, #1
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b18      	cmp	r3, #24
 8009c16:	d830      	bhi.n	8009c7a <__gethex+0x126>
 8009c18:	f1a0 0210 	sub.w	r2, r0, #16
 8009c1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c20:	f7ff ff83 	bl	8009b2a <__hexdig_fun>
 8009c24:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c28:	fa5f fc8c 	uxtb.w	ip, ip
 8009c2c:	f1bc 0f18 	cmp.w	ip, #24
 8009c30:	f04f 030a 	mov.w	r3, #10
 8009c34:	d91e      	bls.n	8009c74 <__gethex+0x120>
 8009c36:	b104      	cbz	r4, 8009c3a <__gethex+0xe6>
 8009c38:	4252      	negs	r2, r2
 8009c3a:	4417      	add	r7, r2
 8009c3c:	f8ca 1000 	str.w	r1, [sl]
 8009c40:	b1ed      	cbz	r5, 8009c7e <__gethex+0x12a>
 8009c42:	f1bb 0f00 	cmp.w	fp, #0
 8009c46:	bf0c      	ite	eq
 8009c48:	2506      	moveq	r5, #6
 8009c4a:	2500      	movne	r5, #0
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	b005      	add	sp, #20
 8009c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c54:	2500      	movs	r5, #0
 8009c56:	462c      	mov	r4, r5
 8009c58:	e7b0      	b.n	8009bbc <__gethex+0x68>
 8009c5a:	2c00      	cmp	r4, #0
 8009c5c:	d1c7      	bne.n	8009bee <__gethex+0x9a>
 8009c5e:	4627      	mov	r7, r4
 8009c60:	e7c7      	b.n	8009bf2 <__gethex+0x9e>
 8009c62:	464e      	mov	r6, r9
 8009c64:	462f      	mov	r7, r5
 8009c66:	2501      	movs	r5, #1
 8009c68:	e7c3      	b.n	8009bf2 <__gethex+0x9e>
 8009c6a:	2400      	movs	r4, #0
 8009c6c:	1cb1      	adds	r1, r6, #2
 8009c6e:	e7cc      	b.n	8009c0a <__gethex+0xb6>
 8009c70:	2401      	movs	r4, #1
 8009c72:	e7fb      	b.n	8009c6c <__gethex+0x118>
 8009c74:	fb03 0002 	mla	r0, r3, r2, r0
 8009c78:	e7ce      	b.n	8009c18 <__gethex+0xc4>
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	e7de      	b.n	8009c3c <__gethex+0xe8>
 8009c7e:	4629      	mov	r1, r5
 8009c80:	eba6 0309 	sub.w	r3, r6, r9
 8009c84:	3b01      	subs	r3, #1
 8009c86:	2b07      	cmp	r3, #7
 8009c88:	dc0a      	bgt.n	8009ca0 <__gethex+0x14c>
 8009c8a:	9801      	ldr	r0, [sp, #4]
 8009c8c:	f7fe f9de 	bl	800804c <_Balloc>
 8009c90:	4604      	mov	r4, r0
 8009c92:	b940      	cbnz	r0, 8009ca6 <__gethex+0x152>
 8009c94:	4602      	mov	r2, r0
 8009c96:	21e4      	movs	r1, #228	@ 0xe4
 8009c98:	4b5b      	ldr	r3, [pc, #364]	@ (8009e08 <__gethex+0x2b4>)
 8009c9a:	485c      	ldr	r0, [pc, #368]	@ (8009e0c <__gethex+0x2b8>)
 8009c9c:	f7ff fec0 	bl	8009a20 <__assert_func>
 8009ca0:	3101      	adds	r1, #1
 8009ca2:	105b      	asrs	r3, r3, #1
 8009ca4:	e7ef      	b.n	8009c86 <__gethex+0x132>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f100 0a14 	add.w	sl, r0, #20
 8009cac:	4655      	mov	r5, sl
 8009cae:	469b      	mov	fp, r3
 8009cb0:	45b1      	cmp	r9, r6
 8009cb2:	d337      	bcc.n	8009d24 <__gethex+0x1d0>
 8009cb4:	f845 bb04 	str.w	fp, [r5], #4
 8009cb8:	eba5 050a 	sub.w	r5, r5, sl
 8009cbc:	10ad      	asrs	r5, r5, #2
 8009cbe:	6125      	str	r5, [r4, #16]
 8009cc0:	4658      	mov	r0, fp
 8009cc2:	f7fe fab5 	bl	8008230 <__hi0bits>
 8009cc6:	016d      	lsls	r5, r5, #5
 8009cc8:	f8d8 6000 	ldr.w	r6, [r8]
 8009ccc:	1a2d      	subs	r5, r5, r0
 8009cce:	42b5      	cmp	r5, r6
 8009cd0:	dd54      	ble.n	8009d7c <__gethex+0x228>
 8009cd2:	1bad      	subs	r5, r5, r6
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7fe fe3d 	bl	8008956 <__any_on>
 8009cdc:	4681      	mov	r9, r0
 8009cde:	b178      	cbz	r0, 8009d00 <__gethex+0x1ac>
 8009ce0:	f04f 0901 	mov.w	r9, #1
 8009ce4:	1e6b      	subs	r3, r5, #1
 8009ce6:	1159      	asrs	r1, r3, #5
 8009ce8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009cec:	f003 021f 	and.w	r2, r3, #31
 8009cf0:	fa09 f202 	lsl.w	r2, r9, r2
 8009cf4:	420a      	tst	r2, r1
 8009cf6:	d003      	beq.n	8009d00 <__gethex+0x1ac>
 8009cf8:	454b      	cmp	r3, r9
 8009cfa:	dc36      	bgt.n	8009d6a <__gethex+0x216>
 8009cfc:	f04f 0902 	mov.w	r9, #2
 8009d00:	4629      	mov	r1, r5
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7ff febe 	bl	8009a84 <rshift>
 8009d08:	442f      	add	r7, r5
 8009d0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d0e:	42bb      	cmp	r3, r7
 8009d10:	da42      	bge.n	8009d98 <__gethex+0x244>
 8009d12:	4621      	mov	r1, r4
 8009d14:	9801      	ldr	r0, [sp, #4]
 8009d16:	f7fe f9d9 	bl	80080cc <_Bfree>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d1e:	25a3      	movs	r5, #163	@ 0xa3
 8009d20:	6013      	str	r3, [r2, #0]
 8009d22:	e793      	b.n	8009c4c <__gethex+0xf8>
 8009d24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009d28:	2a2e      	cmp	r2, #46	@ 0x2e
 8009d2a:	d012      	beq.n	8009d52 <__gethex+0x1fe>
 8009d2c:	2b20      	cmp	r3, #32
 8009d2e:	d104      	bne.n	8009d3a <__gethex+0x1e6>
 8009d30:	f845 bb04 	str.w	fp, [r5], #4
 8009d34:	f04f 0b00 	mov.w	fp, #0
 8009d38:	465b      	mov	r3, fp
 8009d3a:	7830      	ldrb	r0, [r6, #0]
 8009d3c:	9303      	str	r3, [sp, #12]
 8009d3e:	f7ff fef4 	bl	8009b2a <__hexdig_fun>
 8009d42:	9b03      	ldr	r3, [sp, #12]
 8009d44:	f000 000f 	and.w	r0, r0, #15
 8009d48:	4098      	lsls	r0, r3
 8009d4a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009d4e:	3304      	adds	r3, #4
 8009d50:	e7ae      	b.n	8009cb0 <__gethex+0x15c>
 8009d52:	45b1      	cmp	r9, r6
 8009d54:	d8ea      	bhi.n	8009d2c <__gethex+0x1d8>
 8009d56:	2201      	movs	r2, #1
 8009d58:	4630      	mov	r0, r6
 8009d5a:	492a      	ldr	r1, [pc, #168]	@ (8009e04 <__gethex+0x2b0>)
 8009d5c:	9303      	str	r3, [sp, #12]
 8009d5e:	f7ff fe37 	bl	80099d0 <strncmp>
 8009d62:	9b03      	ldr	r3, [sp, #12]
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d1e1      	bne.n	8009d2c <__gethex+0x1d8>
 8009d68:	e7a2      	b.n	8009cb0 <__gethex+0x15c>
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	1ea9      	subs	r1, r5, #2
 8009d6e:	f7fe fdf2 	bl	8008956 <__any_on>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d0c2      	beq.n	8009cfc <__gethex+0x1a8>
 8009d76:	f04f 0903 	mov.w	r9, #3
 8009d7a:	e7c1      	b.n	8009d00 <__gethex+0x1ac>
 8009d7c:	da09      	bge.n	8009d92 <__gethex+0x23e>
 8009d7e:	1b75      	subs	r5, r6, r5
 8009d80:	4621      	mov	r1, r4
 8009d82:	462a      	mov	r2, r5
 8009d84:	9801      	ldr	r0, [sp, #4]
 8009d86:	f7fe fbb7 	bl	80084f8 <__lshift>
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	1b7f      	subs	r7, r7, r5
 8009d8e:	f100 0a14 	add.w	sl, r0, #20
 8009d92:	f04f 0900 	mov.w	r9, #0
 8009d96:	e7b8      	b.n	8009d0a <__gethex+0x1b6>
 8009d98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d9c:	42bd      	cmp	r5, r7
 8009d9e:	dd6f      	ble.n	8009e80 <__gethex+0x32c>
 8009da0:	1bed      	subs	r5, r5, r7
 8009da2:	42ae      	cmp	r6, r5
 8009da4:	dc34      	bgt.n	8009e10 <__gethex+0x2bc>
 8009da6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d022      	beq.n	8009df4 <__gethex+0x2a0>
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d024      	beq.n	8009dfc <__gethex+0x2a8>
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d115      	bne.n	8009de2 <__gethex+0x28e>
 8009db6:	42ae      	cmp	r6, r5
 8009db8:	d113      	bne.n	8009de2 <__gethex+0x28e>
 8009dba:	2e01      	cmp	r6, #1
 8009dbc:	d10b      	bne.n	8009dd6 <__gethex+0x282>
 8009dbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009dc2:	9a02      	ldr	r2, [sp, #8]
 8009dc4:	2562      	movs	r5, #98	@ 0x62
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	2301      	movs	r3, #1
 8009dca:	6123      	str	r3, [r4, #16]
 8009dcc:	f8ca 3000 	str.w	r3, [sl]
 8009dd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dd2:	601c      	str	r4, [r3, #0]
 8009dd4:	e73a      	b.n	8009c4c <__gethex+0xf8>
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	1e71      	subs	r1, r6, #1
 8009dda:	f7fe fdbc 	bl	8008956 <__any_on>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d1ed      	bne.n	8009dbe <__gethex+0x26a>
 8009de2:	4621      	mov	r1, r4
 8009de4:	9801      	ldr	r0, [sp, #4]
 8009de6:	f7fe f971 	bl	80080cc <_Bfree>
 8009dea:	2300      	movs	r3, #0
 8009dec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dee:	2550      	movs	r5, #80	@ 0x50
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	e72b      	b.n	8009c4c <__gethex+0xf8>
 8009df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1f3      	bne.n	8009de2 <__gethex+0x28e>
 8009dfa:	e7e0      	b.n	8009dbe <__gethex+0x26a>
 8009dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1dd      	bne.n	8009dbe <__gethex+0x26a>
 8009e02:	e7ee      	b.n	8009de2 <__gethex+0x28e>
 8009e04:	0800ba30 	.word	0x0800ba30
 8009e08:	0800b8c4 	.word	0x0800b8c4
 8009e0c:	0800badd 	.word	0x0800badd
 8009e10:	1e6f      	subs	r7, r5, #1
 8009e12:	f1b9 0f00 	cmp.w	r9, #0
 8009e16:	d130      	bne.n	8009e7a <__gethex+0x326>
 8009e18:	b127      	cbz	r7, 8009e24 <__gethex+0x2d0>
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f7fe fd9a 	bl	8008956 <__any_on>
 8009e22:	4681      	mov	r9, r0
 8009e24:	2301      	movs	r3, #1
 8009e26:	4629      	mov	r1, r5
 8009e28:	1b76      	subs	r6, r6, r5
 8009e2a:	2502      	movs	r5, #2
 8009e2c:	117a      	asrs	r2, r7, #5
 8009e2e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e32:	f007 071f 	and.w	r7, r7, #31
 8009e36:	40bb      	lsls	r3, r7
 8009e38:	4213      	tst	r3, r2
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	bf18      	it	ne
 8009e3e:	f049 0902 	orrne.w	r9, r9, #2
 8009e42:	f7ff fe1f 	bl	8009a84 <rshift>
 8009e46:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009e4a:	f1b9 0f00 	cmp.w	r9, #0
 8009e4e:	d047      	beq.n	8009ee0 <__gethex+0x38c>
 8009e50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d015      	beq.n	8009e84 <__gethex+0x330>
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d017      	beq.n	8009e8c <__gethex+0x338>
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d109      	bne.n	8009e74 <__gethex+0x320>
 8009e60:	f019 0f02 	tst.w	r9, #2
 8009e64:	d006      	beq.n	8009e74 <__gethex+0x320>
 8009e66:	f8da 3000 	ldr.w	r3, [sl]
 8009e6a:	ea49 0903 	orr.w	r9, r9, r3
 8009e6e:	f019 0f01 	tst.w	r9, #1
 8009e72:	d10e      	bne.n	8009e92 <__gethex+0x33e>
 8009e74:	f045 0510 	orr.w	r5, r5, #16
 8009e78:	e032      	b.n	8009ee0 <__gethex+0x38c>
 8009e7a:	f04f 0901 	mov.w	r9, #1
 8009e7e:	e7d1      	b.n	8009e24 <__gethex+0x2d0>
 8009e80:	2501      	movs	r5, #1
 8009e82:	e7e2      	b.n	8009e4a <__gethex+0x2f6>
 8009e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e86:	f1c3 0301 	rsb	r3, r3, #1
 8009e8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0f0      	beq.n	8009e74 <__gethex+0x320>
 8009e92:	f04f 0c00 	mov.w	ip, #0
 8009e96:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e9a:	f104 0314 	add.w	r3, r4, #20
 8009e9e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ea2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eac:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009eb0:	d01b      	beq.n	8009eea <__gethex+0x396>
 8009eb2:	3201      	adds	r2, #1
 8009eb4:	6002      	str	r2, [r0, #0]
 8009eb6:	2d02      	cmp	r5, #2
 8009eb8:	f104 0314 	add.w	r3, r4, #20
 8009ebc:	d13c      	bne.n	8009f38 <__gethex+0x3e4>
 8009ebe:	f8d8 2000 	ldr.w	r2, [r8]
 8009ec2:	3a01      	subs	r2, #1
 8009ec4:	42b2      	cmp	r2, r6
 8009ec6:	d109      	bne.n	8009edc <__gethex+0x388>
 8009ec8:	2201      	movs	r2, #1
 8009eca:	1171      	asrs	r1, r6, #5
 8009ecc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ed0:	f006 061f 	and.w	r6, r6, #31
 8009ed4:	fa02 f606 	lsl.w	r6, r2, r6
 8009ed8:	421e      	tst	r6, r3
 8009eda:	d13a      	bne.n	8009f52 <__gethex+0x3fe>
 8009edc:	f045 0520 	orr.w	r5, r5, #32
 8009ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ee2:	601c      	str	r4, [r3, #0]
 8009ee4:	9b02      	ldr	r3, [sp, #8]
 8009ee6:	601f      	str	r7, [r3, #0]
 8009ee8:	e6b0      	b.n	8009c4c <__gethex+0xf8>
 8009eea:	4299      	cmp	r1, r3
 8009eec:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ef0:	d8d9      	bhi.n	8009ea6 <__gethex+0x352>
 8009ef2:	68a3      	ldr	r3, [r4, #8]
 8009ef4:	459b      	cmp	fp, r3
 8009ef6:	db17      	blt.n	8009f28 <__gethex+0x3d4>
 8009ef8:	6861      	ldr	r1, [r4, #4]
 8009efa:	9801      	ldr	r0, [sp, #4]
 8009efc:	3101      	adds	r1, #1
 8009efe:	f7fe f8a5 	bl	800804c <_Balloc>
 8009f02:	4681      	mov	r9, r0
 8009f04:	b918      	cbnz	r0, 8009f0e <__gethex+0x3ba>
 8009f06:	4602      	mov	r2, r0
 8009f08:	2184      	movs	r1, #132	@ 0x84
 8009f0a:	4b19      	ldr	r3, [pc, #100]	@ (8009f70 <__gethex+0x41c>)
 8009f0c:	e6c5      	b.n	8009c9a <__gethex+0x146>
 8009f0e:	6922      	ldr	r2, [r4, #16]
 8009f10:	f104 010c 	add.w	r1, r4, #12
 8009f14:	3202      	adds	r2, #2
 8009f16:	0092      	lsls	r2, r2, #2
 8009f18:	300c      	adds	r0, #12
 8009f1a:	f7fd f936 	bl	800718a <memcpy>
 8009f1e:	4621      	mov	r1, r4
 8009f20:	9801      	ldr	r0, [sp, #4]
 8009f22:	f7fe f8d3 	bl	80080cc <_Bfree>
 8009f26:	464c      	mov	r4, r9
 8009f28:	6923      	ldr	r3, [r4, #16]
 8009f2a:	1c5a      	adds	r2, r3, #1
 8009f2c:	6122      	str	r2, [r4, #16]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f34:	615a      	str	r2, [r3, #20]
 8009f36:	e7be      	b.n	8009eb6 <__gethex+0x362>
 8009f38:	6922      	ldr	r2, [r4, #16]
 8009f3a:	455a      	cmp	r2, fp
 8009f3c:	dd0b      	ble.n	8009f56 <__gethex+0x402>
 8009f3e:	2101      	movs	r1, #1
 8009f40:	4620      	mov	r0, r4
 8009f42:	f7ff fd9f 	bl	8009a84 <rshift>
 8009f46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f4a:	3701      	adds	r7, #1
 8009f4c:	42bb      	cmp	r3, r7
 8009f4e:	f6ff aee0 	blt.w	8009d12 <__gethex+0x1be>
 8009f52:	2501      	movs	r5, #1
 8009f54:	e7c2      	b.n	8009edc <__gethex+0x388>
 8009f56:	f016 061f 	ands.w	r6, r6, #31
 8009f5a:	d0fa      	beq.n	8009f52 <__gethex+0x3fe>
 8009f5c:	4453      	add	r3, sl
 8009f5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f62:	f7fe f965 	bl	8008230 <__hi0bits>
 8009f66:	f1c6 0620 	rsb	r6, r6, #32
 8009f6a:	42b0      	cmp	r0, r6
 8009f6c:	dbe7      	blt.n	8009f3e <__gethex+0x3ea>
 8009f6e:	e7f0      	b.n	8009f52 <__gethex+0x3fe>
 8009f70:	0800b8c4 	.word	0x0800b8c4

08009f74 <L_shift>:
 8009f74:	f1c2 0208 	rsb	r2, r2, #8
 8009f78:	0092      	lsls	r2, r2, #2
 8009f7a:	b570      	push	{r4, r5, r6, lr}
 8009f7c:	f1c2 0620 	rsb	r6, r2, #32
 8009f80:	6843      	ldr	r3, [r0, #4]
 8009f82:	6804      	ldr	r4, [r0, #0]
 8009f84:	fa03 f506 	lsl.w	r5, r3, r6
 8009f88:	432c      	orrs	r4, r5
 8009f8a:	40d3      	lsrs	r3, r2
 8009f8c:	6004      	str	r4, [r0, #0]
 8009f8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f92:	4288      	cmp	r0, r1
 8009f94:	d3f4      	bcc.n	8009f80 <L_shift+0xc>
 8009f96:	bd70      	pop	{r4, r5, r6, pc}

08009f98 <__match>:
 8009f98:	b530      	push	{r4, r5, lr}
 8009f9a:	6803      	ldr	r3, [r0, #0]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fa2:	b914      	cbnz	r4, 8009faa <__match+0x12>
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	bd30      	pop	{r4, r5, pc}
 8009faa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009fb2:	2d19      	cmp	r5, #25
 8009fb4:	bf98      	it	ls
 8009fb6:	3220      	addls	r2, #32
 8009fb8:	42a2      	cmp	r2, r4
 8009fba:	d0f0      	beq.n	8009f9e <__match+0x6>
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	e7f3      	b.n	8009fa8 <__match+0x10>

08009fc0 <__hexnan>:
 8009fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	2500      	movs	r5, #0
 8009fc6:	680b      	ldr	r3, [r1, #0]
 8009fc8:	4682      	mov	sl, r0
 8009fca:	115e      	asrs	r6, r3, #5
 8009fcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009fd0:	f013 031f 	ands.w	r3, r3, #31
 8009fd4:	bf18      	it	ne
 8009fd6:	3604      	addne	r6, #4
 8009fd8:	1f37      	subs	r7, r6, #4
 8009fda:	4690      	mov	r8, r2
 8009fdc:	46b9      	mov	r9, r7
 8009fde:	463c      	mov	r4, r7
 8009fe0:	46ab      	mov	fp, r5
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	6801      	ldr	r1, [r0, #0]
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fec:	9502      	str	r5, [sp, #8]
 8009fee:	784a      	ldrb	r2, [r1, #1]
 8009ff0:	1c4b      	adds	r3, r1, #1
 8009ff2:	9303      	str	r3, [sp, #12]
 8009ff4:	b342      	cbz	r2, 800a048 <__hexnan+0x88>
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	9105      	str	r1, [sp, #20]
 8009ffa:	9204      	str	r2, [sp, #16]
 8009ffc:	f7ff fd95 	bl	8009b2a <__hexdig_fun>
 800a000:	2800      	cmp	r0, #0
 800a002:	d151      	bne.n	800a0a8 <__hexnan+0xe8>
 800a004:	9a04      	ldr	r2, [sp, #16]
 800a006:	9905      	ldr	r1, [sp, #20]
 800a008:	2a20      	cmp	r2, #32
 800a00a:	d818      	bhi.n	800a03e <__hexnan+0x7e>
 800a00c:	9b02      	ldr	r3, [sp, #8]
 800a00e:	459b      	cmp	fp, r3
 800a010:	dd13      	ble.n	800a03a <__hexnan+0x7a>
 800a012:	454c      	cmp	r4, r9
 800a014:	d206      	bcs.n	800a024 <__hexnan+0x64>
 800a016:	2d07      	cmp	r5, #7
 800a018:	dc04      	bgt.n	800a024 <__hexnan+0x64>
 800a01a:	462a      	mov	r2, r5
 800a01c:	4649      	mov	r1, r9
 800a01e:	4620      	mov	r0, r4
 800a020:	f7ff ffa8 	bl	8009f74 <L_shift>
 800a024:	4544      	cmp	r4, r8
 800a026:	d952      	bls.n	800a0ce <__hexnan+0x10e>
 800a028:	2300      	movs	r3, #0
 800a02a:	f1a4 0904 	sub.w	r9, r4, #4
 800a02e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a032:	461d      	mov	r5, r3
 800a034:	464c      	mov	r4, r9
 800a036:	f8cd b008 	str.w	fp, [sp, #8]
 800a03a:	9903      	ldr	r1, [sp, #12]
 800a03c:	e7d7      	b.n	8009fee <__hexnan+0x2e>
 800a03e:	2a29      	cmp	r2, #41	@ 0x29
 800a040:	d157      	bne.n	800a0f2 <__hexnan+0x132>
 800a042:	3102      	adds	r1, #2
 800a044:	f8ca 1000 	str.w	r1, [sl]
 800a048:	f1bb 0f00 	cmp.w	fp, #0
 800a04c:	d051      	beq.n	800a0f2 <__hexnan+0x132>
 800a04e:	454c      	cmp	r4, r9
 800a050:	d206      	bcs.n	800a060 <__hexnan+0xa0>
 800a052:	2d07      	cmp	r5, #7
 800a054:	dc04      	bgt.n	800a060 <__hexnan+0xa0>
 800a056:	462a      	mov	r2, r5
 800a058:	4649      	mov	r1, r9
 800a05a:	4620      	mov	r0, r4
 800a05c:	f7ff ff8a 	bl	8009f74 <L_shift>
 800a060:	4544      	cmp	r4, r8
 800a062:	d936      	bls.n	800a0d2 <__hexnan+0x112>
 800a064:	4623      	mov	r3, r4
 800a066:	f1a8 0204 	sub.w	r2, r8, #4
 800a06a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a06e:	429f      	cmp	r7, r3
 800a070:	f842 1f04 	str.w	r1, [r2, #4]!
 800a074:	d2f9      	bcs.n	800a06a <__hexnan+0xaa>
 800a076:	1b3b      	subs	r3, r7, r4
 800a078:	f023 0303 	bic.w	r3, r3, #3
 800a07c:	3304      	adds	r3, #4
 800a07e:	3401      	adds	r4, #1
 800a080:	3e03      	subs	r6, #3
 800a082:	42b4      	cmp	r4, r6
 800a084:	bf88      	it	hi
 800a086:	2304      	movhi	r3, #4
 800a088:	2200      	movs	r2, #0
 800a08a:	4443      	add	r3, r8
 800a08c:	f843 2b04 	str.w	r2, [r3], #4
 800a090:	429f      	cmp	r7, r3
 800a092:	d2fb      	bcs.n	800a08c <__hexnan+0xcc>
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	b91b      	cbnz	r3, 800a0a0 <__hexnan+0xe0>
 800a098:	4547      	cmp	r7, r8
 800a09a:	d128      	bne.n	800a0ee <__hexnan+0x12e>
 800a09c:	2301      	movs	r3, #1
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	2005      	movs	r0, #5
 800a0a2:	b007      	add	sp, #28
 800a0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a8:	3501      	adds	r5, #1
 800a0aa:	2d08      	cmp	r5, #8
 800a0ac:	f10b 0b01 	add.w	fp, fp, #1
 800a0b0:	dd06      	ble.n	800a0c0 <__hexnan+0x100>
 800a0b2:	4544      	cmp	r4, r8
 800a0b4:	d9c1      	bls.n	800a03a <__hexnan+0x7a>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	2501      	movs	r5, #1
 800a0ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0be:	3c04      	subs	r4, #4
 800a0c0:	6822      	ldr	r2, [r4, #0]
 800a0c2:	f000 000f 	and.w	r0, r0, #15
 800a0c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a0ca:	6020      	str	r0, [r4, #0]
 800a0cc:	e7b5      	b.n	800a03a <__hexnan+0x7a>
 800a0ce:	2508      	movs	r5, #8
 800a0d0:	e7b3      	b.n	800a03a <__hexnan+0x7a>
 800a0d2:	9b01      	ldr	r3, [sp, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d0dd      	beq.n	800a094 <__hexnan+0xd4>
 800a0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0dc:	f1c3 0320 	rsb	r3, r3, #32
 800a0e0:	40da      	lsrs	r2, r3
 800a0e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a0ec:	e7d2      	b.n	800a094 <__hexnan+0xd4>
 800a0ee:	3f04      	subs	r7, #4
 800a0f0:	e7d0      	b.n	800a094 <__hexnan+0xd4>
 800a0f2:	2004      	movs	r0, #4
 800a0f4:	e7d5      	b.n	800a0a2 <__hexnan+0xe2>

0800a0f6 <__ascii_mbtowc>:
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	b901      	cbnz	r1, 800a0fc <__ascii_mbtowc+0x6>
 800a0fa:	a901      	add	r1, sp, #4
 800a0fc:	b142      	cbz	r2, 800a110 <__ascii_mbtowc+0x1a>
 800a0fe:	b14b      	cbz	r3, 800a114 <__ascii_mbtowc+0x1e>
 800a100:	7813      	ldrb	r3, [r2, #0]
 800a102:	600b      	str	r3, [r1, #0]
 800a104:	7812      	ldrb	r2, [r2, #0]
 800a106:	1e10      	subs	r0, r2, #0
 800a108:	bf18      	it	ne
 800a10a:	2001      	movne	r0, #1
 800a10c:	b002      	add	sp, #8
 800a10e:	4770      	bx	lr
 800a110:	4610      	mov	r0, r2
 800a112:	e7fb      	b.n	800a10c <__ascii_mbtowc+0x16>
 800a114:	f06f 0001 	mvn.w	r0, #1
 800a118:	e7f8      	b.n	800a10c <__ascii_mbtowc+0x16>

0800a11a <_realloc_r>:
 800a11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11e:	4680      	mov	r8, r0
 800a120:	4615      	mov	r5, r2
 800a122:	460c      	mov	r4, r1
 800a124:	b921      	cbnz	r1, 800a130 <_realloc_r+0x16>
 800a126:	4611      	mov	r1, r2
 800a128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a12c:	f7fd bf02 	b.w	8007f34 <_malloc_r>
 800a130:	b92a      	cbnz	r2, 800a13e <_realloc_r+0x24>
 800a132:	f7fd fe8d 	bl	8007e50 <_free_r>
 800a136:	2400      	movs	r4, #0
 800a138:	4620      	mov	r0, r4
 800a13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a13e:	f000 f840 	bl	800a1c2 <_malloc_usable_size_r>
 800a142:	4285      	cmp	r5, r0
 800a144:	4606      	mov	r6, r0
 800a146:	d802      	bhi.n	800a14e <_realloc_r+0x34>
 800a148:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a14c:	d8f4      	bhi.n	800a138 <_realloc_r+0x1e>
 800a14e:	4629      	mov	r1, r5
 800a150:	4640      	mov	r0, r8
 800a152:	f7fd feef 	bl	8007f34 <_malloc_r>
 800a156:	4607      	mov	r7, r0
 800a158:	2800      	cmp	r0, #0
 800a15a:	d0ec      	beq.n	800a136 <_realloc_r+0x1c>
 800a15c:	42b5      	cmp	r5, r6
 800a15e:	462a      	mov	r2, r5
 800a160:	4621      	mov	r1, r4
 800a162:	bf28      	it	cs
 800a164:	4632      	movcs	r2, r6
 800a166:	f7fd f810 	bl	800718a <memcpy>
 800a16a:	4621      	mov	r1, r4
 800a16c:	4640      	mov	r0, r8
 800a16e:	f7fd fe6f 	bl	8007e50 <_free_r>
 800a172:	463c      	mov	r4, r7
 800a174:	e7e0      	b.n	800a138 <_realloc_r+0x1e>

0800a176 <__ascii_wctomb>:
 800a176:	4603      	mov	r3, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	b141      	cbz	r1, 800a18e <__ascii_wctomb+0x18>
 800a17c:	2aff      	cmp	r2, #255	@ 0xff
 800a17e:	d904      	bls.n	800a18a <__ascii_wctomb+0x14>
 800a180:	228a      	movs	r2, #138	@ 0x8a
 800a182:	f04f 30ff 	mov.w	r0, #4294967295
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	4770      	bx	lr
 800a18a:	2001      	movs	r0, #1
 800a18c:	700a      	strb	r2, [r1, #0]
 800a18e:	4770      	bx	lr

0800a190 <fiprintf>:
 800a190:	b40e      	push	{r1, r2, r3}
 800a192:	b503      	push	{r0, r1, lr}
 800a194:	4601      	mov	r1, r0
 800a196:	ab03      	add	r3, sp, #12
 800a198:	4805      	ldr	r0, [pc, #20]	@ (800a1b0 <fiprintf+0x20>)
 800a19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a19e:	6800      	ldr	r0, [r0, #0]
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	f000 f83d 	bl	800a220 <_vfiprintf_r>
 800a1a6:	b002      	add	sp, #8
 800a1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1ac:	b003      	add	sp, #12
 800a1ae:	4770      	bx	lr
 800a1b0:	20000020 	.word	0x20000020

0800a1b4 <abort>:
 800a1b4:	2006      	movs	r0, #6
 800a1b6:	b508      	push	{r3, lr}
 800a1b8:	f000 fa06 	bl	800a5c8 <raise>
 800a1bc:	2001      	movs	r0, #1
 800a1be:	f7f8 fd6e 	bl	8002c9e <_exit>

0800a1c2 <_malloc_usable_size_r>:
 800a1c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c6:	1f18      	subs	r0, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bfbc      	itt	lt
 800a1cc:	580b      	ldrlt	r3, [r1, r0]
 800a1ce:	18c0      	addlt	r0, r0, r3
 800a1d0:	4770      	bx	lr

0800a1d2 <__sfputc_r>:
 800a1d2:	6893      	ldr	r3, [r2, #8]
 800a1d4:	b410      	push	{r4}
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	6093      	str	r3, [r2, #8]
 800a1dc:	da07      	bge.n	800a1ee <__sfputc_r+0x1c>
 800a1de:	6994      	ldr	r4, [r2, #24]
 800a1e0:	42a3      	cmp	r3, r4
 800a1e2:	db01      	blt.n	800a1e8 <__sfputc_r+0x16>
 800a1e4:	290a      	cmp	r1, #10
 800a1e6:	d102      	bne.n	800a1ee <__sfputc_r+0x1c>
 800a1e8:	bc10      	pop	{r4}
 800a1ea:	f000 b931 	b.w	800a450 <__swbuf_r>
 800a1ee:	6813      	ldr	r3, [r2, #0]
 800a1f0:	1c58      	adds	r0, r3, #1
 800a1f2:	6010      	str	r0, [r2, #0]
 800a1f4:	7019      	strb	r1, [r3, #0]
 800a1f6:	4608      	mov	r0, r1
 800a1f8:	bc10      	pop	{r4}
 800a1fa:	4770      	bx	lr

0800a1fc <__sfputs_r>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	4606      	mov	r6, r0
 800a200:	460f      	mov	r7, r1
 800a202:	4614      	mov	r4, r2
 800a204:	18d5      	adds	r5, r2, r3
 800a206:	42ac      	cmp	r4, r5
 800a208:	d101      	bne.n	800a20e <__sfputs_r+0x12>
 800a20a:	2000      	movs	r0, #0
 800a20c:	e007      	b.n	800a21e <__sfputs_r+0x22>
 800a20e:	463a      	mov	r2, r7
 800a210:	4630      	mov	r0, r6
 800a212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a216:	f7ff ffdc 	bl	800a1d2 <__sfputc_r>
 800a21a:	1c43      	adds	r3, r0, #1
 800a21c:	d1f3      	bne.n	800a206 <__sfputs_r+0xa>
 800a21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a220 <_vfiprintf_r>:
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	460d      	mov	r5, r1
 800a226:	4614      	mov	r4, r2
 800a228:	4698      	mov	r8, r3
 800a22a:	4606      	mov	r6, r0
 800a22c:	b09d      	sub	sp, #116	@ 0x74
 800a22e:	b118      	cbz	r0, 800a238 <_vfiprintf_r+0x18>
 800a230:	6a03      	ldr	r3, [r0, #32]
 800a232:	b90b      	cbnz	r3, 800a238 <_vfiprintf_r+0x18>
 800a234:	f7fc fe6c 	bl	8006f10 <__sinit>
 800a238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a23a:	07d9      	lsls	r1, r3, #31
 800a23c:	d405      	bmi.n	800a24a <_vfiprintf_r+0x2a>
 800a23e:	89ab      	ldrh	r3, [r5, #12]
 800a240:	059a      	lsls	r2, r3, #22
 800a242:	d402      	bmi.n	800a24a <_vfiprintf_r+0x2a>
 800a244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a246:	f7fc ff88 	bl	800715a <__retarget_lock_acquire_recursive>
 800a24a:	89ab      	ldrh	r3, [r5, #12]
 800a24c:	071b      	lsls	r3, r3, #28
 800a24e:	d501      	bpl.n	800a254 <_vfiprintf_r+0x34>
 800a250:	692b      	ldr	r3, [r5, #16]
 800a252:	b99b      	cbnz	r3, 800a27c <_vfiprintf_r+0x5c>
 800a254:	4629      	mov	r1, r5
 800a256:	4630      	mov	r0, r6
 800a258:	f000 f938 	bl	800a4cc <__swsetup_r>
 800a25c:	b170      	cbz	r0, 800a27c <_vfiprintf_r+0x5c>
 800a25e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a260:	07dc      	lsls	r4, r3, #31
 800a262:	d504      	bpl.n	800a26e <_vfiprintf_r+0x4e>
 800a264:	f04f 30ff 	mov.w	r0, #4294967295
 800a268:	b01d      	add	sp, #116	@ 0x74
 800a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26e:	89ab      	ldrh	r3, [r5, #12]
 800a270:	0598      	lsls	r0, r3, #22
 800a272:	d4f7      	bmi.n	800a264 <_vfiprintf_r+0x44>
 800a274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a276:	f7fc ff71 	bl	800715c <__retarget_lock_release_recursive>
 800a27a:	e7f3      	b.n	800a264 <_vfiprintf_r+0x44>
 800a27c:	2300      	movs	r3, #0
 800a27e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a280:	2320      	movs	r3, #32
 800a282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a286:	2330      	movs	r3, #48	@ 0x30
 800a288:	f04f 0901 	mov.w	r9, #1
 800a28c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a290:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a43c <_vfiprintf_r+0x21c>
 800a294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a298:	4623      	mov	r3, r4
 800a29a:	469a      	mov	sl, r3
 800a29c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2a0:	b10a      	cbz	r2, 800a2a6 <_vfiprintf_r+0x86>
 800a2a2:	2a25      	cmp	r2, #37	@ 0x25
 800a2a4:	d1f9      	bne.n	800a29a <_vfiprintf_r+0x7a>
 800a2a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a2aa:	d00b      	beq.n	800a2c4 <_vfiprintf_r+0xa4>
 800a2ac:	465b      	mov	r3, fp
 800a2ae:	4622      	mov	r2, r4
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f7ff ffa2 	bl	800a1fc <__sfputs_r>
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	f000 80a7 	beq.w	800a40c <_vfiprintf_r+0x1ec>
 800a2be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2c0:	445a      	add	r2, fp
 800a2c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 809f 	beq.w	800a40c <_vfiprintf_r+0x1ec>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2d8:	f10a 0a01 	add.w	sl, sl, #1
 800a2dc:	9304      	str	r3, [sp, #16]
 800a2de:	9307      	str	r3, [sp, #28]
 800a2e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2e6:	4654      	mov	r4, sl
 800a2e8:	2205      	movs	r2, #5
 800a2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ee:	4853      	ldr	r0, [pc, #332]	@ (800a43c <_vfiprintf_r+0x21c>)
 800a2f0:	f7fc ff3d 	bl	800716e <memchr>
 800a2f4:	9a04      	ldr	r2, [sp, #16]
 800a2f6:	b9d8      	cbnz	r0, 800a330 <_vfiprintf_r+0x110>
 800a2f8:	06d1      	lsls	r1, r2, #27
 800a2fa:	bf44      	itt	mi
 800a2fc:	2320      	movmi	r3, #32
 800a2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a302:	0713      	lsls	r3, r2, #28
 800a304:	bf44      	itt	mi
 800a306:	232b      	movmi	r3, #43	@ 0x2b
 800a308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a30c:	f89a 3000 	ldrb.w	r3, [sl]
 800a310:	2b2a      	cmp	r3, #42	@ 0x2a
 800a312:	d015      	beq.n	800a340 <_vfiprintf_r+0x120>
 800a314:	4654      	mov	r4, sl
 800a316:	2000      	movs	r0, #0
 800a318:	f04f 0c0a 	mov.w	ip, #10
 800a31c:	9a07      	ldr	r2, [sp, #28]
 800a31e:	4621      	mov	r1, r4
 800a320:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a324:	3b30      	subs	r3, #48	@ 0x30
 800a326:	2b09      	cmp	r3, #9
 800a328:	d94b      	bls.n	800a3c2 <_vfiprintf_r+0x1a2>
 800a32a:	b1b0      	cbz	r0, 800a35a <_vfiprintf_r+0x13a>
 800a32c:	9207      	str	r2, [sp, #28]
 800a32e:	e014      	b.n	800a35a <_vfiprintf_r+0x13a>
 800a330:	eba0 0308 	sub.w	r3, r0, r8
 800a334:	fa09 f303 	lsl.w	r3, r9, r3
 800a338:	4313      	orrs	r3, r2
 800a33a:	46a2      	mov	sl, r4
 800a33c:	9304      	str	r3, [sp, #16]
 800a33e:	e7d2      	b.n	800a2e6 <_vfiprintf_r+0xc6>
 800a340:	9b03      	ldr	r3, [sp, #12]
 800a342:	1d19      	adds	r1, r3, #4
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	9103      	str	r1, [sp, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	bfbb      	ittet	lt
 800a34c:	425b      	neglt	r3, r3
 800a34e:	f042 0202 	orrlt.w	r2, r2, #2
 800a352:	9307      	strge	r3, [sp, #28]
 800a354:	9307      	strlt	r3, [sp, #28]
 800a356:	bfb8      	it	lt
 800a358:	9204      	strlt	r2, [sp, #16]
 800a35a:	7823      	ldrb	r3, [r4, #0]
 800a35c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a35e:	d10a      	bne.n	800a376 <_vfiprintf_r+0x156>
 800a360:	7863      	ldrb	r3, [r4, #1]
 800a362:	2b2a      	cmp	r3, #42	@ 0x2a
 800a364:	d132      	bne.n	800a3cc <_vfiprintf_r+0x1ac>
 800a366:	9b03      	ldr	r3, [sp, #12]
 800a368:	3402      	adds	r4, #2
 800a36a:	1d1a      	adds	r2, r3, #4
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	9203      	str	r2, [sp, #12]
 800a370:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a374:	9305      	str	r3, [sp, #20]
 800a376:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a440 <_vfiprintf_r+0x220>
 800a37a:	2203      	movs	r2, #3
 800a37c:	4650      	mov	r0, sl
 800a37e:	7821      	ldrb	r1, [r4, #0]
 800a380:	f7fc fef5 	bl	800716e <memchr>
 800a384:	b138      	cbz	r0, 800a396 <_vfiprintf_r+0x176>
 800a386:	2240      	movs	r2, #64	@ 0x40
 800a388:	9b04      	ldr	r3, [sp, #16]
 800a38a:	eba0 000a 	sub.w	r0, r0, sl
 800a38e:	4082      	lsls	r2, r0
 800a390:	4313      	orrs	r3, r2
 800a392:	3401      	adds	r4, #1
 800a394:	9304      	str	r3, [sp, #16]
 800a396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39a:	2206      	movs	r2, #6
 800a39c:	4829      	ldr	r0, [pc, #164]	@ (800a444 <_vfiprintf_r+0x224>)
 800a39e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3a2:	f7fc fee4 	bl	800716e <memchr>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d03f      	beq.n	800a42a <_vfiprintf_r+0x20a>
 800a3aa:	4b27      	ldr	r3, [pc, #156]	@ (800a448 <_vfiprintf_r+0x228>)
 800a3ac:	bb1b      	cbnz	r3, 800a3f6 <_vfiprintf_r+0x1d6>
 800a3ae:	9b03      	ldr	r3, [sp, #12]
 800a3b0:	3307      	adds	r3, #7
 800a3b2:	f023 0307 	bic.w	r3, r3, #7
 800a3b6:	3308      	adds	r3, #8
 800a3b8:	9303      	str	r3, [sp, #12]
 800a3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3bc:	443b      	add	r3, r7
 800a3be:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3c0:	e76a      	b.n	800a298 <_vfiprintf_r+0x78>
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3ca:	e7a8      	b.n	800a31e <_vfiprintf_r+0xfe>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f04f 0c0a 	mov.w	ip, #10
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	3401      	adds	r4, #1
 800a3d6:	9305      	str	r3, [sp, #20]
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3de:	3a30      	subs	r2, #48	@ 0x30
 800a3e0:	2a09      	cmp	r2, #9
 800a3e2:	d903      	bls.n	800a3ec <_vfiprintf_r+0x1cc>
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d0c6      	beq.n	800a376 <_vfiprintf_r+0x156>
 800a3e8:	9105      	str	r1, [sp, #20]
 800a3ea:	e7c4      	b.n	800a376 <_vfiprintf_r+0x156>
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3f4:	e7f0      	b.n	800a3d8 <_vfiprintf_r+0x1b8>
 800a3f6:	ab03      	add	r3, sp, #12
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	462a      	mov	r2, r5
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	4b13      	ldr	r3, [pc, #76]	@ (800a44c <_vfiprintf_r+0x22c>)
 800a400:	a904      	add	r1, sp, #16
 800a402:	f7fb ff2b 	bl	800625c <_printf_float>
 800a406:	4607      	mov	r7, r0
 800a408:	1c78      	adds	r0, r7, #1
 800a40a:	d1d6      	bne.n	800a3ba <_vfiprintf_r+0x19a>
 800a40c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a40e:	07d9      	lsls	r1, r3, #31
 800a410:	d405      	bmi.n	800a41e <_vfiprintf_r+0x1fe>
 800a412:	89ab      	ldrh	r3, [r5, #12]
 800a414:	059a      	lsls	r2, r3, #22
 800a416:	d402      	bmi.n	800a41e <_vfiprintf_r+0x1fe>
 800a418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a41a:	f7fc fe9f 	bl	800715c <__retarget_lock_release_recursive>
 800a41e:	89ab      	ldrh	r3, [r5, #12]
 800a420:	065b      	lsls	r3, r3, #25
 800a422:	f53f af1f 	bmi.w	800a264 <_vfiprintf_r+0x44>
 800a426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a428:	e71e      	b.n	800a268 <_vfiprintf_r+0x48>
 800a42a:	ab03      	add	r3, sp, #12
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	462a      	mov	r2, r5
 800a430:	4630      	mov	r0, r6
 800a432:	4b06      	ldr	r3, [pc, #24]	@ (800a44c <_vfiprintf_r+0x22c>)
 800a434:	a904      	add	r1, sp, #16
 800a436:	f7fc f9af 	bl	8006798 <_printf_i>
 800a43a:	e7e4      	b.n	800a406 <_vfiprintf_r+0x1e6>
 800a43c:	0800ba88 	.word	0x0800ba88
 800a440:	0800ba8e 	.word	0x0800ba8e
 800a444:	0800ba92 	.word	0x0800ba92
 800a448:	0800625d 	.word	0x0800625d
 800a44c:	0800a1fd 	.word	0x0800a1fd

0800a450 <__swbuf_r>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	460e      	mov	r6, r1
 800a454:	4614      	mov	r4, r2
 800a456:	4605      	mov	r5, r0
 800a458:	b118      	cbz	r0, 800a462 <__swbuf_r+0x12>
 800a45a:	6a03      	ldr	r3, [r0, #32]
 800a45c:	b90b      	cbnz	r3, 800a462 <__swbuf_r+0x12>
 800a45e:	f7fc fd57 	bl	8006f10 <__sinit>
 800a462:	69a3      	ldr	r3, [r4, #24]
 800a464:	60a3      	str	r3, [r4, #8]
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	071a      	lsls	r2, r3, #28
 800a46a:	d501      	bpl.n	800a470 <__swbuf_r+0x20>
 800a46c:	6923      	ldr	r3, [r4, #16]
 800a46e:	b943      	cbnz	r3, 800a482 <__swbuf_r+0x32>
 800a470:	4621      	mov	r1, r4
 800a472:	4628      	mov	r0, r5
 800a474:	f000 f82a 	bl	800a4cc <__swsetup_r>
 800a478:	b118      	cbz	r0, 800a482 <__swbuf_r+0x32>
 800a47a:	f04f 37ff 	mov.w	r7, #4294967295
 800a47e:	4638      	mov	r0, r7
 800a480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	6922      	ldr	r2, [r4, #16]
 800a486:	b2f6      	uxtb	r6, r6
 800a488:	1a98      	subs	r0, r3, r2
 800a48a:	6963      	ldr	r3, [r4, #20]
 800a48c:	4637      	mov	r7, r6
 800a48e:	4283      	cmp	r3, r0
 800a490:	dc05      	bgt.n	800a49e <__swbuf_r+0x4e>
 800a492:	4621      	mov	r1, r4
 800a494:	4628      	mov	r0, r5
 800a496:	f7ff fa59 	bl	800994c <_fflush_r>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d1ed      	bne.n	800a47a <__swbuf_r+0x2a>
 800a49e:	68a3      	ldr	r3, [r4, #8]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	60a3      	str	r3, [r4, #8]
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	6022      	str	r2, [r4, #0]
 800a4aa:	701e      	strb	r6, [r3, #0]
 800a4ac:	6962      	ldr	r2, [r4, #20]
 800a4ae:	1c43      	adds	r3, r0, #1
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d004      	beq.n	800a4be <__swbuf_r+0x6e>
 800a4b4:	89a3      	ldrh	r3, [r4, #12]
 800a4b6:	07db      	lsls	r3, r3, #31
 800a4b8:	d5e1      	bpl.n	800a47e <__swbuf_r+0x2e>
 800a4ba:	2e0a      	cmp	r6, #10
 800a4bc:	d1df      	bne.n	800a47e <__swbuf_r+0x2e>
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	f7ff fa43 	bl	800994c <_fflush_r>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d0d9      	beq.n	800a47e <__swbuf_r+0x2e>
 800a4ca:	e7d6      	b.n	800a47a <__swbuf_r+0x2a>

0800a4cc <__swsetup_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	4b29      	ldr	r3, [pc, #164]	@ (800a574 <__swsetup_r+0xa8>)
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	b118      	cbz	r0, 800a4e0 <__swsetup_r+0x14>
 800a4d8:	6a03      	ldr	r3, [r0, #32]
 800a4da:	b90b      	cbnz	r3, 800a4e0 <__swsetup_r+0x14>
 800a4dc:	f7fc fd18 	bl	8006f10 <__sinit>
 800a4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e4:	0719      	lsls	r1, r3, #28
 800a4e6:	d422      	bmi.n	800a52e <__swsetup_r+0x62>
 800a4e8:	06da      	lsls	r2, r3, #27
 800a4ea:	d407      	bmi.n	800a4fc <__swsetup_r+0x30>
 800a4ec:	2209      	movs	r2, #9
 800a4ee:	602a      	str	r2, [r5, #0]
 800a4f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f8:	81a3      	strh	r3, [r4, #12]
 800a4fa:	e033      	b.n	800a564 <__swsetup_r+0x98>
 800a4fc:	0758      	lsls	r0, r3, #29
 800a4fe:	d512      	bpl.n	800a526 <__swsetup_r+0x5a>
 800a500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a502:	b141      	cbz	r1, 800a516 <__swsetup_r+0x4a>
 800a504:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a508:	4299      	cmp	r1, r3
 800a50a:	d002      	beq.n	800a512 <__swsetup_r+0x46>
 800a50c:	4628      	mov	r0, r5
 800a50e:	f7fd fc9f 	bl	8007e50 <_free_r>
 800a512:	2300      	movs	r3, #0
 800a514:	6363      	str	r3, [r4, #52]	@ 0x34
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a51c:	81a3      	strh	r3, [r4, #12]
 800a51e:	2300      	movs	r3, #0
 800a520:	6063      	str	r3, [r4, #4]
 800a522:	6923      	ldr	r3, [r4, #16]
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	89a3      	ldrh	r3, [r4, #12]
 800a528:	f043 0308 	orr.w	r3, r3, #8
 800a52c:	81a3      	strh	r3, [r4, #12]
 800a52e:	6923      	ldr	r3, [r4, #16]
 800a530:	b94b      	cbnz	r3, 800a546 <__swsetup_r+0x7a>
 800a532:	89a3      	ldrh	r3, [r4, #12]
 800a534:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a53c:	d003      	beq.n	800a546 <__swsetup_r+0x7a>
 800a53e:	4621      	mov	r1, r4
 800a540:	4628      	mov	r0, r5
 800a542:	f000 f882 	bl	800a64a <__smakebuf_r>
 800a546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a54a:	f013 0201 	ands.w	r2, r3, #1
 800a54e:	d00a      	beq.n	800a566 <__swsetup_r+0x9a>
 800a550:	2200      	movs	r2, #0
 800a552:	60a2      	str	r2, [r4, #8]
 800a554:	6962      	ldr	r2, [r4, #20]
 800a556:	4252      	negs	r2, r2
 800a558:	61a2      	str	r2, [r4, #24]
 800a55a:	6922      	ldr	r2, [r4, #16]
 800a55c:	b942      	cbnz	r2, 800a570 <__swsetup_r+0xa4>
 800a55e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a562:	d1c5      	bne.n	800a4f0 <__swsetup_r+0x24>
 800a564:	bd38      	pop	{r3, r4, r5, pc}
 800a566:	0799      	lsls	r1, r3, #30
 800a568:	bf58      	it	pl
 800a56a:	6962      	ldrpl	r2, [r4, #20]
 800a56c:	60a2      	str	r2, [r4, #8]
 800a56e:	e7f4      	b.n	800a55a <__swsetup_r+0x8e>
 800a570:	2000      	movs	r0, #0
 800a572:	e7f7      	b.n	800a564 <__swsetup_r+0x98>
 800a574:	20000020 	.word	0x20000020

0800a578 <_raise_r>:
 800a578:	291f      	cmp	r1, #31
 800a57a:	b538      	push	{r3, r4, r5, lr}
 800a57c:	4605      	mov	r5, r0
 800a57e:	460c      	mov	r4, r1
 800a580:	d904      	bls.n	800a58c <_raise_r+0x14>
 800a582:	2316      	movs	r3, #22
 800a584:	6003      	str	r3, [r0, #0]
 800a586:	f04f 30ff 	mov.w	r0, #4294967295
 800a58a:	bd38      	pop	{r3, r4, r5, pc}
 800a58c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a58e:	b112      	cbz	r2, 800a596 <_raise_r+0x1e>
 800a590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a594:	b94b      	cbnz	r3, 800a5aa <_raise_r+0x32>
 800a596:	4628      	mov	r0, r5
 800a598:	f000 f830 	bl	800a5fc <_getpid_r>
 800a59c:	4622      	mov	r2, r4
 800a59e:	4601      	mov	r1, r0
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a6:	f000 b817 	b.w	800a5d8 <_kill_r>
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d00a      	beq.n	800a5c4 <_raise_r+0x4c>
 800a5ae:	1c59      	adds	r1, r3, #1
 800a5b0:	d103      	bne.n	800a5ba <_raise_r+0x42>
 800a5b2:	2316      	movs	r3, #22
 800a5b4:	6003      	str	r3, [r0, #0]
 800a5b6:	2001      	movs	r0, #1
 800a5b8:	e7e7      	b.n	800a58a <_raise_r+0x12>
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a5c2:	4798      	blx	r3
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e7e0      	b.n	800a58a <_raise_r+0x12>

0800a5c8 <raise>:
 800a5c8:	4b02      	ldr	r3, [pc, #8]	@ (800a5d4 <raise+0xc>)
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	f7ff bfd3 	b.w	800a578 <_raise_r>
 800a5d2:	bf00      	nop
 800a5d4:	20000020 	.word	0x20000020

0800a5d8 <_kill_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	2300      	movs	r3, #0
 800a5dc:	4d06      	ldr	r5, [pc, #24]	@ (800a5f8 <_kill_r+0x20>)
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	602b      	str	r3, [r5, #0]
 800a5e6:	f7f8 fb4a 	bl	8002c7e <_kill>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	d102      	bne.n	800a5f4 <_kill_r+0x1c>
 800a5ee:	682b      	ldr	r3, [r5, #0]
 800a5f0:	b103      	cbz	r3, 800a5f4 <_kill_r+0x1c>
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	bd38      	pop	{r3, r4, r5, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20000b78 	.word	0x20000b78

0800a5fc <_getpid_r>:
 800a5fc:	f7f8 bb38 	b.w	8002c70 <_getpid>

0800a600 <__swhatbuf_r>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	460c      	mov	r4, r1
 800a604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a608:	4615      	mov	r5, r2
 800a60a:	2900      	cmp	r1, #0
 800a60c:	461e      	mov	r6, r3
 800a60e:	b096      	sub	sp, #88	@ 0x58
 800a610:	da0c      	bge.n	800a62c <__swhatbuf_r+0x2c>
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	2100      	movs	r1, #0
 800a616:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a61a:	bf14      	ite	ne
 800a61c:	2340      	movne	r3, #64	@ 0x40
 800a61e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a622:	2000      	movs	r0, #0
 800a624:	6031      	str	r1, [r6, #0]
 800a626:	602b      	str	r3, [r5, #0]
 800a628:	b016      	add	sp, #88	@ 0x58
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
 800a62c:	466a      	mov	r2, sp
 800a62e:	f000 f849 	bl	800a6c4 <_fstat_r>
 800a632:	2800      	cmp	r0, #0
 800a634:	dbed      	blt.n	800a612 <__swhatbuf_r+0x12>
 800a636:	9901      	ldr	r1, [sp, #4]
 800a638:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a63c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a640:	4259      	negs	r1, r3
 800a642:	4159      	adcs	r1, r3
 800a644:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a648:	e7eb      	b.n	800a622 <__swhatbuf_r+0x22>

0800a64a <__smakebuf_r>:
 800a64a:	898b      	ldrh	r3, [r1, #12]
 800a64c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a64e:	079d      	lsls	r5, r3, #30
 800a650:	4606      	mov	r6, r0
 800a652:	460c      	mov	r4, r1
 800a654:	d507      	bpl.n	800a666 <__smakebuf_r+0x1c>
 800a656:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	6123      	str	r3, [r4, #16]
 800a65e:	2301      	movs	r3, #1
 800a660:	6163      	str	r3, [r4, #20]
 800a662:	b003      	add	sp, #12
 800a664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a666:	466a      	mov	r2, sp
 800a668:	ab01      	add	r3, sp, #4
 800a66a:	f7ff ffc9 	bl	800a600 <__swhatbuf_r>
 800a66e:	9f00      	ldr	r7, [sp, #0]
 800a670:	4605      	mov	r5, r0
 800a672:	4639      	mov	r1, r7
 800a674:	4630      	mov	r0, r6
 800a676:	f7fd fc5d 	bl	8007f34 <_malloc_r>
 800a67a:	b948      	cbnz	r0, 800a690 <__smakebuf_r+0x46>
 800a67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a680:	059a      	lsls	r2, r3, #22
 800a682:	d4ee      	bmi.n	800a662 <__smakebuf_r+0x18>
 800a684:	f023 0303 	bic.w	r3, r3, #3
 800a688:	f043 0302 	orr.w	r3, r3, #2
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	e7e2      	b.n	800a656 <__smakebuf_r+0xc>
 800a690:	89a3      	ldrh	r3, [r4, #12]
 800a692:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a69a:	81a3      	strh	r3, [r4, #12]
 800a69c:	9b01      	ldr	r3, [sp, #4]
 800a69e:	6020      	str	r0, [r4, #0]
 800a6a0:	b15b      	cbz	r3, 800a6ba <__smakebuf_r+0x70>
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a8:	f000 f81e 	bl	800a6e8 <_isatty_r>
 800a6ac:	b128      	cbz	r0, 800a6ba <__smakebuf_r+0x70>
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f023 0303 	bic.w	r3, r3, #3
 800a6b4:	f043 0301 	orr.w	r3, r3, #1
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	431d      	orrs	r5, r3
 800a6be:	81a5      	strh	r5, [r4, #12]
 800a6c0:	e7cf      	b.n	800a662 <__smakebuf_r+0x18>
	...

0800a6c4 <_fstat_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	4d06      	ldr	r5, [pc, #24]	@ (800a6e4 <_fstat_r+0x20>)
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	602b      	str	r3, [r5, #0]
 800a6d2:	f7f8 fb33 	bl	8002d3c <_fstat>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	d102      	bne.n	800a6e0 <_fstat_r+0x1c>
 800a6da:	682b      	ldr	r3, [r5, #0]
 800a6dc:	b103      	cbz	r3, 800a6e0 <_fstat_r+0x1c>
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	bd38      	pop	{r3, r4, r5, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20000b78 	.word	0x20000b78

0800a6e8 <_isatty_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	4d05      	ldr	r5, [pc, #20]	@ (800a704 <_isatty_r+0x1c>)
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	f7f8 fb31 	bl	8002d5a <_isatty>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	d102      	bne.n	800a702 <_isatty_r+0x1a>
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	b103      	cbz	r3, 800a702 <_isatty_r+0x1a>
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	bd38      	pop	{r3, r4, r5, pc}
 800a704:	20000b78 	.word	0x20000b78

0800a708 <pow>:
 800a708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a70c:	4614      	mov	r4, r2
 800a70e:	461d      	mov	r5, r3
 800a710:	4680      	mov	r8, r0
 800a712:	4689      	mov	r9, r1
 800a714:	f000 f868 	bl	800a7e8 <__ieee754_pow>
 800a718:	4622      	mov	r2, r4
 800a71a:	4606      	mov	r6, r0
 800a71c:	460f      	mov	r7, r1
 800a71e:	462b      	mov	r3, r5
 800a720:	4620      	mov	r0, r4
 800a722:	4629      	mov	r1, r5
 800a724:	f7f6 f972 	bl	8000a0c <__aeabi_dcmpun>
 800a728:	bbc8      	cbnz	r0, 800a79e <pow+0x96>
 800a72a:	2200      	movs	r2, #0
 800a72c:	2300      	movs	r3, #0
 800a72e:	4640      	mov	r0, r8
 800a730:	4649      	mov	r1, r9
 800a732:	f7f6 f939 	bl	80009a8 <__aeabi_dcmpeq>
 800a736:	b1b8      	cbz	r0, 800a768 <pow+0x60>
 800a738:	2200      	movs	r2, #0
 800a73a:	2300      	movs	r3, #0
 800a73c:	4620      	mov	r0, r4
 800a73e:	4629      	mov	r1, r5
 800a740:	f7f6 f932 	bl	80009a8 <__aeabi_dcmpeq>
 800a744:	2800      	cmp	r0, #0
 800a746:	d141      	bne.n	800a7cc <pow+0xc4>
 800a748:	4620      	mov	r0, r4
 800a74a:	4629      	mov	r1, r5
 800a74c:	f000 f844 	bl	800a7d8 <finite>
 800a750:	b328      	cbz	r0, 800a79e <pow+0x96>
 800a752:	2200      	movs	r2, #0
 800a754:	2300      	movs	r3, #0
 800a756:	4620      	mov	r0, r4
 800a758:	4629      	mov	r1, r5
 800a75a:	f7f6 f92f 	bl	80009bc <__aeabi_dcmplt>
 800a75e:	b1f0      	cbz	r0, 800a79e <pow+0x96>
 800a760:	f7fc fcd0 	bl	8007104 <__errno>
 800a764:	2322      	movs	r3, #34	@ 0x22
 800a766:	e019      	b.n	800a79c <pow+0x94>
 800a768:	4630      	mov	r0, r6
 800a76a:	4639      	mov	r1, r7
 800a76c:	f000 f834 	bl	800a7d8 <finite>
 800a770:	b9c8      	cbnz	r0, 800a7a6 <pow+0x9e>
 800a772:	4640      	mov	r0, r8
 800a774:	4649      	mov	r1, r9
 800a776:	f000 f82f 	bl	800a7d8 <finite>
 800a77a:	b1a0      	cbz	r0, 800a7a6 <pow+0x9e>
 800a77c:	4620      	mov	r0, r4
 800a77e:	4629      	mov	r1, r5
 800a780:	f000 f82a 	bl	800a7d8 <finite>
 800a784:	b178      	cbz	r0, 800a7a6 <pow+0x9e>
 800a786:	4632      	mov	r2, r6
 800a788:	463b      	mov	r3, r7
 800a78a:	4630      	mov	r0, r6
 800a78c:	4639      	mov	r1, r7
 800a78e:	f7f6 f93d 	bl	8000a0c <__aeabi_dcmpun>
 800a792:	2800      	cmp	r0, #0
 800a794:	d0e4      	beq.n	800a760 <pow+0x58>
 800a796:	f7fc fcb5 	bl	8007104 <__errno>
 800a79a:	2321      	movs	r3, #33	@ 0x21
 800a79c:	6003      	str	r3, [r0, #0]
 800a79e:	4630      	mov	r0, r6
 800a7a0:	4639      	mov	r1, r7
 800a7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	f7f6 f8fb 	bl	80009a8 <__aeabi_dcmpeq>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d0f3      	beq.n	800a79e <pow+0x96>
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	f000 f80d 	bl	800a7d8 <finite>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d0ed      	beq.n	800a79e <pow+0x96>
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	f000 f807 	bl	800a7d8 <finite>
 800a7ca:	e7c8      	b.n	800a75e <pow+0x56>
 800a7cc:	2600      	movs	r6, #0
 800a7ce:	4f01      	ldr	r7, [pc, #4]	@ (800a7d4 <pow+0xcc>)
 800a7d0:	e7e5      	b.n	800a79e <pow+0x96>
 800a7d2:	bf00      	nop
 800a7d4:	3ff00000 	.word	0x3ff00000

0800a7d8 <finite>:
 800a7d8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800a7dc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a7e0:	0fc0      	lsrs	r0, r0, #31
 800a7e2:	4770      	bx	lr
 800a7e4:	0000      	movs	r0, r0
	...

0800a7e8 <__ieee754_pow>:
 800a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	b091      	sub	sp, #68	@ 0x44
 800a7ee:	e9cd 2300 	strd	r2, r3, [sp]
 800a7f2:	468b      	mov	fp, r1
 800a7f4:	e9dd 1800 	ldrd	r1, r8, [sp]
 800a7f8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800a7fc:	4682      	mov	sl, r0
 800a7fe:	ea57 0001 	orrs.w	r0, r7, r1
 800a802:	d112      	bne.n	800a82a <__ieee754_pow+0x42>
 800a804:	4653      	mov	r3, sl
 800a806:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800a80a:	18db      	adds	r3, r3, r3
 800a80c:	4152      	adcs	r2, r2
 800a80e:	4298      	cmp	r0, r3
 800a810:	4b91      	ldr	r3, [pc, #580]	@ (800aa58 <__ieee754_pow+0x270>)
 800a812:	4193      	sbcs	r3, r2
 800a814:	f080 84ce 	bcs.w	800b1b4 <__ieee754_pow+0x9cc>
 800a818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a81c:	4650      	mov	r0, sl
 800a81e:	4659      	mov	r1, fp
 800a820:	f7f5 fca4 	bl	800016c <__adddf3>
 800a824:	b011      	add	sp, #68	@ 0x44
 800a826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82a:	4b8c      	ldr	r3, [pc, #560]	@ (800aa5c <__ieee754_pow+0x274>)
 800a82c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800a830:	429e      	cmp	r6, r3
 800a832:	465d      	mov	r5, fp
 800a834:	46d1      	mov	r9, sl
 800a836:	d807      	bhi.n	800a848 <__ieee754_pow+0x60>
 800a838:	d102      	bne.n	800a840 <__ieee754_pow+0x58>
 800a83a:	f1ba 0f00 	cmp.w	sl, #0
 800a83e:	d1eb      	bne.n	800a818 <__ieee754_pow+0x30>
 800a840:	429f      	cmp	r7, r3
 800a842:	d801      	bhi.n	800a848 <__ieee754_pow+0x60>
 800a844:	d10f      	bne.n	800a866 <__ieee754_pow+0x7e>
 800a846:	b171      	cbz	r1, 800a866 <__ieee754_pow+0x7e>
 800a848:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a84c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a850:	ea55 0509 	orrs.w	r5, r5, r9
 800a854:	d1e0      	bne.n	800a818 <__ieee754_pow+0x30>
 800a856:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a85a:	18db      	adds	r3, r3, r3
 800a85c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a860:	4152      	adcs	r2, r2
 800a862:	429d      	cmp	r5, r3
 800a864:	e7d4      	b.n	800a810 <__ieee754_pow+0x28>
 800a866:	2d00      	cmp	r5, #0
 800a868:	4633      	mov	r3, r6
 800a86a:	da39      	bge.n	800a8e0 <__ieee754_pow+0xf8>
 800a86c:	4a7c      	ldr	r2, [pc, #496]	@ (800aa60 <__ieee754_pow+0x278>)
 800a86e:	4297      	cmp	r7, r2
 800a870:	d84e      	bhi.n	800a910 <__ieee754_pow+0x128>
 800a872:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a876:	4297      	cmp	r7, r2
 800a878:	f240 84ab 	bls.w	800b1d2 <__ieee754_pow+0x9ea>
 800a87c:	153a      	asrs	r2, r7, #20
 800a87e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a882:	2a14      	cmp	r2, #20
 800a884:	dd0f      	ble.n	800a8a6 <__ieee754_pow+0xbe>
 800a886:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a88a:	fa21 f402 	lsr.w	r4, r1, r2
 800a88e:	fa04 f202 	lsl.w	r2, r4, r2
 800a892:	428a      	cmp	r2, r1
 800a894:	f040 849d 	bne.w	800b1d2 <__ieee754_pow+0x9ea>
 800a898:	f004 0401 	and.w	r4, r4, #1
 800a89c:	f1c4 0402 	rsb	r4, r4, #2
 800a8a0:	2900      	cmp	r1, #0
 800a8a2:	d15a      	bne.n	800a95a <__ieee754_pow+0x172>
 800a8a4:	e00e      	b.n	800a8c4 <__ieee754_pow+0xdc>
 800a8a6:	2900      	cmp	r1, #0
 800a8a8:	d156      	bne.n	800a958 <__ieee754_pow+0x170>
 800a8aa:	f1c2 0214 	rsb	r2, r2, #20
 800a8ae:	fa47 f402 	asr.w	r4, r7, r2
 800a8b2:	fa04 f202 	lsl.w	r2, r4, r2
 800a8b6:	42ba      	cmp	r2, r7
 800a8b8:	f040 8488 	bne.w	800b1cc <__ieee754_pow+0x9e4>
 800a8bc:	f004 0401 	and.w	r4, r4, #1
 800a8c0:	f1c4 0402 	rsb	r4, r4, #2
 800a8c4:	4a67      	ldr	r2, [pc, #412]	@ (800aa64 <__ieee754_pow+0x27c>)
 800a8c6:	4297      	cmp	r7, r2
 800a8c8:	d130      	bne.n	800a92c <__ieee754_pow+0x144>
 800a8ca:	f1b8 0f00 	cmp.w	r8, #0
 800a8ce:	f280 8479 	bge.w	800b1c4 <__ieee754_pow+0x9dc>
 800a8d2:	4652      	mov	r2, sl
 800a8d4:	465b      	mov	r3, fp
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	4962      	ldr	r1, [pc, #392]	@ (800aa64 <__ieee754_pow+0x27c>)
 800a8da:	f7f5 ff27 	bl	800072c <__aeabi_ddiv>
 800a8de:	e7a1      	b.n	800a824 <__ieee754_pow+0x3c>
 800a8e0:	2400      	movs	r4, #0
 800a8e2:	2900      	cmp	r1, #0
 800a8e4:	d139      	bne.n	800a95a <__ieee754_pow+0x172>
 800a8e6:	4a5d      	ldr	r2, [pc, #372]	@ (800aa5c <__ieee754_pow+0x274>)
 800a8e8:	4297      	cmp	r7, r2
 800a8ea:	d1eb      	bne.n	800a8c4 <__ieee754_pow+0xdc>
 800a8ec:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800a8f0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a8f4:	ea53 0309 	orrs.w	r3, r3, r9
 800a8f8:	f000 845c 	beq.w	800b1b4 <__ieee754_pow+0x9cc>
 800a8fc:	4b5a      	ldr	r3, [pc, #360]	@ (800aa68 <__ieee754_pow+0x280>)
 800a8fe:	429e      	cmp	r6, r3
 800a900:	d908      	bls.n	800a914 <__ieee754_pow+0x12c>
 800a902:	f1b8 0f00 	cmp.w	r8, #0
 800a906:	f2c0 8459 	blt.w	800b1bc <__ieee754_pow+0x9d4>
 800a90a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a90e:	e789      	b.n	800a824 <__ieee754_pow+0x3c>
 800a910:	2402      	movs	r4, #2
 800a912:	e7e6      	b.n	800a8e2 <__ieee754_pow+0xfa>
 800a914:	f1b8 0f00 	cmp.w	r8, #0
 800a918:	f04f 0000 	mov.w	r0, #0
 800a91c:	f04f 0100 	mov.w	r1, #0
 800a920:	da80      	bge.n	800a824 <__ieee754_pow+0x3c>
 800a922:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a926:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a92a:	e77b      	b.n	800a824 <__ieee754_pow+0x3c>
 800a92c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800a930:	d106      	bne.n	800a940 <__ieee754_pow+0x158>
 800a932:	4652      	mov	r2, sl
 800a934:	465b      	mov	r3, fp
 800a936:	4650      	mov	r0, sl
 800a938:	4659      	mov	r1, fp
 800a93a:	f7f5 fdcd 	bl	80004d8 <__aeabi_dmul>
 800a93e:	e771      	b.n	800a824 <__ieee754_pow+0x3c>
 800a940:	4a4a      	ldr	r2, [pc, #296]	@ (800aa6c <__ieee754_pow+0x284>)
 800a942:	4590      	cmp	r8, r2
 800a944:	d109      	bne.n	800a95a <__ieee754_pow+0x172>
 800a946:	2d00      	cmp	r5, #0
 800a948:	db07      	blt.n	800a95a <__ieee754_pow+0x172>
 800a94a:	4650      	mov	r0, sl
 800a94c:	4659      	mov	r1, fp
 800a94e:	b011      	add	sp, #68	@ 0x44
 800a950:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	f000 bd12 	b.w	800b37c <__ieee754_sqrt>
 800a958:	2400      	movs	r4, #0
 800a95a:	4650      	mov	r0, sl
 800a95c:	4659      	mov	r1, fp
 800a95e:	9302      	str	r3, [sp, #8]
 800a960:	f000 fc6a 	bl	800b238 <fabs>
 800a964:	9b02      	ldr	r3, [sp, #8]
 800a966:	f1b9 0f00 	cmp.w	r9, #0
 800a96a:	d127      	bne.n	800a9bc <__ieee754_pow+0x1d4>
 800a96c:	4a3d      	ldr	r2, [pc, #244]	@ (800aa64 <__ieee754_pow+0x27c>)
 800a96e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800a972:	4594      	cmp	ip, r2
 800a974:	d000      	beq.n	800a978 <__ieee754_pow+0x190>
 800a976:	bb0e      	cbnz	r6, 800a9bc <__ieee754_pow+0x1d4>
 800a978:	f1b8 0f00 	cmp.w	r8, #0
 800a97c:	da05      	bge.n	800a98a <__ieee754_pow+0x1a2>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	2000      	movs	r0, #0
 800a984:	4937      	ldr	r1, [pc, #220]	@ (800aa64 <__ieee754_pow+0x27c>)
 800a986:	f7f5 fed1 	bl	800072c <__aeabi_ddiv>
 800a98a:	2d00      	cmp	r5, #0
 800a98c:	f6bf af4a 	bge.w	800a824 <__ieee754_pow+0x3c>
 800a990:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a994:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a998:	4326      	orrs	r6, r4
 800a99a:	d108      	bne.n	800a9ae <__ieee754_pow+0x1c6>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	f7f5 fbe0 	bl	8000168 <__aeabi_dsub>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	e795      	b.n	800a8da <__ieee754_pow+0xf2>
 800a9ae:	2c01      	cmp	r4, #1
 800a9b0:	f47f af38 	bne.w	800a824 <__ieee754_pow+0x3c>
 800a9b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	e733      	b.n	800a824 <__ieee754_pow+0x3c>
 800a9bc:	0fea      	lsrs	r2, r5, #31
 800a9be:	3a01      	subs	r2, #1
 800a9c0:	ea52 0c04 	orrs.w	ip, r2, r4
 800a9c4:	d102      	bne.n	800a9cc <__ieee754_pow+0x1e4>
 800a9c6:	4652      	mov	r2, sl
 800a9c8:	465b      	mov	r3, fp
 800a9ca:	e7e9      	b.n	800a9a0 <__ieee754_pow+0x1b8>
 800a9cc:	f04f 0900 	mov.w	r9, #0
 800a9d0:	3c01      	subs	r4, #1
 800a9d2:	4314      	orrs	r4, r2
 800a9d4:	bf14      	ite	ne
 800a9d6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800aa64 <__ieee754_pow+0x27c>
 800a9da:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800aa70 <__ieee754_pow+0x288>
 800a9de:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a9e2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a9e6:	f240 8107 	bls.w	800abf8 <__ieee754_pow+0x410>
 800a9ea:	4b22      	ldr	r3, [pc, #136]	@ (800aa74 <__ieee754_pow+0x28c>)
 800a9ec:	429f      	cmp	r7, r3
 800a9ee:	4b1e      	ldr	r3, [pc, #120]	@ (800aa68 <__ieee754_pow+0x280>)
 800a9f0:	d913      	bls.n	800aa1a <__ieee754_pow+0x232>
 800a9f2:	429e      	cmp	r6, r3
 800a9f4:	d808      	bhi.n	800aa08 <__ieee754_pow+0x220>
 800a9f6:	f1b8 0f00 	cmp.w	r8, #0
 800a9fa:	da08      	bge.n	800aa0e <__ieee754_pow+0x226>
 800a9fc:	2000      	movs	r0, #0
 800a9fe:	b011      	add	sp, #68	@ 0x44
 800aa00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	f000 bcb4 	b.w	800b370 <__math_oflow>
 800aa08:	f1b8 0f00 	cmp.w	r8, #0
 800aa0c:	dcf6      	bgt.n	800a9fc <__ieee754_pow+0x214>
 800aa0e:	2000      	movs	r0, #0
 800aa10:	b011      	add	sp, #68	@ 0x44
 800aa12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa16:	f000 bca6 	b.w	800b366 <__math_uflow>
 800aa1a:	429e      	cmp	r6, r3
 800aa1c:	d20c      	bcs.n	800aa38 <__ieee754_pow+0x250>
 800aa1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa22:	2200      	movs	r2, #0
 800aa24:	2300      	movs	r3, #0
 800aa26:	f7f5 ffc9 	bl	80009bc <__aeabi_dcmplt>
 800aa2a:	3800      	subs	r0, #0
 800aa2c:	bf18      	it	ne
 800aa2e:	2001      	movne	r0, #1
 800aa30:	f1b8 0f00 	cmp.w	r8, #0
 800aa34:	daec      	bge.n	800aa10 <__ieee754_pow+0x228>
 800aa36:	e7e2      	b.n	800a9fe <__ieee754_pow+0x216>
 800aa38:	4b0a      	ldr	r3, [pc, #40]	@ (800aa64 <__ieee754_pow+0x27c>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	429e      	cmp	r6, r3
 800aa3e:	d91b      	bls.n	800aa78 <__ieee754_pow+0x290>
 800aa40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa44:	2300      	movs	r3, #0
 800aa46:	f7f5 ffb9 	bl	80009bc <__aeabi_dcmplt>
 800aa4a:	3800      	subs	r0, #0
 800aa4c:	bf18      	it	ne
 800aa4e:	2001      	movne	r0, #1
 800aa50:	f1b8 0f00 	cmp.w	r8, #0
 800aa54:	dcd3      	bgt.n	800a9fe <__ieee754_pow+0x216>
 800aa56:	e7db      	b.n	800aa10 <__ieee754_pow+0x228>
 800aa58:	fff00000 	.word	0xfff00000
 800aa5c:	7ff00000 	.word	0x7ff00000
 800aa60:	433fffff 	.word	0x433fffff
 800aa64:	3ff00000 	.word	0x3ff00000
 800aa68:	3fefffff 	.word	0x3fefffff
 800aa6c:	3fe00000 	.word	0x3fe00000
 800aa70:	bff00000 	.word	0xbff00000
 800aa74:	43f00000 	.word	0x43f00000
 800aa78:	4b5b      	ldr	r3, [pc, #364]	@ (800abe8 <__ieee754_pow+0x400>)
 800aa7a:	f7f5 fb75 	bl	8000168 <__aeabi_dsub>
 800aa7e:	a352      	add	r3, pc, #328	@ (adr r3, 800abc8 <__ieee754_pow+0x3e0>)
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	4604      	mov	r4, r0
 800aa86:	460d      	mov	r5, r1
 800aa88:	f7f5 fd26 	bl	80004d8 <__aeabi_dmul>
 800aa8c:	a350      	add	r3, pc, #320	@ (adr r3, 800abd0 <__ieee754_pow+0x3e8>)
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	4606      	mov	r6, r0
 800aa94:	460f      	mov	r7, r1
 800aa96:	4620      	mov	r0, r4
 800aa98:	4629      	mov	r1, r5
 800aa9a:	f7f5 fd1d 	bl	80004d8 <__aeabi_dmul>
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	4682      	mov	sl, r0
 800aaa2:	468b      	mov	fp, r1
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	4b50      	ldr	r3, [pc, #320]	@ (800abec <__ieee754_pow+0x404>)
 800aaaa:	f7f5 fd15 	bl	80004d8 <__aeabi_dmul>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	a149      	add	r1, pc, #292	@ (adr r1, 800abd8 <__ieee754_pow+0x3f0>)
 800aab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aab8:	f7f5 fb56 	bl	8000168 <__aeabi_dsub>
 800aabc:	4622      	mov	r2, r4
 800aabe:	462b      	mov	r3, r5
 800aac0:	f7f5 fd0a 	bl	80004d8 <__aeabi_dmul>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	2000      	movs	r0, #0
 800aaca:	4949      	ldr	r1, [pc, #292]	@ (800abf0 <__ieee754_pow+0x408>)
 800aacc:	f7f5 fb4c 	bl	8000168 <__aeabi_dsub>
 800aad0:	4622      	mov	r2, r4
 800aad2:	4680      	mov	r8, r0
 800aad4:	4689      	mov	r9, r1
 800aad6:	462b      	mov	r3, r5
 800aad8:	4620      	mov	r0, r4
 800aada:	4629      	mov	r1, r5
 800aadc:	f7f5 fcfc 	bl	80004d8 <__aeabi_dmul>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4640      	mov	r0, r8
 800aae6:	4649      	mov	r1, r9
 800aae8:	f7f5 fcf6 	bl	80004d8 <__aeabi_dmul>
 800aaec:	a33c      	add	r3, pc, #240	@ (adr r3, 800abe0 <__ieee754_pow+0x3f8>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	f7f5 fcf1 	bl	80004d8 <__aeabi_dmul>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4650      	mov	r0, sl
 800aafc:	4659      	mov	r1, fp
 800aafe:	f7f5 fb33 	bl	8000168 <__aeabi_dsub>
 800ab02:	2400      	movs	r4, #0
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4680      	mov	r8, r0
 800ab0a:	4689      	mov	r9, r1
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	4639      	mov	r1, r7
 800ab10:	f7f5 fb2c 	bl	800016c <__adddf3>
 800ab14:	4632      	mov	r2, r6
 800ab16:	463b      	mov	r3, r7
 800ab18:	4620      	mov	r0, r4
 800ab1a:	460d      	mov	r5, r1
 800ab1c:	f7f5 fb24 	bl	8000168 <__aeabi_dsub>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	4640      	mov	r0, r8
 800ab26:	4649      	mov	r1, r9
 800ab28:	f7f5 fb1e 	bl	8000168 <__aeabi_dsub>
 800ab2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab34:	2300      	movs	r3, #0
 800ab36:	9304      	str	r3, [sp, #16]
 800ab38:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	460f      	mov	r7, r1
 800ab40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab44:	4652      	mov	r2, sl
 800ab46:	465b      	mov	r3, fp
 800ab48:	f7f5 fb0e 	bl	8000168 <__aeabi_dsub>
 800ab4c:	4622      	mov	r2, r4
 800ab4e:	462b      	mov	r3, r5
 800ab50:	f7f5 fcc2 	bl	80004d8 <__aeabi_dmul>
 800ab54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab58:	4680      	mov	r8, r0
 800ab5a:	4689      	mov	r9, r1
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	4639      	mov	r1, r7
 800ab60:	f7f5 fcba 	bl	80004d8 <__aeabi_dmul>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4640      	mov	r0, r8
 800ab6a:	4649      	mov	r1, r9
 800ab6c:	f7f5 fafe 	bl	800016c <__adddf3>
 800ab70:	4652      	mov	r2, sl
 800ab72:	465b      	mov	r3, fp
 800ab74:	4606      	mov	r6, r0
 800ab76:	460f      	mov	r7, r1
 800ab78:	4620      	mov	r0, r4
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	f7f5 fcac 	bl	80004d8 <__aeabi_dmul>
 800ab80:	460b      	mov	r3, r1
 800ab82:	4602      	mov	r2, r0
 800ab84:	4680      	mov	r8, r0
 800ab86:	4689      	mov	r9, r1
 800ab88:	4630      	mov	r0, r6
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	f7f5 faee 	bl	800016c <__adddf3>
 800ab90:	4b18      	ldr	r3, [pc, #96]	@ (800abf4 <__ieee754_pow+0x40c>)
 800ab92:	4604      	mov	r4, r0
 800ab94:	4299      	cmp	r1, r3
 800ab96:	460d      	mov	r5, r1
 800ab98:	468a      	mov	sl, r1
 800ab9a:	468b      	mov	fp, r1
 800ab9c:	f340 82e0 	ble.w	800b160 <__ieee754_pow+0x978>
 800aba0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800aba4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800aba8:	4303      	orrs	r3, r0
 800abaa:	f000 81df 	beq.w	800af6c <__ieee754_pow+0x784>
 800abae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abb2:	2200      	movs	r2, #0
 800abb4:	2300      	movs	r3, #0
 800abb6:	f7f5 ff01 	bl	80009bc <__aeabi_dcmplt>
 800abba:	3800      	subs	r0, #0
 800abbc:	bf18      	it	ne
 800abbe:	2001      	movne	r0, #1
 800abc0:	e71d      	b.n	800a9fe <__ieee754_pow+0x216>
 800abc2:	bf00      	nop
 800abc4:	f3af 8000 	nop.w
 800abc8:	60000000 	.word	0x60000000
 800abcc:	3ff71547 	.word	0x3ff71547
 800abd0:	f85ddf44 	.word	0xf85ddf44
 800abd4:	3e54ae0b 	.word	0x3e54ae0b
 800abd8:	55555555 	.word	0x55555555
 800abdc:	3fd55555 	.word	0x3fd55555
 800abe0:	652b82fe 	.word	0x652b82fe
 800abe4:	3ff71547 	.word	0x3ff71547
 800abe8:	3ff00000 	.word	0x3ff00000
 800abec:	3fd00000 	.word	0x3fd00000
 800abf0:	3fe00000 	.word	0x3fe00000
 800abf4:	408fffff 	.word	0x408fffff
 800abf8:	4ad3      	ldr	r2, [pc, #844]	@ (800af48 <__ieee754_pow+0x760>)
 800abfa:	402a      	ands	r2, r5
 800abfc:	2a00      	cmp	r2, #0
 800abfe:	f040 817a 	bne.w	800aef6 <__ieee754_pow+0x70e>
 800ac02:	4bd2      	ldr	r3, [pc, #840]	@ (800af4c <__ieee754_pow+0x764>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	f7f5 fc67 	bl	80004d8 <__aeabi_dmul>
 800ac0a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800ac0e:	460b      	mov	r3, r1
 800ac10:	151a      	asrs	r2, r3, #20
 800ac12:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ac16:	4422      	add	r2, r4
 800ac18:	920a      	str	r2, [sp, #40]	@ 0x28
 800ac1a:	4acd      	ldr	r2, [pc, #820]	@ (800af50 <__ieee754_pow+0x768>)
 800ac1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac20:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800ac24:	4293      	cmp	r3, r2
 800ac26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ac2a:	dd08      	ble.n	800ac3e <__ieee754_pow+0x456>
 800ac2c:	4ac9      	ldr	r2, [pc, #804]	@ (800af54 <__ieee754_pow+0x76c>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	f340 8163 	ble.w	800aefa <__ieee754_pow+0x712>
 800ac34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac36:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac3e:	2600      	movs	r6, #0
 800ac40:	00f3      	lsls	r3, r6, #3
 800ac42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac44:	4bc4      	ldr	r3, [pc, #784]	@ (800af58 <__ieee754_pow+0x770>)
 800ac46:	4629      	mov	r1, r5
 800ac48:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac50:	461a      	mov	r2, r3
 800ac52:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ac56:	4623      	mov	r3, r4
 800ac58:	4682      	mov	sl, r0
 800ac5a:	f7f5 fa85 	bl	8000168 <__aeabi_dsub>
 800ac5e:	4652      	mov	r2, sl
 800ac60:	462b      	mov	r3, r5
 800ac62:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ac66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac6a:	f7f5 fa7f 	bl	800016c <__adddf3>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	2000      	movs	r0, #0
 800ac74:	49b9      	ldr	r1, [pc, #740]	@ (800af5c <__ieee754_pow+0x774>)
 800ac76:	f7f5 fd59 	bl	800072c <__aeabi_ddiv>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ac82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac86:	f7f5 fc27 	bl	80004d8 <__aeabi_dmul>
 800ac8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac8e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ac92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac96:	2300      	movs	r3, #0
 800ac98:	2200      	movs	r2, #0
 800ac9a:	46ab      	mov	fp, r5
 800ac9c:	106d      	asrs	r5, r5, #1
 800ac9e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800aca2:	9304      	str	r3, [sp, #16]
 800aca4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800aca8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800acac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800acb0:	4640      	mov	r0, r8
 800acb2:	4649      	mov	r1, r9
 800acb4:	4614      	mov	r4, r2
 800acb6:	461d      	mov	r5, r3
 800acb8:	f7f5 fc0e 	bl	80004d8 <__aeabi_dmul>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acc4:	f7f5 fa50 	bl	8000168 <__aeabi_dsub>
 800acc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800accc:	4606      	mov	r6, r0
 800acce:	460f      	mov	r7, r1
 800acd0:	4620      	mov	r0, r4
 800acd2:	4629      	mov	r1, r5
 800acd4:	f7f5 fa48 	bl	8000168 <__aeabi_dsub>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4650      	mov	r0, sl
 800acde:	4659      	mov	r1, fp
 800ace0:	f7f5 fa42 	bl	8000168 <__aeabi_dsub>
 800ace4:	4642      	mov	r2, r8
 800ace6:	464b      	mov	r3, r9
 800ace8:	f7f5 fbf6 	bl	80004d8 <__aeabi_dmul>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4630      	mov	r0, r6
 800acf2:	4639      	mov	r1, r7
 800acf4:	f7f5 fa38 	bl	8000168 <__aeabi_dsub>
 800acf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800acfc:	f7f5 fbec 	bl	80004d8 <__aeabi_dmul>
 800ad00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad04:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	f7f5 fbe4 	bl	80004d8 <__aeabi_dmul>
 800ad10:	a37b      	add	r3, pc, #492	@ (adr r3, 800af00 <__ieee754_pow+0x718>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	4604      	mov	r4, r0
 800ad18:	460d      	mov	r5, r1
 800ad1a:	f7f5 fbdd 	bl	80004d8 <__aeabi_dmul>
 800ad1e:	a37a      	add	r3, pc, #488	@ (adr r3, 800af08 <__ieee754_pow+0x720>)
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	f7f5 fa22 	bl	800016c <__adddf3>
 800ad28:	4622      	mov	r2, r4
 800ad2a:	462b      	mov	r3, r5
 800ad2c:	f7f5 fbd4 	bl	80004d8 <__aeabi_dmul>
 800ad30:	a377      	add	r3, pc, #476	@ (adr r3, 800af10 <__ieee754_pow+0x728>)
 800ad32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad36:	f7f5 fa19 	bl	800016c <__adddf3>
 800ad3a:	4622      	mov	r2, r4
 800ad3c:	462b      	mov	r3, r5
 800ad3e:	f7f5 fbcb 	bl	80004d8 <__aeabi_dmul>
 800ad42:	a375      	add	r3, pc, #468	@ (adr r3, 800af18 <__ieee754_pow+0x730>)
 800ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad48:	f7f5 fa10 	bl	800016c <__adddf3>
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	462b      	mov	r3, r5
 800ad50:	f7f5 fbc2 	bl	80004d8 <__aeabi_dmul>
 800ad54:	a372      	add	r3, pc, #456	@ (adr r3, 800af20 <__ieee754_pow+0x738>)
 800ad56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5a:	f7f5 fa07 	bl	800016c <__adddf3>
 800ad5e:	4622      	mov	r2, r4
 800ad60:	462b      	mov	r3, r5
 800ad62:	f7f5 fbb9 	bl	80004d8 <__aeabi_dmul>
 800ad66:	a370      	add	r3, pc, #448	@ (adr r3, 800af28 <__ieee754_pow+0x740>)
 800ad68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6c:	f7f5 f9fe 	bl	800016c <__adddf3>
 800ad70:	4622      	mov	r2, r4
 800ad72:	4606      	mov	r6, r0
 800ad74:	460f      	mov	r7, r1
 800ad76:	462b      	mov	r3, r5
 800ad78:	4620      	mov	r0, r4
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	f7f5 fbac 	bl	80004d8 <__aeabi_dmul>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4630      	mov	r0, r6
 800ad86:	4639      	mov	r1, r7
 800ad88:	f7f5 fba6 	bl	80004d8 <__aeabi_dmul>
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	460d      	mov	r5, r1
 800ad90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad94:	4642      	mov	r2, r8
 800ad96:	464b      	mov	r3, r9
 800ad98:	f7f5 f9e8 	bl	800016c <__adddf3>
 800ad9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ada0:	f7f5 fb9a 	bl	80004d8 <__aeabi_dmul>
 800ada4:	4622      	mov	r2, r4
 800ada6:	462b      	mov	r3, r5
 800ada8:	f7f5 f9e0 	bl	800016c <__adddf3>
 800adac:	4642      	mov	r2, r8
 800adae:	4682      	mov	sl, r0
 800adb0:	468b      	mov	fp, r1
 800adb2:	464b      	mov	r3, r9
 800adb4:	4640      	mov	r0, r8
 800adb6:	4649      	mov	r1, r9
 800adb8:	f7f5 fb8e 	bl	80004d8 <__aeabi_dmul>
 800adbc:	2200      	movs	r2, #0
 800adbe:	4b68      	ldr	r3, [pc, #416]	@ (800af60 <__ieee754_pow+0x778>)
 800adc0:	4606      	mov	r6, r0
 800adc2:	460f      	mov	r7, r1
 800adc4:	f7f5 f9d2 	bl	800016c <__adddf3>
 800adc8:	4652      	mov	r2, sl
 800adca:	465b      	mov	r3, fp
 800adcc:	f7f5 f9ce 	bl	800016c <__adddf3>
 800add0:	2400      	movs	r4, #0
 800add2:	460d      	mov	r5, r1
 800add4:	4622      	mov	r2, r4
 800add6:	460b      	mov	r3, r1
 800add8:	4640      	mov	r0, r8
 800adda:	4649      	mov	r1, r9
 800addc:	f7f5 fb7c 	bl	80004d8 <__aeabi_dmul>
 800ade0:	2200      	movs	r2, #0
 800ade2:	4680      	mov	r8, r0
 800ade4:	4689      	mov	r9, r1
 800ade6:	4620      	mov	r0, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	4b5d      	ldr	r3, [pc, #372]	@ (800af60 <__ieee754_pow+0x778>)
 800adec:	f7f5 f9bc 	bl	8000168 <__aeabi_dsub>
 800adf0:	4632      	mov	r2, r6
 800adf2:	463b      	mov	r3, r7
 800adf4:	f7f5 f9b8 	bl	8000168 <__aeabi_dsub>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	4650      	mov	r0, sl
 800adfe:	4659      	mov	r1, fp
 800ae00:	f7f5 f9b2 	bl	8000168 <__aeabi_dsub>
 800ae04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae08:	f7f5 fb66 	bl	80004d8 <__aeabi_dmul>
 800ae0c:	4622      	mov	r2, r4
 800ae0e:	4606      	mov	r6, r0
 800ae10:	460f      	mov	r7, r1
 800ae12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae16:	462b      	mov	r3, r5
 800ae18:	f7f5 fb5e 	bl	80004d8 <__aeabi_dmul>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4630      	mov	r0, r6
 800ae22:	4639      	mov	r1, r7
 800ae24:	f7f5 f9a2 	bl	800016c <__adddf3>
 800ae28:	2400      	movs	r4, #0
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4640      	mov	r0, r8
 800ae34:	4649      	mov	r1, r9
 800ae36:	f7f5 f999 	bl	800016c <__adddf3>
 800ae3a:	a33d      	add	r3, pc, #244	@ (adr r3, 800af30 <__ieee754_pow+0x748>)
 800ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae40:	4620      	mov	r0, r4
 800ae42:	460d      	mov	r5, r1
 800ae44:	f7f5 fb48 	bl	80004d8 <__aeabi_dmul>
 800ae48:	4642      	mov	r2, r8
 800ae4a:	464b      	mov	r3, r9
 800ae4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae50:	4620      	mov	r0, r4
 800ae52:	4629      	mov	r1, r5
 800ae54:	f7f5 f988 	bl	8000168 <__aeabi_dsub>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4639      	mov	r1, r7
 800ae60:	f7f5 f982 	bl	8000168 <__aeabi_dsub>
 800ae64:	a334      	add	r3, pc, #208	@ (adr r3, 800af38 <__ieee754_pow+0x750>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	f7f5 fb35 	bl	80004d8 <__aeabi_dmul>
 800ae6e:	a334      	add	r3, pc, #208	@ (adr r3, 800af40 <__ieee754_pow+0x758>)
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	4606      	mov	r6, r0
 800ae76:	460f      	mov	r7, r1
 800ae78:	4620      	mov	r0, r4
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	f7f5 fb2c 	bl	80004d8 <__aeabi_dmul>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4630      	mov	r0, r6
 800ae86:	4639      	mov	r1, r7
 800ae88:	f7f5 f970 	bl	800016c <__adddf3>
 800ae8c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae8e:	4b35      	ldr	r3, [pc, #212]	@ (800af64 <__ieee754_pow+0x77c>)
 800ae90:	2400      	movs	r4, #0
 800ae92:	4413      	add	r3, r2
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f7f5 f968 	bl	800016c <__adddf3>
 800ae9c:	4682      	mov	sl, r0
 800ae9e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aea0:	468b      	mov	fp, r1
 800aea2:	f7f5 faaf 	bl	8000404 <__aeabi_i2d>
 800aea6:	4606      	mov	r6, r0
 800aea8:	460f      	mov	r7, r1
 800aeaa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aeac:	4b2e      	ldr	r3, [pc, #184]	@ (800af68 <__ieee754_pow+0x780>)
 800aeae:	4413      	add	r3, r2
 800aeb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aeb4:	4652      	mov	r2, sl
 800aeb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeba:	465b      	mov	r3, fp
 800aebc:	f7f5 f956 	bl	800016c <__adddf3>
 800aec0:	4642      	mov	r2, r8
 800aec2:	464b      	mov	r3, r9
 800aec4:	f7f5 f952 	bl	800016c <__adddf3>
 800aec8:	4632      	mov	r2, r6
 800aeca:	463b      	mov	r3, r7
 800aecc:	f7f5 f94e 	bl	800016c <__adddf3>
 800aed0:	4632      	mov	r2, r6
 800aed2:	463b      	mov	r3, r7
 800aed4:	4620      	mov	r0, r4
 800aed6:	460d      	mov	r5, r1
 800aed8:	f7f5 f946 	bl	8000168 <__aeabi_dsub>
 800aedc:	4642      	mov	r2, r8
 800aede:	464b      	mov	r3, r9
 800aee0:	f7f5 f942 	bl	8000168 <__aeabi_dsub>
 800aee4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aee8:	f7f5 f93e 	bl	8000168 <__aeabi_dsub>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	4650      	mov	r0, sl
 800aef2:	4659      	mov	r1, fp
 800aef4:	e618      	b.n	800ab28 <__ieee754_pow+0x340>
 800aef6:	2400      	movs	r4, #0
 800aef8:	e68a      	b.n	800ac10 <__ieee754_pow+0x428>
 800aefa:	2601      	movs	r6, #1
 800aefc:	e6a0      	b.n	800ac40 <__ieee754_pow+0x458>
 800aefe:	bf00      	nop
 800af00:	4a454eef 	.word	0x4a454eef
 800af04:	3fca7e28 	.word	0x3fca7e28
 800af08:	93c9db65 	.word	0x93c9db65
 800af0c:	3fcd864a 	.word	0x3fcd864a
 800af10:	a91d4101 	.word	0xa91d4101
 800af14:	3fd17460 	.word	0x3fd17460
 800af18:	518f264d 	.word	0x518f264d
 800af1c:	3fd55555 	.word	0x3fd55555
 800af20:	db6fabff 	.word	0xdb6fabff
 800af24:	3fdb6db6 	.word	0x3fdb6db6
 800af28:	33333303 	.word	0x33333303
 800af2c:	3fe33333 	.word	0x3fe33333
 800af30:	e0000000 	.word	0xe0000000
 800af34:	3feec709 	.word	0x3feec709
 800af38:	dc3a03fd 	.word	0xdc3a03fd
 800af3c:	3feec709 	.word	0x3feec709
 800af40:	145b01f5 	.word	0x145b01f5
 800af44:	be3e2fe0 	.word	0xbe3e2fe0
 800af48:	7ff00000 	.word	0x7ff00000
 800af4c:	43400000 	.word	0x43400000
 800af50:	0003988e 	.word	0x0003988e
 800af54:	000bb679 	.word	0x000bb679
 800af58:	0800bb60 	.word	0x0800bb60
 800af5c:	3ff00000 	.word	0x3ff00000
 800af60:	40080000 	.word	0x40080000
 800af64:	0800bb40 	.word	0x0800bb40
 800af68:	0800bb50 	.word	0x0800bb50
 800af6c:	a39a      	add	r3, pc, #616	@ (adr r3, 800b1d8 <__ieee754_pow+0x9f0>)
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	4630      	mov	r0, r6
 800af74:	4639      	mov	r1, r7
 800af76:	f7f5 f8f9 	bl	800016c <__adddf3>
 800af7a:	4642      	mov	r2, r8
 800af7c:	e9cd 0100 	strd	r0, r1, [sp]
 800af80:	464b      	mov	r3, r9
 800af82:	4620      	mov	r0, r4
 800af84:	4629      	mov	r1, r5
 800af86:	f7f5 f8ef 	bl	8000168 <__aeabi_dsub>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af92:	f7f5 fd31 	bl	80009f8 <__aeabi_dcmpgt>
 800af96:	2800      	cmp	r0, #0
 800af98:	f47f ae09 	bne.w	800abae <__ieee754_pow+0x3c6>
 800af9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800afa0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800afa4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800afa8:	fa43 fa0a 	asr.w	sl, r3, sl
 800afac:	44da      	add	sl, fp
 800afae:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800afb2:	489b      	ldr	r0, [pc, #620]	@ (800b220 <__ieee754_pow+0xa38>)
 800afb4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800afb8:	4108      	asrs	r0, r1
 800afba:	ea00 030a 	and.w	r3, r0, sl
 800afbe:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800afc2:	f1c1 0114 	rsb	r1, r1, #20
 800afc6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800afca:	4640      	mov	r0, r8
 800afcc:	fa4a fa01 	asr.w	sl, sl, r1
 800afd0:	f1bb 0f00 	cmp.w	fp, #0
 800afd4:	4649      	mov	r1, r9
 800afd6:	f04f 0200 	mov.w	r2, #0
 800afda:	bfb8      	it	lt
 800afdc:	f1ca 0a00 	rsblt	sl, sl, #0
 800afe0:	f7f5 f8c2 	bl	8000168 <__aeabi_dsub>
 800afe4:	4680      	mov	r8, r0
 800afe6:	4689      	mov	r9, r1
 800afe8:	2400      	movs	r4, #0
 800afea:	4632      	mov	r2, r6
 800afec:	463b      	mov	r3, r7
 800afee:	4640      	mov	r0, r8
 800aff0:	4649      	mov	r1, r9
 800aff2:	f7f5 f8bb 	bl	800016c <__adddf3>
 800aff6:	a37a      	add	r3, pc, #488	@ (adr r3, 800b1e0 <__ieee754_pow+0x9f8>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	4620      	mov	r0, r4
 800affe:	460d      	mov	r5, r1
 800b000:	f7f5 fa6a 	bl	80004d8 <__aeabi_dmul>
 800b004:	4642      	mov	r2, r8
 800b006:	464b      	mov	r3, r9
 800b008:	e9cd 0100 	strd	r0, r1, [sp]
 800b00c:	4620      	mov	r0, r4
 800b00e:	4629      	mov	r1, r5
 800b010:	f7f5 f8aa 	bl	8000168 <__aeabi_dsub>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	4630      	mov	r0, r6
 800b01a:	4639      	mov	r1, r7
 800b01c:	f7f5 f8a4 	bl	8000168 <__aeabi_dsub>
 800b020:	a371      	add	r3, pc, #452	@ (adr r3, 800b1e8 <__ieee754_pow+0xa00>)
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	f7f5 fa57 	bl	80004d8 <__aeabi_dmul>
 800b02a:	a371      	add	r3, pc, #452	@ (adr r3, 800b1f0 <__ieee754_pow+0xa08>)
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	4680      	mov	r8, r0
 800b032:	4689      	mov	r9, r1
 800b034:	4620      	mov	r0, r4
 800b036:	4629      	mov	r1, r5
 800b038:	f7f5 fa4e 	bl	80004d8 <__aeabi_dmul>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	4640      	mov	r0, r8
 800b042:	4649      	mov	r1, r9
 800b044:	f7f5 f892 	bl	800016c <__adddf3>
 800b048:	4604      	mov	r4, r0
 800b04a:	460d      	mov	r5, r1
 800b04c:	4602      	mov	r2, r0
 800b04e:	460b      	mov	r3, r1
 800b050:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b054:	f7f5 f88a 	bl	800016c <__adddf3>
 800b058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b05c:	4680      	mov	r8, r0
 800b05e:	4689      	mov	r9, r1
 800b060:	f7f5 f882 	bl	8000168 <__aeabi_dsub>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4620      	mov	r0, r4
 800b06a:	4629      	mov	r1, r5
 800b06c:	f7f5 f87c 	bl	8000168 <__aeabi_dsub>
 800b070:	4642      	mov	r2, r8
 800b072:	4606      	mov	r6, r0
 800b074:	460f      	mov	r7, r1
 800b076:	464b      	mov	r3, r9
 800b078:	4640      	mov	r0, r8
 800b07a:	4649      	mov	r1, r9
 800b07c:	f7f5 fa2c 	bl	80004d8 <__aeabi_dmul>
 800b080:	a35d      	add	r3, pc, #372	@ (adr r3, 800b1f8 <__ieee754_pow+0xa10>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	4604      	mov	r4, r0
 800b088:	460d      	mov	r5, r1
 800b08a:	f7f5 fa25 	bl	80004d8 <__aeabi_dmul>
 800b08e:	a35c      	add	r3, pc, #368	@ (adr r3, 800b200 <__ieee754_pow+0xa18>)
 800b090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b094:	f7f5 f868 	bl	8000168 <__aeabi_dsub>
 800b098:	4622      	mov	r2, r4
 800b09a:	462b      	mov	r3, r5
 800b09c:	f7f5 fa1c 	bl	80004d8 <__aeabi_dmul>
 800b0a0:	a359      	add	r3, pc, #356	@ (adr r3, 800b208 <__ieee754_pow+0xa20>)
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	f7f5 f861 	bl	800016c <__adddf3>
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	462b      	mov	r3, r5
 800b0ae:	f7f5 fa13 	bl	80004d8 <__aeabi_dmul>
 800b0b2:	a357      	add	r3, pc, #348	@ (adr r3, 800b210 <__ieee754_pow+0xa28>)
 800b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b8:	f7f5 f856 	bl	8000168 <__aeabi_dsub>
 800b0bc:	4622      	mov	r2, r4
 800b0be:	462b      	mov	r3, r5
 800b0c0:	f7f5 fa0a 	bl	80004d8 <__aeabi_dmul>
 800b0c4:	a354      	add	r3, pc, #336	@ (adr r3, 800b218 <__ieee754_pow+0xa30>)
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	f7f5 f84f 	bl	800016c <__adddf3>
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	462b      	mov	r3, r5
 800b0d2:	f7f5 fa01 	bl	80004d8 <__aeabi_dmul>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	4640      	mov	r0, r8
 800b0dc:	4649      	mov	r1, r9
 800b0de:	f7f5 f843 	bl	8000168 <__aeabi_dsub>
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	460d      	mov	r5, r1
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	4640      	mov	r0, r8
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	f7f5 f9f3 	bl	80004d8 <__aeabi_dmul>
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	e9cd 0100 	strd	r0, r1, [sp]
 800b0f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	4629      	mov	r1, r5
 800b100:	f7f5 f832 	bl	8000168 <__aeabi_dsub>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b10c:	f7f5 fb0e 	bl	800072c <__aeabi_ddiv>
 800b110:	4632      	mov	r2, r6
 800b112:	4604      	mov	r4, r0
 800b114:	460d      	mov	r5, r1
 800b116:	463b      	mov	r3, r7
 800b118:	4640      	mov	r0, r8
 800b11a:	4649      	mov	r1, r9
 800b11c:	f7f5 f9dc 	bl	80004d8 <__aeabi_dmul>
 800b120:	4632      	mov	r2, r6
 800b122:	463b      	mov	r3, r7
 800b124:	f7f5 f822 	bl	800016c <__adddf3>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	4620      	mov	r0, r4
 800b12e:	4629      	mov	r1, r5
 800b130:	f7f5 f81a 	bl	8000168 <__aeabi_dsub>
 800b134:	4642      	mov	r2, r8
 800b136:	464b      	mov	r3, r9
 800b138:	f7f5 f816 	bl	8000168 <__aeabi_dsub>
 800b13c:	4602      	mov	r2, r0
 800b13e:	460b      	mov	r3, r1
 800b140:	2000      	movs	r0, #0
 800b142:	4938      	ldr	r1, [pc, #224]	@ (800b224 <__ieee754_pow+0xa3c>)
 800b144:	f7f5 f810 	bl	8000168 <__aeabi_dsub>
 800b148:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b14c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800b150:	da2e      	bge.n	800b1b0 <__ieee754_pow+0x9c8>
 800b152:	4652      	mov	r2, sl
 800b154:	f000 f874 	bl	800b240 <scalbn>
 800b158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b15c:	f7ff bbed 	b.w	800a93a <__ieee754_pow+0x152>
 800b160:	4c31      	ldr	r4, [pc, #196]	@ (800b228 <__ieee754_pow+0xa40>)
 800b162:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b166:	42a3      	cmp	r3, r4
 800b168:	d91a      	bls.n	800b1a0 <__ieee754_pow+0x9b8>
 800b16a:	4b30      	ldr	r3, [pc, #192]	@ (800b22c <__ieee754_pow+0xa44>)
 800b16c:	440b      	add	r3, r1
 800b16e:	4303      	orrs	r3, r0
 800b170:	d009      	beq.n	800b186 <__ieee754_pow+0x99e>
 800b172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b176:	2200      	movs	r2, #0
 800b178:	2300      	movs	r3, #0
 800b17a:	f7f5 fc1f 	bl	80009bc <__aeabi_dcmplt>
 800b17e:	3800      	subs	r0, #0
 800b180:	bf18      	it	ne
 800b182:	2001      	movne	r0, #1
 800b184:	e444      	b.n	800aa10 <__ieee754_pow+0x228>
 800b186:	4642      	mov	r2, r8
 800b188:	464b      	mov	r3, r9
 800b18a:	f7f4 ffed 	bl	8000168 <__aeabi_dsub>
 800b18e:	4632      	mov	r2, r6
 800b190:	463b      	mov	r3, r7
 800b192:	f7f5 fc27 	bl	80009e4 <__aeabi_dcmpge>
 800b196:	2800      	cmp	r0, #0
 800b198:	d1eb      	bne.n	800b172 <__ieee754_pow+0x98a>
 800b19a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800b230 <__ieee754_pow+0xa48>
 800b19e:	e6fd      	b.n	800af9c <__ieee754_pow+0x7b4>
 800b1a0:	469a      	mov	sl, r3
 800b1a2:	4b24      	ldr	r3, [pc, #144]	@ (800b234 <__ieee754_pow+0xa4c>)
 800b1a4:	459a      	cmp	sl, r3
 800b1a6:	f63f aef9 	bhi.w	800af9c <__ieee754_pow+0x7b4>
 800b1aa:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b1ae:	e71b      	b.n	800afe8 <__ieee754_pow+0x800>
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	e7d1      	b.n	800b158 <__ieee754_pow+0x970>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	491b      	ldr	r1, [pc, #108]	@ (800b224 <__ieee754_pow+0xa3c>)
 800b1b8:	f7ff bb34 	b.w	800a824 <__ieee754_pow+0x3c>
 800b1bc:	2000      	movs	r0, #0
 800b1be:	2100      	movs	r1, #0
 800b1c0:	f7ff bb30 	b.w	800a824 <__ieee754_pow+0x3c>
 800b1c4:	4650      	mov	r0, sl
 800b1c6:	4659      	mov	r1, fp
 800b1c8:	f7ff bb2c 	b.w	800a824 <__ieee754_pow+0x3c>
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	f7ff bb79 	b.w	800a8c4 <__ieee754_pow+0xdc>
 800b1d2:	2400      	movs	r4, #0
 800b1d4:	f7ff bb64 	b.w	800a8a0 <__ieee754_pow+0xb8>
 800b1d8:	652b82fe 	.word	0x652b82fe
 800b1dc:	3c971547 	.word	0x3c971547
 800b1e0:	00000000 	.word	0x00000000
 800b1e4:	3fe62e43 	.word	0x3fe62e43
 800b1e8:	fefa39ef 	.word	0xfefa39ef
 800b1ec:	3fe62e42 	.word	0x3fe62e42
 800b1f0:	0ca86c39 	.word	0x0ca86c39
 800b1f4:	be205c61 	.word	0xbe205c61
 800b1f8:	72bea4d0 	.word	0x72bea4d0
 800b1fc:	3e663769 	.word	0x3e663769
 800b200:	c5d26bf1 	.word	0xc5d26bf1
 800b204:	3ebbbd41 	.word	0x3ebbbd41
 800b208:	af25de2c 	.word	0xaf25de2c
 800b20c:	3f11566a 	.word	0x3f11566a
 800b210:	16bebd93 	.word	0x16bebd93
 800b214:	3f66c16c 	.word	0x3f66c16c
 800b218:	5555553e 	.word	0x5555553e
 800b21c:	3fc55555 	.word	0x3fc55555
 800b220:	fff00000 	.word	0xfff00000
 800b224:	3ff00000 	.word	0x3ff00000
 800b228:	4090cbff 	.word	0x4090cbff
 800b22c:	3f6f3400 	.word	0x3f6f3400
 800b230:	4090cc00 	.word	0x4090cc00
 800b234:	3fe00000 	.word	0x3fe00000

0800b238 <fabs>:
 800b238:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b23c:	4619      	mov	r1, r3
 800b23e:	4770      	bx	lr

0800b240 <scalbn>:
 800b240:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b244:	4616      	mov	r6, r2
 800b246:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b24a:	4683      	mov	fp, r0
 800b24c:	468c      	mov	ip, r1
 800b24e:	460b      	mov	r3, r1
 800b250:	b982      	cbnz	r2, 800b274 <scalbn+0x34>
 800b252:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b256:	4303      	orrs	r3, r0
 800b258:	d039      	beq.n	800b2ce <scalbn+0x8e>
 800b25a:	4b2f      	ldr	r3, [pc, #188]	@ (800b318 <scalbn+0xd8>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	f7f5 f93b 	bl	80004d8 <__aeabi_dmul>
 800b262:	4b2e      	ldr	r3, [pc, #184]	@ (800b31c <scalbn+0xdc>)
 800b264:	4683      	mov	fp, r0
 800b266:	429e      	cmp	r6, r3
 800b268:	468c      	mov	ip, r1
 800b26a:	da0d      	bge.n	800b288 <scalbn+0x48>
 800b26c:	a326      	add	r3, pc, #152	@ (adr r3, 800b308 <scalbn+0xc8>)
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	e01b      	b.n	800b2ac <scalbn+0x6c>
 800b274:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800b278:	42ba      	cmp	r2, r7
 800b27a:	d109      	bne.n	800b290 <scalbn+0x50>
 800b27c:	4602      	mov	r2, r0
 800b27e:	f7f4 ff75 	bl	800016c <__adddf3>
 800b282:	4683      	mov	fp, r0
 800b284:	468c      	mov	ip, r1
 800b286:	e022      	b.n	800b2ce <scalbn+0x8e>
 800b288:	460b      	mov	r3, r1
 800b28a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b28e:	3a36      	subs	r2, #54	@ 0x36
 800b290:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b294:	428e      	cmp	r6, r1
 800b296:	dd0c      	ble.n	800b2b2 <scalbn+0x72>
 800b298:	a31d      	add	r3, pc, #116	@ (adr r3, 800b310 <scalbn+0xd0>)
 800b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29e:	461c      	mov	r4, r3
 800b2a0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800b2a4:	f361 74df 	bfi	r4, r1, #31, #1
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	481d      	ldr	r0, [pc, #116]	@ (800b320 <scalbn+0xe0>)
 800b2ac:	f7f5 f914 	bl	80004d8 <__aeabi_dmul>
 800b2b0:	e7e7      	b.n	800b282 <scalbn+0x42>
 800b2b2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b2b6:	4432      	add	r2, r6
 800b2b8:	428a      	cmp	r2, r1
 800b2ba:	dced      	bgt.n	800b298 <scalbn+0x58>
 800b2bc:	2a00      	cmp	r2, #0
 800b2be:	dd0a      	ble.n	800b2d6 <scalbn+0x96>
 800b2c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b2c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b2c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b2cc:	46ac      	mov	ip, r5
 800b2ce:	4658      	mov	r0, fp
 800b2d0:	4661      	mov	r1, ip
 800b2d2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800b2d6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b2da:	da09      	bge.n	800b2f0 <scalbn+0xb0>
 800b2dc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800b2e0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800b2e4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800b2e8:	480e      	ldr	r0, [pc, #56]	@ (800b324 <scalbn+0xe4>)
 800b2ea:	f041 011f 	orr.w	r1, r1, #31
 800b2ee:	e7bd      	b.n	800b26c <scalbn+0x2c>
 800b2f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b2f4:	3236      	adds	r2, #54	@ 0x36
 800b2f6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b2fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b2fe:	4658      	mov	r0, fp
 800b300:	4629      	mov	r1, r5
 800b302:	2200      	movs	r2, #0
 800b304:	4b08      	ldr	r3, [pc, #32]	@ (800b328 <scalbn+0xe8>)
 800b306:	e7d1      	b.n	800b2ac <scalbn+0x6c>
 800b308:	c2f8f359 	.word	0xc2f8f359
 800b30c:	01a56e1f 	.word	0x01a56e1f
 800b310:	8800759c 	.word	0x8800759c
 800b314:	7e37e43c 	.word	0x7e37e43c
 800b318:	43500000 	.word	0x43500000
 800b31c:	ffff3cb0 	.word	0xffff3cb0
 800b320:	8800759c 	.word	0x8800759c
 800b324:	c2f8f359 	.word	0xc2f8f359
 800b328:	3c900000 	.word	0x3c900000

0800b32c <with_errno>:
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	4604      	mov	r4, r0
 800b330:	460d      	mov	r5, r1
 800b332:	4616      	mov	r6, r2
 800b334:	f7fb fee6 	bl	8007104 <__errno>
 800b338:	4629      	mov	r1, r5
 800b33a:	6006      	str	r6, [r0, #0]
 800b33c:	4620      	mov	r0, r4
 800b33e:	bd70      	pop	{r4, r5, r6, pc}

0800b340 <xflow>:
 800b340:	b513      	push	{r0, r1, r4, lr}
 800b342:	4604      	mov	r4, r0
 800b344:	4619      	mov	r1, r3
 800b346:	4610      	mov	r0, r2
 800b348:	b10c      	cbz	r4, 800b34e <xflow+0xe>
 800b34a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b34e:	e9cd 2300 	strd	r2, r3, [sp]
 800b352:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b356:	f7f5 f8bf 	bl	80004d8 <__aeabi_dmul>
 800b35a:	2222      	movs	r2, #34	@ 0x22
 800b35c:	b002      	add	sp, #8
 800b35e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b362:	f7ff bfe3 	b.w	800b32c <with_errno>

0800b366 <__math_uflow>:
 800b366:	2200      	movs	r2, #0
 800b368:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b36c:	f7ff bfe8 	b.w	800b340 <xflow>

0800b370 <__math_oflow>:
 800b370:	2200      	movs	r2, #0
 800b372:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800b376:	f7ff bfe3 	b.w	800b340 <xflow>
	...

0800b37c <__ieee754_sqrt>:
 800b37c:	4a67      	ldr	r2, [pc, #412]	@ (800b51c <__ieee754_sqrt+0x1a0>)
 800b37e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b382:	438a      	bics	r2, r1
 800b384:	4606      	mov	r6, r0
 800b386:	460f      	mov	r7, r1
 800b388:	460b      	mov	r3, r1
 800b38a:	4604      	mov	r4, r0
 800b38c:	d10e      	bne.n	800b3ac <__ieee754_sqrt+0x30>
 800b38e:	4602      	mov	r2, r0
 800b390:	f7f5 f8a2 	bl	80004d8 <__aeabi_dmul>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	4630      	mov	r0, r6
 800b39a:	4639      	mov	r1, r7
 800b39c:	f7f4 fee6 	bl	800016c <__adddf3>
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	460f      	mov	r7, r1
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ac:	2900      	cmp	r1, #0
 800b3ae:	dc0c      	bgt.n	800b3ca <__ieee754_sqrt+0x4e>
 800b3b0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b3b4:	4302      	orrs	r2, r0
 800b3b6:	d0f5      	beq.n	800b3a4 <__ieee754_sqrt+0x28>
 800b3b8:	b189      	cbz	r1, 800b3de <__ieee754_sqrt+0x62>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	f7f4 fed4 	bl	8000168 <__aeabi_dsub>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	f7f5 f9b2 	bl	800072c <__aeabi_ddiv>
 800b3c8:	e7ea      	b.n	800b3a0 <__ieee754_sqrt+0x24>
 800b3ca:	150a      	asrs	r2, r1, #20
 800b3cc:	d115      	bne.n	800b3fa <__ieee754_sqrt+0x7e>
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	e009      	b.n	800b3e6 <__ieee754_sqrt+0x6a>
 800b3d2:	0ae3      	lsrs	r3, r4, #11
 800b3d4:	3a15      	subs	r2, #21
 800b3d6:	0564      	lsls	r4, r4, #21
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d0fa      	beq.n	800b3d2 <__ieee754_sqrt+0x56>
 800b3dc:	e7f7      	b.n	800b3ce <__ieee754_sqrt+0x52>
 800b3de:	460a      	mov	r2, r1
 800b3e0:	e7fa      	b.n	800b3d8 <__ieee754_sqrt+0x5c>
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	3101      	adds	r1, #1
 800b3e6:	02d8      	lsls	r0, r3, #11
 800b3e8:	d5fb      	bpl.n	800b3e2 <__ieee754_sqrt+0x66>
 800b3ea:	1e48      	subs	r0, r1, #1
 800b3ec:	1a12      	subs	r2, r2, r0
 800b3ee:	f1c1 0020 	rsb	r0, r1, #32
 800b3f2:	fa24 f000 	lsr.w	r0, r4, r0
 800b3f6:	4303      	orrs	r3, r0
 800b3f8:	408c      	lsls	r4, r1
 800b3fa:	2600      	movs	r6, #0
 800b3fc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b400:	2116      	movs	r1, #22
 800b402:	07d2      	lsls	r2, r2, #31
 800b404:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b408:	4632      	mov	r2, r6
 800b40a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b40e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b412:	bf5c      	itt	pl
 800b414:	005b      	lslpl	r3, r3, #1
 800b416:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b41a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b41e:	bf58      	it	pl
 800b420:	0064      	lslpl	r4, r4, #1
 800b422:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b426:	107f      	asrs	r7, r7, #1
 800b428:	0064      	lsls	r4, r4, #1
 800b42a:	1815      	adds	r5, r2, r0
 800b42c:	429d      	cmp	r5, r3
 800b42e:	bfde      	ittt	le
 800b430:	182a      	addle	r2, r5, r0
 800b432:	1b5b      	suble	r3, r3, r5
 800b434:	1836      	addle	r6, r6, r0
 800b436:	0fe5      	lsrs	r5, r4, #31
 800b438:	3901      	subs	r1, #1
 800b43a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b43e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b442:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b446:	d1f0      	bne.n	800b42a <__ieee754_sqrt+0xae>
 800b448:	460d      	mov	r5, r1
 800b44a:	f04f 0a20 	mov.w	sl, #32
 800b44e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b452:	429a      	cmp	r2, r3
 800b454:	eb01 0c00 	add.w	ip, r1, r0
 800b458:	db02      	blt.n	800b460 <__ieee754_sqrt+0xe4>
 800b45a:	d113      	bne.n	800b484 <__ieee754_sqrt+0x108>
 800b45c:	45a4      	cmp	ip, r4
 800b45e:	d811      	bhi.n	800b484 <__ieee754_sqrt+0x108>
 800b460:	f1bc 0f00 	cmp.w	ip, #0
 800b464:	eb0c 0100 	add.w	r1, ip, r0
 800b468:	da42      	bge.n	800b4f0 <__ieee754_sqrt+0x174>
 800b46a:	2900      	cmp	r1, #0
 800b46c:	db40      	blt.n	800b4f0 <__ieee754_sqrt+0x174>
 800b46e:	f102 0e01 	add.w	lr, r2, #1
 800b472:	1a9b      	subs	r3, r3, r2
 800b474:	4672      	mov	r2, lr
 800b476:	45a4      	cmp	ip, r4
 800b478:	bf88      	it	hi
 800b47a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b47e:	eba4 040c 	sub.w	r4, r4, ip
 800b482:	4405      	add	r5, r0
 800b484:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800b488:	f1ba 0a01 	subs.w	sl, sl, #1
 800b48c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800b490:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b494:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b498:	d1db      	bne.n	800b452 <__ieee754_sqrt+0xd6>
 800b49a:	431c      	orrs	r4, r3
 800b49c:	d01a      	beq.n	800b4d4 <__ieee754_sqrt+0x158>
 800b49e:	4c20      	ldr	r4, [pc, #128]	@ (800b520 <__ieee754_sqrt+0x1a4>)
 800b4a0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800b524 <__ieee754_sqrt+0x1a8>
 800b4a4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b4a8:	e9db 2300 	ldrd	r2, r3, [fp]
 800b4ac:	f7f4 fe5c 	bl	8000168 <__aeabi_dsub>
 800b4b0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	4640      	mov	r0, r8
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	f7f5 fa88 	bl	80009d0 <__aeabi_dcmple>
 800b4c0:	b140      	cbz	r0, 800b4d4 <__ieee754_sqrt+0x158>
 800b4c2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b4c6:	e9db 2300 	ldrd	r2, r3, [fp]
 800b4ca:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b4ce:	d111      	bne.n	800b4f4 <__ieee754_sqrt+0x178>
 800b4d0:	4655      	mov	r5, sl
 800b4d2:	3601      	adds	r6, #1
 800b4d4:	1072      	asrs	r2, r6, #1
 800b4d6:	086b      	lsrs	r3, r5, #1
 800b4d8:	07f1      	lsls	r1, r6, #31
 800b4da:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b4de:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b4e2:	bf48      	it	mi
 800b4e4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800b4ee:	e757      	b.n	800b3a0 <__ieee754_sqrt+0x24>
 800b4f0:	4696      	mov	lr, r2
 800b4f2:	e7be      	b.n	800b472 <__ieee754_sqrt+0xf6>
 800b4f4:	f7f4 fe3a 	bl	800016c <__adddf3>
 800b4f8:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	4640      	mov	r0, r8
 800b502:	4649      	mov	r1, r9
 800b504:	f7f5 fa5a 	bl	80009bc <__aeabi_dcmplt>
 800b508:	b120      	cbz	r0, 800b514 <__ieee754_sqrt+0x198>
 800b50a:	1ca8      	adds	r0, r5, #2
 800b50c:	bf08      	it	eq
 800b50e:	3601      	addeq	r6, #1
 800b510:	3502      	adds	r5, #2
 800b512:	e7df      	b.n	800b4d4 <__ieee754_sqrt+0x158>
 800b514:	1c6b      	adds	r3, r5, #1
 800b516:	f023 0501 	bic.w	r5, r3, #1
 800b51a:	e7db      	b.n	800b4d4 <__ieee754_sqrt+0x158>
 800b51c:	7ff00000 	.word	0x7ff00000
 800b520:	200001e8 	.word	0x200001e8
 800b524:	200001e0 	.word	0x200001e0

0800b528 <_init>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	bf00      	nop
 800b52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b52e:	bc08      	pop	{r3}
 800b530:	469e      	mov	lr, r3
 800b532:	4770      	bx	lr

0800b534 <_fini>:
 800b534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b536:	bf00      	nop
 800b538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b53a:	bc08      	pop	{r3}
 800b53c:	469e      	mov	lr, r3
 800b53e:	4770      	bx	lr
